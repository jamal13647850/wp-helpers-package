This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
src/
  Assets/
    AssetManager.php
  Cache/
    CacheInterface.php
    CacheManager.php
    FileCacheDriver.php
    ObjectCacheDriver.php
    TransientCacheDriver.php
  Components/
    Menu/
      assets/
        multicolumn-menu.css
      Options/
        MenuOptions.php
      Variants/
        DesktopMenu.php
        DropdownMenu.php
        MobileMenu.php
        MultiColumnDesktopMenu.php
        OverlayMobileMenu.php
        SimpleMenu.php
      AbstractMenu.php
      MenuCacheManager.php
      MenuManager.php
    Slider/
      Options/
        SliderOptions.php
      Variants/
        WideAuto/
          views/
            wide-auto.twig
          WideAuto.php
      AbstractSlider.php
      SliderManager.php
  Config/
    theme_settings_definitions.php
  Controllers/
    BlogCommentsController.php
    BlogRatingController.php
    HTMX_Controller.php
    ProductReviewsController.php
    SMSForgotPasswordController.php
    SMSLoginController.php
    SMSRegisterController.php
  Helpers/
    Helper.php
    JalaliDate.php
    jdf.php
    TwigHelper.php
    TwigHelperInterface.php
  Integrations/
    WooCommerce.php
  Language/
    lang/
      en_US.php
      fa_IR.php
    LanguageManager.php
  Managers/
    CaptchaManager.php
    CartManager.php
    QuickViewManager.php
    UserProfileManager.php
    WishlistManager.php
  Models/
    Category.php
    CPTCategory.php
    ProductCompare.php
  Navigation/
    AlpineMenuManager.php
    AlpineNavWalker.php
  Traits/
    CommentValidationTrait.php
  Utilities/
    Clear_Theme_Cache.php
    HTMX_Handler.php
    HTMX_Validator.php
    Theme_Settings_ACF.php
    Theme_Settings_Cache.php
    UserMigration.php
  Views/
    View.php
    ViewInterface.php
    WordPressTwigExtension.php
  Config.php
  ServiceProvider.php
.gitignore
.repomixignore
composer.json

================================================================
Files
================================================================

================
File: src/Components/Menu/assets/multicolumn-menu.css
================
.dropdown-item {
    position: relative;
}
.dropdown-trigger {
    cursor: pointer;
}
.dropdown-arrow {
    font-size: 12px;
    transition: transform .3s ease;
    color: #75d4d0;
}
.dropdown-arrow.rotated {
    transform: rotate(180deg);
}
.dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background: #fff;
    border-radius: 16px;
    box-shadow: 0 15px 50px #00000026;
    border: 1px solid rgba(117,212,208,.2);
    min-width: 450px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(0);
    transition: all .3s cubic-bezier(.4,0,.2,1);
    z-index: 1001;
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    padding: 15px;
    border-top: 3px solid #75D4D0;
}
.dropdown-menu.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}
li.has-dropdown:hover > .dropdown-menu,
.dropdown-menu.active {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}
.nav-menu,
.nav-menu * {
  overflow: visible;
}
.dropdown-content {
    padding: 15px 0;
}
.dropdown-columns {
    display: flex;
    gap: 15px;
}
.dropdown-column {
    flex: 1;
}
.dropdown-link {
    display: flex;
    align-items: center;
    padding: 12px 20px;
    color: #2c3e50;
    text-decoration: none;
    font-family: Kalameh, Arial, sans-serif;
    font-weight: 500;
    font-size: 14px;
    transition: all .3s ease;
    border-left: none;
    border-radius: 8px;
    gap: 12px;
}
.dropdown-link:hover {
    background: linear-gradient(135deg, #75d4d01a, #85c1e91a);
    color: #75d4d0;
    transform: translate(-5px);
}
.dropdown-link i {
    opacity: 1;
    color: #75d4d0;
    font-size: 15px;
    transition: all .3s ease;
}
.dropdown-link:hover i {
    transform: scale(1.1) rotate(-10deg);
}
.dropdown-link span {
    transition: transform .3s ease;
}
.dropdown-link:hover span {
    transform: translate(-3px);
}
.mobile-menu-btn {
    display: none;
    flex-direction: column;
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    gap: 4px;
    border-radius: 8px;
    transition: background .3s ease;
}
.mobile-menu-btn:hover {
    background: #75d4d01a;
}
.mobile-menu-btn span {
    width: 25px;
    height: 3px;
    background: #2c3e50;
    border-radius: 2px;
    transition: all .3s ease;
}
.mobile-menu-btn:hover span {
    background: #75d4d0;
}
.mobile-menu-btn:focus-visible {
    outline: 2px solid #75D4D0;
    outline-offset: 2px;
}
.mobile-menu {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: #fff;
    border-radius: 0 0 20px 20px;
    box-shadow: 0 10px 30px #0000001a;
    border: 1px solid rgba(117,212,208,.2);
    border-top: none;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-20px);
    transition: all .3s cubic-bezier(.4,0,.2,1);
    z-index: 999;
    max-height: 70vh;
    overflow-y: auto;
}
.mobile-menu.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}
.mobile-menu-item {
    border-bottom: 1px solid rgba(117,212,208,.1);
}
.mobile-menu-title {
    display: block;
    padding: 15px 20px;
    font-family: Kalameh, Arial, sans-serif;
    font-weight: 700;
    font-size: 16px;
    color: #2c3e50;
    background: linear-gradient(135deg, #75d4d01a, #85c1e91a);
}
.mobile-submenu {
    background: #f8f9fa;
}
.mobile-submenu-link {
    display: block;
    padding: 12px 40px;
    color: #2c3e50;
    text-decoration: none;
    font-family: Kalameh, Arial, sans-serif;
    font-weight: 500;
    font-size: 14px;
    border-bottom: 1px solid rgba(117,212,208,.1);
    transition: all .3s ease;
}
.mobile-submenu-link:hover {
    background: #75d4d01a;
    color: #75d4d0;
    padding-right: 45px;
}
.mobile-menu-link {
    display: block;
    padding: 15px 20px;
    color: #2c3e50;
    text-decoration: none;
    font-family: Kalameh, Arial, sans-serif;
    font-weight: 600;
    font-size: 15px;
    border-bottom: 1px solid rgba(117,212,208,.1);
    transition: all .3s ease;
}
.mobile-menu-link:hover {
    background: linear-gradient(135deg, #75d4d01a, #85c1e91a);
    color: #75d4d0;
    padding-right: 25px;
}
@media (max-width: 1200px) {
    .header-content {
        padding: 0 15px;
    }
    .nav-menu {
        gap: 25px;
    }
    .nav-link {
        font-size: 14px;
    }
    .phone-link {
        font-size: 16px;
        padding: 10px 16px;
    }
    .dropdown-menu {
        min-width: 250px;
    }
}
@media (max-width: 1024px) {
    .nav-menu {
        gap: 20px;
    }
    .nav-link {
        font-size: 13px;
    }
    .phone-link {
        font-size: 15px;
        padding: 8px 14px;
    }
    .logo-image {
        height: 45px;
    }
    .header.scrolled .logo-image {
        height: 36px;
    }
}
@media (max-width: 768px) {
    .header {
        height: 80px;
    }
    .header.scrolled {
        height: 65px;
    }
    .header-content {
        padding: 0 15px;
    }
    .nav-menu {
        display: none;
    }
    .mobile-menu-btn {
        display: flex;
        order: 2;
    }
    .header-nav {
        order: 2;
        flex: 0 0 auto;
        justify-content: flex-start;
    }
    .header-logo {
        order: 1;
    }
    .header-actions {
        order: 3;
    }
    .phone-link {
        font-size: 14px;
        padding: 8px 12px;
    }
    .logo-image {
        height: 42px;
    }
    .header.scrolled .logo-image {
        height: 34px;
    }
}
@media (max-width: 480px) {
    .header {
        height: 70px;
    }
    .header.scrolled {
        height: 60px;
    }
    .header-content {
        padding: 0 10px;
    }
    .phone-link {
        font-size: 12px;
        padding: 6px 10px;
        gap: 6px;
    }
    .phone-link span {
        display: none;
    }
    .phone-link i {
        font-size: 14px;
    }
    .logo-image {
        height: 38px;
    }
    .header.scrolled .logo-image {
        height: 30px;
    }
    .mobile-menu {
        border-radius: 0 0 15px 15px;
    }
    .mobile-menu-title {
        font-size: 15px;
        padding: 12px 15px;
    }
    .mobile-submenu-link {
        padding: 10px 30px;
        font-size: 13px;
    }
    .mobile-menu-link {
        padding: 12px 15px;
        font-size: 14px;
    }
}

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

README.md
coverage/

================
File: src/Assets/AssetManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Assets;
final class AssetManager
{
    private static array $done = [];
    public static function style(
        string $handle,
        string $src,
        array $deps = [],
        string $ver = null,
        string $media = 'all'
    ): void {
        if (isset(self::$done[$handle])) {
            return;
        }
        wp_enqueue_style($handle, $src, $deps, $ver, $media);
        self::$done[$handle] = true;
    }
    public static function script(
        string $handle,
        string $src,
        array $deps = [],
        string $ver = null,
        bool $footer = true
    ): void {
        if (isset(self::$done[$handle])) {
            return;
        }
        wp_enqueue_script($handle, $src, $deps, $ver, $footer);
        self::$done[$handle] = true;
    }
}

================
File: src/Cache/CacheInterface.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Cache;
interface CacheInterface
{
    public function set(string $key, $value, ?int $expiration = null): bool;
    public function get(string $key, $default = null);
    public function delete(string $key): bool;
    public function exists(string $key): bool;
    public function flush(): bool;
    public function increment(string $key, int $offset = 1, ?int $expiration = null);
    public function decrement(string $key, int $offset = 1, ?int $expiration = null);
    public function setMultiple(array $values, ?int $expiration = null): bool;
    public function getMultiple(array $keys, $default = null): array;
    public function deleteMultiple(array $keys): bool;
}

================
File: src/Cache/CacheManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Cache;
defined('ABSPATH') || exit();
use jamal13647850\wphelpers\Config;
class CacheManager
{
    protected CacheInterface $driver;
    public function __construct(
        string $driver_type = 'transient',
        ?string $prefix = null,
        ?int $default_expiration = null
    ) {
        $prefix = $prefix ?? Config::get('cache.prefix', 'wphelpers_');
        $default_expiration = $default_expiration ?? Config::get('cache.expiration', 3600);
        switch ($driver_type) {
            case 'object':
                $this->driver = new ObjectCacheDriver($prefix, $default_expiration);
                break;
            case 'file':
                $this->driver = new FileCacheDriver($prefix, $default_expiration);
                break;
            case 'transient':
            default:
                $this->driver = new TransientCacheDriver($prefix, $default_expiration);
        }
    }
    public function set(string $key, $value, ?int $expiration = null): bool
    {
        return $this->driver->set($key, $value, $expiration);
    }
    public function get(string $key, $default = null)
    {
        return $this->driver->get($key, $default);
    }
    public function delete(string $key): bool
    {
        return $this->driver->delete($key);
    }
    public function exists(string $key): bool
    {
        return $this->driver->exists($key);
    }
    public function flush(): bool
    {
        return $this->driver->flush();
    }
    public function remember(string $key, callable $callback, ?int $expiration = null)
    {
        $value = $this->driver->get($key);
        if ($value !== null) return $value;
        $value = $callback();
        $this->driver->set($key, $value, $expiration);
        return $value;
    }
    public function increment(string $key, int $offset = 1, ?int $expiration = null)
    {
        return $this->driver->increment($key, $offset, $expiration);
    }
    public function decrement(string $key, int $offset = 1, ?int $expiration = null)
    {
        return $this->driver->decrement($key, $offset, $expiration);
    }
    public function setMultiple(array $values, ?int $expiration = null): bool
    {
        return $this->driver->setMultiple($values, $expiration);
    }
    public function getMultiple(array $keys, $default = null): array
    {
        return $this->driver->getMultiple($keys, $default);
    }
    public function deleteMultiple(array $keys): bool
    {
        return $this->driver->deleteMultiple($keys);
    }
    public function setDriver(CacheInterface $driver): void
    {
        $this->driver = $driver;
    }
    public function getDriver(): CacheInterface
    {
        return $this->driver;
    }
}

================
File: src/Cache/FileCacheDriver.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Cache;
class FileCacheDriver implements CacheInterface
{
    protected string $prefix;
    protected int $default_expiration;
    protected string $cache_dir;
    public function __construct(string $prefix = '', int $default_expiration = 3600, ?string $cache_dir = null)
    {
        $this->prefix = $prefix;
        $this->default_expiration = $default_expiration;
        $this->cache_dir = $cache_dir ?? (WP_CONTENT_DIR . '/cache/wphelpers/');
        if (!is_dir($this->cache_dir)) {
            wp_mkdir_p($this->cache_dir);
        }
    }
    protected function getCacheFile(string $key): string
    {
        $safe = preg_replace('~[^a-zA-Z0-9_]~', '_', $this->prefix . $key);
        return $this->cache_dir . $safe . '.cache.php';
    }
    public function set(string $key, $value, ?int $expiration = null): bool
    {
        $expiration = $expiration ?? $this->default_expiration;
        $data = [
            'expire' => time() + $expiration,
            'value'  => serialize($value)
        ];
        return (bool) file_put_contents($this->getCacheFile($key), "<?php return " . var_export($data, true) . ";");
    }
    public function get(string $key, $default = null)
    {
        $file = $this->getCacheFile($key);
        if (!file_exists($file)) return $default;
        $data = include $file;
        if (!is_array($data) || ($data['expire'] < time())) {
            $this->delete($key);
            return $default;
        }
        return unserialize($data['value']);
    }
    public function delete(string $key): bool
    {
        $file = $this->getCacheFile($key);
        return (!file_exists($file) || unlink($file));
    }
    public function exists(string $key): bool
    {
        return $this->get($key) !== null;
    }
    public function flush(): bool
    {
        $files = glob($this->cache_dir . '*.cache.php');
        if (!$files) return true;
        foreach ($files as $file) unlink($file);
        return true;
    }
    public function increment(string $key, int $offset = 1, ?int $expiration = null)
    {
        $value = (int)$this->get($key, 0) + $offset;
        return ($this->set($key, $value, $expiration)) ? $value : false;
    }
    public function decrement(string $key, int $offset = 1, ?int $expiration = null)
    {
        return $this->increment($key, -$offset, $expiration);
    }
    public function setMultiple(array $values, ?int $expiration = null): bool
    {
        $ok = true;
        foreach ($values as $key => $value) {
            if (!$this->set($key, $value, $expiration)) $ok = false;
        }
        return $ok;
    }
    public function getMultiple(array $keys, $default = null): array
    {
        $result = [];
        foreach ($keys as $key) {
            $result[$key] = $this->get($key, $default);
        }
        return $result;
    }
    public function deleteMultiple(array $keys): bool
    {
        $ok = true;
        foreach ($keys as $key) {
            if (!$this->delete($key)) $ok = false;
        }
        return $ok;
    }
}

================
File: src/Cache/ObjectCacheDriver.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Cache;
class ObjectCacheDriver implements CacheInterface
{
    protected string $prefix;
    protected int $default_expiration;
    protected string $group;
    public function __construct(string $prefix = '', int $default_expiration = 3600, string $group = 'wphelpers')
    {
        $this->prefix = $prefix;
        $this->default_expiration = $default_expiration;
        $this->group = $group;
    }
    public function set(string $key, $value, ?int $expiration = null): bool
    {
        $key = $this->prefix . $key;
        $expiration = $expiration ?? $this->default_expiration;
        return wp_cache_set($key, $value, $this->group, $expiration);
    }
    public function get(string $key, $default = null)
    {
        $key = $this->prefix . $key;
        $value = wp_cache_get($key, $this->group);
        return ($value !== false) ? $value : $default;
    }
    public function delete(string $key): bool
    {
        $key = $this->prefix . $key;
        return wp_cache_delete($key, $this->group);
    }
    public function exists(string $key): bool
    {
        return $this->get($key) !== null;
    }
    public function flush(): bool
    {
        return wp_cache_flush();
    }
    public function increment(string $key, int $offset = 1, ?int $expiration = null)
    {
        $value = (int)$this->get($key, 0) + $offset;
        return ($this->set($key, $value, $expiration)) ? $value : false;
    }
    public function decrement(string $key, int $offset = 1, ?int $expiration = null)
    {
        return $this->increment($key, -$offset, $expiration);
    }
    public function setMultiple(array $values, ?int $expiration = null): bool
    {
        $ok = true;
        foreach ($values as $key => $value) {
            if (!$this->set($key, $value, $expiration)) $ok = false;
        }
        return $ok;
    }
    public function getMultiple(array $keys, $default = null): array
    {
        $result = [];
        foreach ($keys as $key) {
            $result[$key] = $this->get($key, $default);
        }
        return $result;
    }
    public function deleteMultiple(array $keys): bool
    {
        $ok = true;
        foreach ($keys as $key) {
            if (!$this->delete($key)) $ok = false;
        }
        return $ok;
    }
}

================
File: src/Cache/TransientCacheDriver.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Cache;
class TransientCacheDriver implements CacheInterface
{
    protected string $prefix;
    protected int $default_expiration;
    public function __construct(string $prefix = '', int $default_expiration = 3600)
    {
        $this->prefix = $prefix;
        $this->default_expiration = $default_expiration;
    }
    /**
     * Build the prefixed transient name, respecting length restriction.
     */
    protected function buildKey(string $key): string
    {
        // WP's max transient key length = 45 chars (option name size 64 minus prefix ...)
        $transient = $this->prefix . $key;
        if (strlen($transient) > 45) {
            $transient = $this->prefix . substr(md5($key), 0, 16);
        }
        return $transient;
    }
    public function set(string $key, $value, ?int $expiration = null): bool
    {
        $expiration = $expiration ?? $this->default_expiration;
        return set_transient($this->buildKey($key), $value, $expiration);
    }
    public function get(string $key, $default = null)
    {
        $value = get_transient($this->buildKey($key));
        return ($value !== false) ? $value : $default;
    }
    public function delete(string $key): bool
    {
        return delete_transient($this->buildKey($key));
    }
    public function exists(string $key): bool
    {
        return $this->get($key) !== null;
    }
    public function flush(): bool
    {
        if (defined('WP_CLI') && WP_CLI) {
            \WP_CLI::runcommand('transient delete --all');
            return true;
        }
        global $wpdb;
        $like = $wpdb->esc_like('_transient_' . $this->prefix);
        $options = $wpdb->get_results(
            $wpdb->prepare("SELECT option_name FROM {$wpdb->options} WHERE option_name LIKE %s", $like . '%')
        );
        foreach ($options as $row) {
            delete_option($row->option_name);
        }
        $like = $wpdb->esc_like('_transient_timeout_' . $this->prefix);
        $timeouts = $wpdb->get_results(
            $wpdb->prepare("SELECT option_name FROM {$wpdb->options} WHERE option_name LIKE %s", $like . '%')
        );
        foreach ($timeouts as $row) {
            delete_option($row->option_name);
        }
        return true;
    }
    public function increment(string $key, int $offset = 1, ?int $expiration = null)
    {
        $current = (int) $this->get($key, 0);
        $new = $current + $offset;
        return ($this->set($key, $new, $expiration)) ? $new : false;
    }
    public function decrement(string $key, int $offset = 1, ?int $expiration = null)
    {
        return $this->increment($key, -$offset, $expiration);
    }
    public function setMultiple(array $values, ?int $expiration = null): bool
    {
        $ok = true;
        foreach ($values as $key => $value) {
            if (!$this->set($key, $value, $expiration)) {
                $ok = false;
            }
        }
        return $ok;
    }
    public function getMultiple(array $keys, $default = null): array
    {
        $res = [];
        foreach ($keys as $key) {
            $res[$key] = $this->get($key, $default);
        }
        return $res;
    }
    public function deleteMultiple(array $keys): bool
    {
        $ok = true;
        foreach ($keys as $key) {
            if (!$this->delete($key)) {
                $ok = false;
            }
        }
        return $ok;
    }
}

================
File: src/Components/Menu/Options/MenuOptions.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu\Options;
use InvalidArgumentException;
final class MenuOptions
{
    private array $defaults;
    private array $resolved;
    public function __construct(array $incoming, array $defaults)
    {
        $this->defaults = $defaults;
        $unknown = array_diff(array_keys($incoming), array_keys($defaults));
        if ($unknown) {
            throw new InvalidArgumentException(
                'گزینه(های) ناشناخته برای منو: ' . implode(', ', $unknown)
            );
        }
        $this->resolved = array_merge($defaults, $incoming);
    }
    public function get(string $key)
    {
        return $this->resolved[$key] ?? null;
    }
    public function toArray(): array
    {
        return $this->resolved;
    }
}

================
File: src/Components/Menu/Variants/DesktopMenu.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu\Variants;
use jamal13647850\wphelpers\Components\Menu\AbstractMenu;
final class DesktopMenu extends AbstractMenu
{
    protected static function defaultOptions(): array
    {
        return [
            'menu_id'        => 'primary-menu-desktop',
            'menu_class'     => 'flex items-center space-x-2 relative',
            'aria_label'     => 'ناوبری اصلی',
            'echo'           => false,
            'fallback_cb'    => false,
        ];
    }
    public function render(
        string $themeLocation,
        array $options = [],
        array $walkerOptions = []
    ): string {
        $opts = $this->makeOptions($options);
        $args = $opts->toArray();
        $args['theme_location'] = $themeLocation;
        $args['walker'] = $this->makeWalker('desktop', $walkerOptions);
        $args['items_wrap'] = sprintf(
            '<ul id="%%1$s" class="%%2$s" aria-label="%s">%%3$s</ul>',
            esc_attr__($opts->get('aria_label'), 'your-theme-textdomain')
        );
        return (string) wp_nav_menu($args);
    }
}

================
File: src/Components/Menu/Variants/DropdownMenu.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu\Variants;
use jamal13647850\wphelpers\Components\Menu\AbstractMenu;
final class DropdownMenu extends AbstractMenu
{
    protected static function defaultOptions(): array
    {
        return [
            'menu_id'     => 'dropdown-menu',
            'menu_class'  => 'flex list-none m-0 p-0',
            'aria_label'  => 'منوی کشویی',
            'items_wrap'  => '<ul id="%1$s" class="%2$s">%3$s</ul>',
            'echo'        => false,
            'fallback_cb' => false,
        ];
    }
    public function render(
        string $themeLocation,
        array $options = [],
        array $walkerOptions = []
    ): string {
        $opts = $this->makeOptions($options);
        $args = $opts->toArray();
        $args['theme_location'] = $themeLocation;
        $args['walker'] = $this->makeWalker('dropdown', $walkerOptions);
        return (string) wp_nav_menu($args);
    }
}

================
File: src/Components/Menu/Variants/OverlayMobileMenu.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu\Variants;
use jamal13647850\wphelpers\Components\Menu\AbstractMenu;
final class OverlayMobileMenu extends AbstractMenu
{
    protected static function defaultOptions(): array
    {
        return [
            'menu_id'              => 'overlay-mobile-menu',
            'menu_class'           => 'mobile-nav-menu space-y-2 p-6',
            'aria_label'           => 'منوی موبایل',
            'overlay_class'        => 'mobile-menu-overlay fixed inset-0 bg-card-background z-50 transform translate-x-full transition-transform duration-300 ease-in-out',
            'header_class'         => 'flex justify-between items-center p-6 border-b border-border',
            'close_button_class'   => 'text-foreground hover:text-primary transition-colors',
            'enable_accordion'     => true,
            'animation_duration'   => 300,
            'mobile_link_class'    => 'mobile-menu-link block py-3 px-5 text-foreground hover:text-primary transition-colors font-medium',
            'mobile_submenu_class' => 'mobile-submenu-link block py-2 px-8 text-text-muted hover:text-primary transition-colors',
            'echo'                 => false,
            'fallback_cb'          => false,
        ];
    }
    public function render(
        string $themeLocation,
        array $options = [],
        array $walkerOptions = []
    ): string {
        $opts = $this->makeOptions($options);
        $args = $opts->toArray();
        $args['theme_location'] = $themeLocation;
        $args['walker'] = $this->makeWalker('overlay-mobile', array_merge([
            'enable_accordion' => $opts->get('enable_accordion'),
            'animation_duration' => $opts->get('animation_duration'),
            'mobile_link_class' => $opts->get('mobile_link_class'),
            'mobile_submenu_class' => $opts->get('mobile_submenu_class'),
        ], $walkerOptions));
        $aria_label = esc_attr__($opts->get('aria_label'), 'wp-helpers');
        $overlay_class = $opts->get('overlay_class');
        $header_class = $opts->get('header_class');
        $close_button_class = $opts->get('close_button_class');
        $menu_html = wp_nav_menu(array_merge($args, [
            'items_wrap' => '<ul id="%1$s" class="%2$s" x-data="{ activeMenu: null }" aria-label="' . $aria_label . '">%3$s</ul>',
            'echo' => false
        ]));
        return sprintf(
            '<div class="%s" x-show="mobileMenuOpen" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="translate-x-full" x-transition:enter-end="translate-x-0" x-transition:leave="transition ease-in duration-300" x-transition:leave-start="translate-x-0" x-transition:leave-end="translate-x-full" @click.outside="mobileMenuOpen = false">
                <div class="%s">
                    <h2 class="text-xl font-bold text-foreground">منو</h2>
                    <button @click="mobileMenuOpen = false" class="%s" aria-label="بستن منو">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                %s
            </div>',
            $overlay_class,
            $header_class,
            $close_button_class,
            $menu_html
        );
    }
}

================
File: src/Components/Menu/Variants/SimpleMenu.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu\Variants;
use jamal13647850\wphelpers\Components\Menu\AbstractMenu;
final class SimpleMenu extends AbstractMenu
{
    protected static function defaultOptions(): array
    {
        return [
            'menu_id'     => 'top-menu',
            'menu_class'  => 'flex items-center space-x-1 sm:space-x-2 lg:space-x-4',
            'aria_label'  => 'ناوبری بالایی',
            'items_wrap'  => '<ul id="%1$s" class="%2$s" aria-label="%s">%3$s</ul>',
            'echo'        => false,
            'fallback_cb' => false,
        ];
    }
    public function render(
        string $themeLocation,
        array $options = [],
        array $walkerOptions = []
    ): string {
        $opts = $this->makeOptions($options);
        $args = $opts->toArray();
        $args['theme_location'] = $themeLocation;
        $args['walker'] = $this->makeWalker('simple', $walkerOptions);
        $args['items_wrap'] = sprintf(
            $opts->get('items_wrap'),
            esc_attr__($opts->get('aria_label'), 'your-theme-textdomain')
        );
        return (string) wp_nav_menu($args);
    }
}

================
File: src/Components/Menu/AbstractMenu.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu;
use jamal13647850\wphelpers\Components\Menu\Options\MenuOptions;
use jamal13647850\wphelpers\Navigation\AlpineNavWalker;
use jamal13647850\wphelpers\Assets\AssetManager;
abstract class AbstractMenu
{
    abstract public function render(
        string $themeLocation,
        array $options = [],
        array $walkerOptions = []
    ): string;
    abstract protected static function defaultOptions(): array;
    protected function makeOptions(array $incoming): MenuOptions
    {
        return new MenuOptions($incoming, static::defaultOptions());
    }
    protected function makeWalker(string $mode, array $walkerOptions = []): AlpineNavWalker
    {
        return new AlpineNavWalker($mode, $walkerOptions);
    }
    protected static function assets(): array
    {
        return [
            'styles'  => [],
            'scripts' => [],
        ];
    }
    protected function enqueueAssets(): void
    {
        foreach (static::assets()['styles'] as $style) {
            AssetManager::style(
                $style['handle'],
                $style['src'],
                $style['deps']  ?? [],
                $style['ver']   ?? null,
                $style['media'] ?? 'all'
            );
        }
        foreach (static::assets()['scripts'] as $script) {
            AssetManager::script(
                $script['handle'],
                $script['src'],
                $script['deps']   ?? [],
                $script['ver']    ?? null,
                $script['footer'] ?? true
            );
        }
    }
}

================
File: src/Components/Menu/MenuCacheManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu;
use jamal13647850\wphelpers\Cache\CacheManager;
if (!defined('ABSPATH')) {
    exit;
}
final class MenuCacheManager
{
    protected $driver;
    protected string $prefix = 'menu_cache_';
    protected bool $bypass  = false;
    protected int $ttl      = 604800;
    private static ?self $instance = null;
    private function __construct()
    {
        $this->bypass = (bool) apply_filters('menu_cache/bypass', !$this->isDebug());
        $this->prefix = (string) apply_filters('menu_cache/prefix', $this->prefix);
        $this->ttl    = (int) apply_filters('menu_cache/ttl', $this->ttl);
        if (!$this->bypass && function_exists('wp_cache_set') && $this->isRedisAvailable()) {
            $this->driver = new CacheManager('object', $this->prefix);
        } else {
            $this->driver = new CacheManager('transient', $this->prefix);
        }
    }
    private function isDebug(): bool
    {
        if (defined('CACHE_THEME') && CACHE_THEME) { return false; }
        if (defined('WP_DEBUG') && WP_DEBUG) { return true; }
        if (defined('WP_ENV') && WP_ENV === 'development') { return true; }
        return false;
    }
    public static function getInstance(): self
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    public function getMenu(string $key, string $themeLocation, array $options = [], array $walkerOptions = []): string
    {
        $cacheKey = $this->getCacheKey($key, $themeLocation);
        if (!$this->bypass) {
            $cached = $this->driver->get($cacheKey);
            if ($cached !== false && is_string($cached)) {
                return $cached;
            }
        }
        $html = MenuManager::render($key, $themeLocation, $options, $walkerOptions);
        if (!$this->bypass) {
            $this->driver->set($cacheKey, $html, $this->ttl);
        }
        return $html;
    }
    public function getCacheKey(string $key, string $themeLocation): string
    {
        return implode('_', [
            $this->prefix,
            $key,
            $themeLocation,
        ]);
    }
    public function purge(string $key, string $themeLocation): void
    {
        $this->driver->delete($this->getCacheKey($key, $themeLocation));
    }
    public function purgeAll(): void
    {
        $keys = ['desktop', 'mobile', 'dropdown', 'simple','multi-column-desktop', 'overlay-mobile'];
        $locations = array_keys(get_registered_nav_menus());
        foreach ($keys as $key) {
            foreach ($locations as $location) {
                $this->purge($key, $location);
            }
        }
    }
    private function isRedisAvailable(): bool
    {
        global $wp_object_cache;
        return is_object($wp_object_cache) && method_exists($wp_object_cache, 'redis');
    }
}

================
File: src/Components/Menu/MenuManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu;
use InvalidArgumentException;
final class MenuManager
{
    private static array $map = [];
    public static function register(string $key, string $class): void
    {
        if (!is_subclass_of($class, AbstractMenu::class)) {
            throw new InvalidArgumentException("{$class} باید از AbstractMenu ارث‌بری کند.");
        }
        self::$map[$key] = $class;
    }
    public static function make(string $key): AbstractMenu
    {
        if (!isset(self::$map[$key])) {
            throw new InvalidArgumentException("منو با کلید [{$key}] ثبت نشده است.");
        }
        $class = self::$map[$key];
        return new $class();
    }
    public static function render(
        string $key,
        string $themeLocation,
        array $options = [],
        array $walkerOptions = []
    ): string {
        do_action_ref_array('menu/before_render', [&$key, &$themeLocation, &$options, &$walkerOptions]);
        do_action_ref_array("menu/before_render_{$key}", [&$themeLocation, &$options, &$walkerOptions]);
        $html = self::make($key)->render($themeLocation, $options, $walkerOptions);
        $html = apply_filters('menu/render_output', $html, $key, $themeLocation, $options, $walkerOptions);
        $html = apply_filters("menu/render_output_{$key}", $html, $themeLocation, $options, $walkerOptions);
        do_action('menu/after_render', $key, $html, $themeLocation, $options, $walkerOptions);
        do_action("menu/after_render_{$key}", $html, $themeLocation, $options, $walkerOptions);
        return $html;
    }
}

================
File: src/Components/Slider/Options/SliderOptions.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Slider\Options;
use InvalidArgumentException;
final class SliderOptions
{
    private array $defaults;
    private array $resolved;
    public function __construct(array $incoming, array $defaults)
    {
        $this->defaults = $defaults;
        $unknown = array_diff(array_keys($incoming), array_keys($defaults));
        if ($unknown) {
            throw new InvalidArgumentException(
                'گزینه(های) ناشناخته برای اسلایدر: ' . implode(', ', $unknown)
            );
        }
        $this->resolved = array_merge($defaults, $incoming);
    }
    public function get(string $key)
    {
        return $this->resolved[$key] ?? null;
    }
    public function toArray(): array
    {
        return $this->resolved;
    }
}

================
File: src/Controllers/BlogCommentsController.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Controllers;
defined('ABSPATH') || exit();
class BlogCommentsController
{
    use CommentValidationTrait;
    private View $view;
    private string $comment_form;
    private int $post_id;
    private CaptchaManager $captcha_manager;
    public function __construct(View $view, string $comment_form, int $post_id, CaptchaManager $captcha_manager)
    {
        $this->view = $view;
        $this->comment_form = $comment_form;
        $this->post_id = $post_id;
        $this->captcha_manager = $captcha_manager;
        add_action('wp_ajax_submit_blog_comment', [$this, 'handle_submit_comment']);
        add_action('wp_ajax_nopriv_submit_blog_comment', [$this, 'handle_submit_comment']);
        add_action('wp_ajax_filter_comments', [$this, 'filterComments']);
        add_action('wp_ajax_nopriv_filter_comments', [$this, 'filterComments']);
    }
    public function prepareCommentsData()
    {
        $comments = get_comments([
            'post_id' => $this->post_id,
            'status' => 'approve',
            'type' => 'comment',
        ]);
        return $this->formatComments($comments);
    }
    private function formatComments($comments)
    {
        $formatted_comments = [];
        $all_comments = [];
        foreach ($comments as $comment) {
            $all_comments[$comment->comment_ID] = [
                'data' => $this->formatSingleComment($comment),
                'replies' => [],
                'parent' => $comment->comment_parent,
            ];
        }
        foreach ($all_comments as $id => $comment) {
            if ($comment['parent'] == 0) {
                $formatted_comments[] = $this->buildCommentTree($id, $all_comments);
            }
        }
        return $formatted_comments;
    }
    private function buildCommentTree($comment_id, &$all_comments)
    {
        $comment = $all_comments[$comment_id];
        $comment_data = $comment['data'];
        foreach ($all_comments as $id => $potential_reply) {
            if ($potential_reply['parent'] == $comment_id) {
                $comment_data['replies'][] = $this->buildCommentTree($id, $all_comments);
            }
        }
        return $comment_data;
    }
    private function formatSingleComment($comment)
    {
        return [
            'id' => $comment->comment_ID,
            'author' => $comment->comment_author,
            'content' => $comment->comment_content,
            'date' => $this->getTimeAgo(strtotime($comment->comment_date)),
            'is_admin_reply' => $this->isAdminReply($comment),
            'parent_id' => $comment->comment_parent,
        ];
    }
    private function isAdminReply($comment)
    {
        $user = get_user_by('id', $comment->user_id);
        return $user && in_array('administrator', $user->roles);
    }
    private function getTimeAgo($time)
    {
        $diff = time() - $time;
        if ($diff < 60) return 'لحظاتی پیش';
        elseif ($diff < 3600) return floor($diff / 60) . ' دقیقه پیش';
        elseif ($diff < 86400) return floor($diff / 3600) . ' ساعت پیش';
        else return floor($diff / 86400) . ' روز پیش';
    }
    public function getCommentForm()
    {
        $is_logged_in = is_user_logged_in();
        $post = get_post($this->post_id);
        $captcha_field = $this->captcha_manager->render_captcha();
        return [
            'post' => $post,
            'is_logged_in' => $is_logged_in,
            'submit_comment_nonce' => wp_create_nonce('submit_blog_comment_nonce'),
            'ajax_url' => admin_url('admin-ajax.php'),
            'captcha_field' => $captcha_field,
            'csrf_token' => wp_create_nonce('csrf_token')
        ];
    }
    public function submitComment()
    {
        $this->verifyNonce($_POST['nonce'], 'submit_blog_comment_nonce');
        $this->verifyHoneypot($_POST);
        $this->applyRateLimiting('comment');
        $fields = [
            'comment_text' => [
                'value' => $_POST['comment_text'] ?? '',
                'rules' => ['required' => true]
            ]
        ];
        $this->validateFields($fields, is_user_logged_in());
        $comment_text = sanitize_textarea_field($_POST['comment_text']);
        $this->validateTextLength($comment_text);
        $this->verifyCaptcha($this->captcha_manager, $_POST);
        $comment_data = [
            'comment_post_ID' => $_POST['post_id'],
            'comment_content' => $comment_text,
            'comment_type' => 'comment',
            'comment_parent' => 0,
            'user_id' => get_current_user_id(),
        ];
        if (!is_user_logged_in()) {
            $comment_data['comment_author'] = sanitize_text_field($_POST['author_name']);
            $comment_data['comment_author_email'] = sanitize_email($_POST['author_email']);
            if (get_option('require_name_email') && (!$comment_data['comment_author'] || !$comment_data['comment_author_email'])) {
                $this->view->render_with_exit('@views/components/blog/responses/missing-author-info.twig', [], 400);
            }
        }
        $require_moderation = get_option('comment_moderation') === '1';
        if ($require_moderation) {
            $comment_data['comment_approved'] = '0';
        } else {
            $approved_comment = get_comments([
                'author_email' => $comment_data['comment_author_email'],
                'status' => 'approve',
                'count' => true
            ]);
            if (get_option('comment_previously_approved') === '1' && empty($approved_comment)) {
                $comment_data['comment_approved'] = '0';
            } else {
                $comment_data['comment_approved'] = '1';
            }
        }
        $comment_id = wp_insert_comment($comment_data);
        if ($comment_id) {
            $this->view->render_with_exit(
                $comment_data['comment_approved'] === '0'
                    ? '@views/components/blog/responses/success-pending.twig'
                    : '@views/components/blog/responses/success.twig',
                [],
                200
            );
        } else {
            $this->view->render_with_exit('@views/components/blog/responses/error.twig', [], 500);
        }
    }
    public function handle_submit_comment()
    {
        $this->submitComment();
    }
    protected function getResponseTemplate(string $responseType): string
    {
        return "@views/components/blog/responses/{$responseType}.twig";
    }
    public function render_comment_form()
    {
        $template_data = $this->getCommentForm();
        return $this->view->render($this->comment_form, $template_data);
    }
    public function filterComments() {
        $post_id = intval($_GET['post_id']);
        $filter = sanitize_text_field($_GET['filter'] ?? 'latest');
        $args = [
            'post_id' => $post_id,
            'status' => 'approve',
            'type' => 'comment',
        ];
        switch ($filter) {
            case 'oldest':
                $args['orderby'] = 'comment_date';
                $args['order'] = 'ASC';
                break;
            case 'latest':
            default:
                $args['orderby'] = 'comment_date';
                $args['order'] = 'DESC';
                break;
        }
        $comments = get_comments($args);
        $formatted_comments = $this->formatComments($comments);
        $this->view->render_with_exit('@views/components/blog/comments-list.twig', ['comments' => $formatted_comments], 200);
    }
}

================
File: src/Controllers/BlogRatingController.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Controllers;
defined('ABSPATH') || exit();
class BlogRatingController
{
    public function __construct()
    {
        add_action('wp_ajax_submit_blog_rating', [$this, 'handle_submit_rating']);
        add_action('wp_ajax_nopriv_submit_blog_rating', [$this, 'handle_submit_rating']);
    }
    public function handle_submit_rating()
    {
        check_ajax_referer('blog_rating_nonce', 'nonce');
        $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
        $rating = isset($_POST['rating']) ? intval($_POST['rating']) : 0;
        if (!$post_id || $rating < 1 || $rating > 5) {
            wp_send_json_error(['message' => ' امتیاز نامعتبر است.']);
            wp_die();
        }
        $user_id = get_current_user_id();
        $meta_key = 'blog_user_rating_' . $post_id;
        if ($user_id > 0) {
            $user_rating = get_user_meta($user_id, $meta_key, true);
            if ($user_rating) {
                wp_send_json_error(['message' => 'شما قبلاً برای این پست امتیاز ثبت کرده‌اید.']);
                wp_die();
            }
            update_user_meta($user_id, $meta_key, '1');
        } else {
            $cookie_name = 'blog_rating_' . $post_id;
            if (isset($_COOKIE[$cookie_name])) {
                wp_send_json_error(['message' => 'شما قبلاً برای این پست امتیاز ثبت کرده‌اید.']);
                wp_die();
            }
            setcookie($cookie_name, '1', time() + (86400 * 30), '/');
        }
        $total_ratings_key = 'blog_rating_total';
        $count_ratings_key = 'blog_rating_count';
        $current_total = (int) get_post_meta($post_id, $total_ratings_key, true);
        $current_count = (int) get_post_meta($post_id, $count_ratings_key, true);
        $new_total = $current_total + $rating;
        $new_count = $current_count + 1;
        update_post_meta($post_id, $total_ratings_key, $new_total);
        update_post_meta($post_id, $count_ratings_key, $new_count);
        $average_rating = $this->calculateRating($post_id);
        wp_send_json_success([
            'message' => ' امتیاز شما با موفقیت ثبت شد!',
            'average_rating' => round($average_rating, 1)
        ]);
        wp_die();
    }
    public function calculateRating($post_id)
    {
        $total_ratings_key = 'blog_rating_total';
        $count_ratings_key = 'blog_rating_count';
        $current_total = (int) get_post_meta($post_id, $total_ratings_key, true);
        $current_count = (int) get_post_meta($post_id, $count_ratings_key, true);
        return $current_count > 0 ? $current_total / $current_count : 0;
    }
    public function hasUserRated($post_id)
    {
        $user_id = get_current_user_id();
        $has_user_rated = false;
        $meta_key = 'blog_user_rating_' . $post_id;
        if ($user_id > 0) {
            $user_rating = get_user_meta($user_id, $meta_key, true);
            $has_user_rated = !empty($user_rating);
        } else {
            $cookie_name = 'blog_rating_' . $post_id;
            $has_user_rated = isset($_COOKIE[$cookie_name]);
        }
        return $has_user_rated;
    }
}

================
File: src/Controllers/HTMX_Controller.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Controllers;
defined('ABSPATH') || exit();
abstract class HTMX_Controller
{
    protected View $view;
    protected HTMX_Validator $validator;
    protected TransientCache $cache;
    protected array $routes = [];
    protected string $namespace;
    public function __construct(?View $view = null, ?HTMX_Validator $validator = null, ?TransientCache $cache = null)
    {
        $this->view = $view ?? new View();
        $this->validator = $validator ?? new HTMX_Validator($this->view);
        $this->cache = $cache ?? new TransientCache();
        $this->namespace = $this->getNamespace();
        $this->registerRoutes();
        add_action('init', [$this, 'registerAjaxHandlers']);
    }
    abstract protected function getNamespace(): string;
    abstract protected function registerRoutes(): void;
    public function registerAjaxHandlers(): void
    {
        foreach ($this->routes as $action => $config) {
            $handler = $config['handler'] ?? $action;
            $capability = $config['capability'] ?? null;
            $nonce_action = $config['nonce_action'] ?? $this->namespace . '_' . $action;
            $cache_enabled = $config['cache'] ?? Config::get('htmx.cache_enabled', false);
            $cache_time = $config['cache_time'] ?? Config::get('htmx.cache_time', 3600);
            add_action('wp_ajax_' . $this->namespace . '_' . $action, function() use ($handler, $capability, $nonce_action, $cache_enabled, $cache_time) {
                $this->handleRequest($handler, $capability, $nonce_action, $cache_enabled, $cache_time);
            });
            if (isset($config['public']) && $config['public']) {
                add_action('wp_ajax_nopriv_' . $this->namespace . '_' . $action, function() use ($handler, $capability, $nonce_action, $cache_enabled, $cache_time) {
                    $this->handleRequest($handler, $capability, $nonce_action, $cache_enabled, $cache_time);
                });
            }
        }
    }
    protected function handleRequest(string $handler, ?string $capability, string $nonce_action, bool $cache_enabled, int $cache_time): void
    {
        try {
            if ($capability !== null && !current_user_can($capability)) {
                wp_send_json_error(['message' => __('شما مجوز لازم برای انجام این عملیات را ندارید.', 'wphelpers')], 403);
                return;
            }
            if (Config::get('htmx.verify_nonce', true)) {
                $nonce = isset($_REQUEST['_wpnonce']) ? $_REQUEST['_wpnonce'] : '';
                if (!wp_verify_nonce($nonce, $nonce_action)) {
                    wp_send_json_error(['message' => __('خطای امنیتی: نانس نامعتبر است.', 'wphelpers')], 403);
                    return;
                }
            }
            $is_htmx = isset($_SERVER['HTTP_HX_REQUEST']) && $_SERVER['HTTP_HX_REQUEST'] === 'true';
            if (!$is_htmx && Config::get('htmx.require_htmx_header', true)) {
                wp_send_json_error(['message' => __('این درخواست باید از طریق HTMX ارسال شود.', 'wphelpers')], 400);
                return;
            }
            $cache_key = null;
            if ($cache_enabled && isset($_SERVER['REQUEST_URI'])) {
                $cache_key = 'htmx_' . md5($_SERVER['REQUEST_URI'] . serialize($_REQUEST));
                $cached_response = $this->cache->get($cache_key);
                if ($cached_response !== null) {
                    echo $cached_response;
                    exit;
                }
            }
            ob_start();
            if (method_exists($this, $handler)) {
                $this->$handler();
            } else {
                wp_send_json_error(['message' => __('متد مشخص شده یافت نشد.', 'wphelpers')], 404);
                return;
            }
            $response = ob_get_clean();
            if ($cache_enabled && $cache_key !== null) {
                $this->cache->set($cache_key, $response, $cache_time);
            }
            echo $response;
            exit;
        } catch (\Exception $e) {
            if (Config::get('htmx.debug', WP_DEBUG)) {
                wp_send_json_error([
                    'message' => $e->getMessage(),
                    'file' => $e->getFile(),
                    'line' => $e->getLine(),
                    'trace' => $e->getTraceAsString(),
                ], 500);
            } else {
                wp_send_json_error(['message' => __('خطایی در پردازش درخواست رخ داد.', 'wphelpers')], 500);
            }
        }
    }
    protected function addRoute(string $action, array $config = []): self
    {
        $this->routes[$action] = $config;
        return $this;
    }
    public function getRouteUrl(string $action, array $args = [], bool $with_nonce = true): string
    {
        $url_args = array_merge([
            'action' => $this->namespace . '_' . $action,
        ], $args);
        $url = admin_url('admin-ajax.php');
        $url = add_query_arg($url_args, $url);
        if ($with_nonce && isset($this->routes[$action])) {
            $nonce_action = $this->routes[$action]['nonce_action'] ?? $this->namespace . '_' . $action;
            $url = wp_nonce_url($url, $nonce_action);
        }
        return $url;
    }
    protected function render(string $template, array $data = []): void
    {
        echo $this->view->render($template, $data);
    }
    protected function json($data, bool $success = true, int $status = 200): void
    {
        if ($success) {
            wp_send_json_success($data, $status);
        } else {
            wp_send_json_error($data, $status);
        }
    }
    protected function setHtmxHeader(string $name, string $value): void
    {
        header('HX-' . $name . ': ' . $value);
    }
    protected function triggerEvent(string $event, array $detail = []): void
    {
        $this->setHtmxHeader('Trigger', $event);
        if (!empty($detail)) {
            $this->setHtmxHeader('Trigger-Data', json_encode($detail));
        }
    }
    protected function redirect(string $url): void
    {
        $this->setHtmxHeader('Redirect', $url);
        exit;
    }
    protected function refresh(): void
    {
        $this->setHtmxHeader('Refresh', 'true');
        exit;
    }
    protected function reswap(string $method): void
    {
        $this->setHtmxHeader('Reswap', $method);
    }
    protected function retarget(string $selector): void
    {
        $this->setHtmxHeader('Retarget', $selector);
    }
    protected function getParam(string $key, $default = null)
    {
        $value = $_REQUEST[$key] ?? $default;
        return $value;
    }
    protected function getAllParams(): array
    {
        return $_REQUEST;
    }
    protected function getSanitizedParam(string $key, $default = null, string $filter = 'text')
    {
        $value = $this->getParam($key, $default);
        if ($value === null) {
            return $default;
        }
        switch ($filter) {
            case 'email':
                return sanitize_email($value);
            case 'url':
                return sanitize_url($value);
            case 'int':
                return intval($value);
            case 'float':
                return floatval($value);
            case 'text':
            default:
                return sanitize_text_field($value);
        }
    }
    protected function isHtmxRequest(): bool
    {
        return isset($_SERVER['HTTP_HX_REQUEST']) && $_SERVER['HTTP_HX_REQUEST'] === 'true';
    }
    protected function isBoosted(): bool
    {
        return isset($_SERVER['HTTP_HX_BOOSTED']) && $_SERVER['HTTP_HX_BOOSTED'] === 'true';
    }
    protected function getTarget(): ?string
    {
        return $_SERVER['HTTP_HX_TARGET'] ?? null;
    }
    protected function getTrigger(): ?string
    {
        return $_SERVER['HTTP_HX_TRIGGER'] ?? null;
    }
    protected function getTriggerName(): ?string
    {
        return $_SERVER['HTTP_HX_TRIGGER_NAME'] ?? null;
    }
    protected function getCurrentUrl(): ?string
    {
        return $_SERVER['HTTP_HX_CURRENT_URL'] ?? null;
    }
}

================
File: src/Controllers/ProductReviewsController.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Controllers;
defined('ABSPATH') || exit();
class ProductReviewsController
{
    use CommentValidationTrait;
    private CaptchaManager $captcha_manager;
    public function __construct(private View $view, private string $reviewform, private int $product_id, CaptchaManager $captcha_manager)
    {
        $this->view = $view;
        $this->reviewform = $reviewform;
        $this->product_id = $product_id;
        $this->captcha_manager = $captcha_manager;
        add_action('wp_ajax_submit_review', [$this, 'handle_ajax_submit']);
        add_action('wp_ajax_nopriv_submit_review', [$this, 'handle_ajax_submit']);
        add_action('wp_ajax_filter_reviews', [$this, 'filterReviews']);
        add_action('wp_ajax_nopriv_filter_reviews', [$this, 'filterReviews']);
    }
    public function prepareReviewsData()
    {
        $reviews = get_comments([
            'post_id' => $this->product_id,
            'status' => 'approve',
            'hierarchical' => true,
        ]);
        return $this->formatReviews($reviews);
    }
    private function formatReviews($reviews)
    {
        $formatted_reviews = [];
        $all_reviews = [];
        foreach ($reviews as $review) {
            $all_reviews[$review->comment_ID] = [
                'data' => $this->formatSingleReview($review),
                'replies' => [],
                'parent' => $review->comment_parent
            ];
        }
        foreach ($all_reviews as $id => $review) {
            if ($review['parent'] == 0) {
                $formatted_reviews[] = $this->buildReviewTree($id, $all_reviews);
            }
        }
        return $formatted_reviews;
    }
    private function buildReviewTree($review_id, &$all_reviews)
    {
        $review = $all_reviews[$review_id];
        $review_data = $review['data'];
        foreach ($all_reviews as $id => $potential_reply) {
            if ($potential_reply['parent'] == $review_id) {
                $review_data['replies'][] = $this->buildReviewTree($id, $all_reviews);
            }
        }
        return $review_data;
    }
    private function formatSingleReview($review)
    {
        return [
            'id' => $review->comment_ID,
            'author' => $review->comment_author,
            'content' => $review->comment_content,
            'date' => $this->getTimeAgo(strtotime($review->comment_date)),
            'rating' => get_comment_meta($review->comment_ID, 'rating', true),
            'is_admin_reply' => $this->isAdminReply($review),
            'parent_id' => $review->comment_parent,
            'replies' => []
        ];
    }
    private function isAdminReply($review)
    {
        $user = get_user_by('id', $review->user_id);
        return $user && in_array('administrator', $user->roles);
    }
    private function getTimeAgo($time)
    {
        $diff = time() - $time;
        if ($diff < 60) {
            return 'لحظاتی پیش';
        } elseif ($diff < 3600) {
            return floor($diff / 60) . ' دقیقه پیش';
        } elseif ($diff < 86400) {
            return floor($diff / 3600) . ' ساعت پیش';
        } else {
            return floor($diff / 86400) . ' روز پیش';
        }
    }
    public function loadReplies()
    {
        $comment_id = intval($_GET['comment_id']);
        $replies = $this->getReplies($comment_id);
        $this->view->render_with_exit('@views/components/single-product/replies.twig', ['replies' => $replies], 200);
    }
    private function getReplies($parent_id)
    {
        $replies = get_comments([
            'parent' => $parent_id,
            'status' => 'approve'
        ]);
        $formatted_replies = [];
        foreach ($replies as $reply) {
            $formatted_replies[] = $this->formatSingleReview($reply);
        }
        return $formatted_replies;
    }
    public function getReviewForm()
    {
        $product = wc_get_product($this->product_id);
        $is_logged_in = is_user_logged_in();
        $captcha_field = $this->captcha_manager->render_captcha();
        $honeypot_field = '<input type="text" name="hp_field" value="" style="display:none;">';
        return [
            'product' => $product,
            'is_logged_in' => $is_logged_in,
            'captcha_field' => $captcha_field,
            'honeypot_field' => $honeypot_field,
            'submit_review_nonce' => wp_create_nonce('submit_review_nonce'),
            'ajax_url' => admin_url('admin-ajax.php'),
            'csrf_token' => wp_create_nonce('csrf_token')
        ];
    }
    public function submitReview()
    {
        $this->verifyNonce($_POST['nonce'], 'submit_review_nonce');
        $this->verifyCaptcha($this->captcha_manager, $_POST);
        $this->verifyHoneypot($_POST);
        $this->applyRateLimiting('review');
        $fields = [
            'review_text' => [
                'value' => $_POST['review_text'] ?? '',
                'rules' => ['required' => true]
            ],
            'rating' => [
                'value' => $_POST['rating'] ?? '',
                'rules' => ['required' => true, 'type' => 'integer', 'min' => 1, 'max' => 5]
            ]
        ];
        $this->validateFields($fields, is_user_logged_in());
        $review_text = sanitize_textarea_field($_POST['review_text']);
        $this->validateTextLength($review_text);
        $review_data = [
            'comment_post_ID' => $_POST['product_id'],
            'comment_content' => $review_text,
            'comment_type' => 'review',
            'comment_parent' => 0,
            'user_id' => get_current_user_id(),
            'comment_meta' => [
                'rating' => intval($_POST['rating'])
            ]
        ];
        if (!is_user_logged_in()) {
            $review_data['comment_author'] = sanitize_text_field($_POST['author_name']);
            $review_data['comment_author_email'] = sanitize_email($_POST['author_email']);
            if (get_option('require_name_email') && (!$review_data['comment_author'] || !$review_data['comment_author_email'])) {
                $this->view->render_with_exit('@views/components/single-product/review-responses/missing-author-info.twig', [], 400);
            }
        }
        $require_moderation = get_option('comment_moderation') === '1';
        if ($require_moderation) {
            $review_data['comment_approved'] = '0';
        } else {
            $approved_comment = get_comments([
                'author_email' => $review_data['comment_author_email'],
                'status' => 'approve',
                'count' => true
            ]);
            if (get_option('comment_previously_approved') === '1' && empty($approved_comment)) {
                $review_data['comment_approved'] = '0';
            } else {
                $review_data['comment_approved'] = '1';
            }
        }
        $comment_id = wp_insert_comment($review_data);
        if ($comment_id) {
            $this->view->render_with_exit(
                $review_data['comment_approved'] === '0'
                    ? '@views/components/single-product/review-responses/success-pending.twig'
                    : '@views/components/single-product/review-responses/success.twig',
                [],
                200
            );
        } else {
            $this->view->render_with_exit('@views/components/single-product/review-responses/error.twig', [], 500);
        }
    }
    public function handle_ajax_submit()
    {
        $this->submitReview();
    }
    protected function getResponseTemplate(string $responseType): string
    {
        return "@views/components/single-product/review-responses/{$responseType}.twig";
    }
    public function render_review_form()
    {
        $template_data = $this->getReviewForm($this->product_id);
        return $this->view->render($this->reviewform, $template_data);
    }
    public function submitReply()
    {
        $this->verifyNonce($_POST['nonce'], 'submit_review_nonce');
        $reply_text = sanitize_textarea_field($_POST['reply_text']);
        $parent_id = intval($_POST['parent_id']);
        $reply_data = [
            'comment_post_ID' => $this->product_id,
            'comment_content' => $reply_text,
            'comment_type' => 'review',
            'comment_parent' => $parent_id,
            'user_id' => get_current_user_id(),
        ];
        $comment_id = wp_insert_comment($reply_data);
        if ($comment_id) {
            $this->view->render_with_exit('@views/components/single-product/review-responses/success.twig', [], 200);
        } else {
            $this->view->render_with_exit('@views/components/single-product/review-responses/error.twig', [], 500);
        }
    }
    public function filterReviews() {
        $product_id = intval($_GET['product_id']);
        $filter = sanitize_text_field($_GET['filter'] ?? 'latest');
        $args = [
            'post_id' => $product_id,
            'status' => 'approve',
            'type' => 'review',
        ];
        switch ($filter) {
            case 'oldest':
                $args['orderby'] = 'comment_date';
                $args['order'] = 'ASC';
                break;
            case 'highest_rating':
                $args['meta_key'] = 'rating';
                $args['orderby'] = 'meta_value_num';
                $args['order'] = 'DESC';
                break;
            case 'lowest_rating':
                $args['meta_key'] = 'rating';
                $args['orderby'] = 'meta_value_num';
                $args['order'] = 'ASC';
                break;
            case 'latest':
            default:
                $args['orderby'] = 'comment_date';
                $args['order'] = 'DESC';
                break;
        }
        $reviews = get_comments($args);
        $formatted_reviews = $this->formatReviews($reviews);
        $this->view->render_with_exit('@views/components/single-product/reviews-list.twig', ['product' => ['reviews' => $formatted_reviews]], 200);
    }
}

================
File: src/Controllers/SMSForgotPasswordController.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Controllers;
defined('ABSPATH') || exit();
class SMSForgotPasswordController {
    public function __construct() {
        $this->init();
    }
    public function init() {
        add_action('wp_ajax_lost_password', array($this, 'lost_password_callback'));
        add_action('wp_ajax_nopriv_lost_password', array($this, 'lost_password_callback'));
    }
    public function lost_password_callback() {
        global $wpdb;
        check_ajax_referer('sms_login_nonce', 'nonce');
        $user_login = sanitize_text_field($_POST['user_login']);
        if (empty($user_login)) {
            echo '<p class="text-red-500 text-center">شماره موبایل یا ایمیل اجباری است.</p>';
            wp_die();
        }
        if (!preg_match('/^[0-9a-zA-Z@.+-]+$/', $user_login)) {
            echo '<p class="text-red-500 text-center">فرمت شماره موبایل یا ایمیل نامعتبر است.</p>';
            wp_die();
        }
        $user = get_user_by('login', $user_login);
        if (!$user) {
            $user = get_user_by('email', $user_login);
        }
        if (!$user) {
            $mobile_row = $wpdb->get_row(
                $wpdb->prepare(
                    "SELECT user_id FROM {$wpdb->prefix}cafedentist_user_info WHERE mobile_number = %s LIMIT 1",
                    $user_login
                )
            );
            if ($mobile_row) {
                $user = get_user_by('ID', $mobile_row->user_id);
            }
        }
        if (!$user) {
            echo '<p class="text-red-500 text-center">هیچ کاربری با این شماره موبایل یا ایمیل یافت نشد.</p>';
            wp_die();
        }
        $success = $this->reset_password($user->ID);
        if ($success) {
            echo '<p class="text-green-500 text-center">ایمیل بازیابی رمز عبور با موفقیت ارسال شد. لطفاً ایمیل خود را چک کنید.</p>';
        } else {
            echo '<p class="text-red-500 text-center">خطایی در ارسال ایمیل بازیابی رخ داد. لطفاً دوباره تلاش کنید.</p>';
        }
        wp_die();
    }
    private function reset_password($user_id) {
        global $wp_hasher;
        if (empty($wp_hasher)) {
            require_once ABSPATH . 'wp-includes/class-phpass.php';
            $wp_hasher = new \PasswordHash(8, true);
        }
        $key = wp_generate_password(20, false);
        $hashed_key = $wp_hasher->HashPassword($key);
        update_user_meta($user_id, 'reset_key', $key);
        update_user_meta($user_id, 'reset_key_expiry', time() + DAY_IN_SECONDS);
        $result = retrieve_password($key, $user_id);
        return $result;
    }
}
if (!isset($sms_forgot_password_controller)) {
    $sms_forgot_password_controller = new SMSForgotPasswordController();
}

================
File: src/Controllers/SMSLoginController.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Controllers;
defined('ABSPATH') || exit();
class SMSLoginController
{
    private $wpdb;
    private string $table_name;
    private View $view;
    private const OTP_EXPIRY = 180;
    public function __construct(View $view)
    {
        global $wpdb;
        $this->wpdb = $wpdb;
        $this->table_name = $wpdb->prefix . 'cafedentist_user_info';
        $this->view = $view;
        add_action('wp_ajax_sms_login', [$this, 'handle_sms_login']);
        add_action('wp_ajax_nopriv_sms_login', [$this, 'handle_sms_login']);
        add_action('wp_ajax_resend_login_otp', [$this, 'handle_resend_login_otp']);
        add_action('wp_ajax_nopriv_resend_login_otp', [$this, 'handle_resend_login_otp']);
    }
    public function handle_sms_login()
    {
        check_ajax_referer('sms_login_nonce', 'nonce');
        $login_identifier = sanitize_text_field($_POST['login_identifier'] ?? '');
        $password = $_POST['password'] ?? '';
        $otp = $_POST['otp'] ?? '';
        $otp_login = isset($_POST['otp_login']) && $_POST['otp_login'] === '1';
        error_log("Login attempt - Identifier: $login_identifier, OTP Login: $otp_login, OTP: $otp");
        if ($otp_login) {
            error_log("Entering OTP login logic");
            if (empty($login_identifier)) {
                $validator = new HTMX_Validator('html');
                $validator->add_error('شماره موبایل اجباری است.');
                $validator->get_validation_response('html');
                wp_die();
            }
            $record = $this->wpdb->get_row($this->wpdb->prepare(
                "SELECT user_id, mobile_number, verification_code, status, updated_at FROM {$this->table_name} WHERE mobile_number = %s",
                $login_identifier
            ));
            error_log("Record found: " . print_r($record, true));
            if (!$record) {
                $validator = new HTMX_Validator('html');
                $validator->add_error('شماره شما ثبت‌نام نشده است. لطفاً ابتدا <a href="/register/">ثبت‌نام</a> کنید.');
                $validator->get_validation_response('html');
                wp_die();
            }
            if (empty($otp)) {
                error_log("No OTP provided, sending new code");
                $new_otp = sprintf("%06d", rand(0, 999999));
                $this->wpdb->update(
                    $this->table_name,
                    ['verification_code' => $new_otp, 'updated_at' => current_time('mysql')],
                    ['mobile_number' => $login_identifier],
                    ['%s'],
                    ['%s']
                );
                $this->send_verification_sms($login_identifier, $new_otp);
                echo '<p class="text-blue-600 text-center">کد تأیید به شماره شما ارسال شد. لطفاً کد را وارد کنید.</p>';
                wp_die();
            }
            if ($record->status !== 'verified' || $record->verification_code !== $otp || (time() - strtotime($record->updated_at)) > self::OTP_EXPIRY) {
                $validator = new HTMX_Validator('html');
                $validator->add_error('کد تأیید نامعتبر یا منقضی شده است.');
                $validator->get_validation_response('html');
                wp_die();
            }
            error_log("OTP validated, logging in user: " . $record->user_id);
            wp_set_current_user($record->user_id);
            wp_set_auth_cookie($record->user_id);
            echo '<p class="text-green-600">ورود با موفقیت انجام شد. در حال انتقال...</p><script>setTimeout(() => window.location.href = "/", 1000);</script>';
        } else {
            $is_email = filter_var($login_identifier, FILTER_VALIDATE_EMAIL);
            $user = null;
            if ($is_email) {
                $user = get_user_by('email', $login_identifier);
            } else {
                $user_id = $this->wpdb->get_var($this->wpdb->prepare(
                    "SELECT user_id FROM {$this->table_name} WHERE mobile_number = %s",
                    $login_identifier
                ));
                if ($user_id) {
                    $user = get_user_by('ID', $user_id);
                } else {
                    $user = get_user_by('login', $login_identifier);
                }
            }
            if ($user && wp_check_password($password, $user->user_pass, $user->ID)) {
                wp_set_current_user($user->ID);
                wp_set_auth_cookie($user->ID);
                echo '<p class="text-green-600">ورود با موفقیت انجام شد. در حال انتقال...</p><script>setTimeout(() => window.location.href = "/", 1000);</script>';
            } else {
                $validator = new HTMX_Validator('html');
                $validator->add_error('ایمیل/موبایل یا رمز عبور اشتباه است.');
                $validator->get_validation_response('html');
                wp_die();
            }
        }
        wp_die();
    }
    public function handle_resend_login_otp()
    {
        check_ajax_referer('sms_login_nonce', 'nonce');
        $login_identifier = sanitize_text_field($_POST['login_identifier'] ?? '');
        $validator = new HTMX_Validator('html');
        if (empty($login_identifier)) {
            $validator->add_error('شماره موبایل اجباری است.');
        } else {
            $validator->validate_mobile($login_identifier);
        }
        if (!empty($validator->get_errors())) {
            $validator->get_validation_response('html');
            wp_die();
        }
        $record = $this->wpdb->get_row($this->wpdb->prepare(
            "SELECT * FROM {$this->table_name} WHERE mobile_number = %s",
            $login_identifier
        ));
        if (!$record || $record->status !== 'verified') {
            $validator->add_error('شماره شما ثبت‌نام نشده است. لطفاً ابتدا <a href="/register/">ثبت‌نام</a> کنید.');
            $validator->get_validation_response('html');
            wp_die();
        }
        $otp = sprintf("%06d", rand(0, 999999));
        $this->wpdb->update(
            $this->table_name,
            ['verification_code' => $otp, 'updated_at' => current_time('mysql')],
            ['mobile_number' => $login_identifier],
            ['%s'],
            ['%s']
        );
        error_log("Sending SMS to $login_identifier with OTP: $otp");
        $this->send_verification_sms($login_identifier, $otp);
        echo '<p class="text-green-600">کد تأیید جدید ارسال شد.</p>';
        wp_die();
    }
    private function send_verification_sms(string $mobile, string $code): void
    {
        error_log("Attempting to send SMS to $mobile with code $code");
        $sms = new \jamal13647850\smsapi\SMS(new \jamal13647850\smsapi\FarazSMS(
            FARAZSMS_USERNAME,
            FARAZSMS_PASSWORD,
            FARAZSMS_FROM_NUMBER,
            FARAZSMS_URL
        ));
        try {
            $sms->sendSMSByPattern($mobile, '', FARAZSMS_PATTERN, ['code' => $code]);
            error_log("SMS sent successfully to $mobile");
        } catch (Exception $e) {
            error_log("SMS sending failed: " . $e->getMessage());
            throw $e;
        }
    }
}

================
File: src/Controllers/SMSRegisterController.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Controllers;
defined('ABSPATH') || exit();
class SMSRegisterController
{
    private const OTP_EXPIRY = 180;
    private HTMX_Validator $validator;
    private \wpdb $wpdb;
    private string $table_name;
    private View $view;
    public function __construct(View $view)
    {
        global $wpdb;
        $this->wpdb = $wpdb;
        $this->table_name = $wpdb->prefix . 'cafedentist_user_info';
        $this->validator = new HTMX_Validator('html');
        $this->view     = $view;
        add_action('wp_ajax_nopriv_sms_register_request', [$this, 'handle_sms_register_request']);
        add_action('wp_ajax_nopriv_sms_register_verify',  [$this, 'handle_sms_register_verify']);
        add_action('wp_ajax_htmx_validate_email',  [$this, 'htmx_validate_email']);
        add_action('wp_ajax_nopriv_htmx_validate_email',  [$this, 'htmx_validate_email']);
        add_action('wp_ajax_htmx_validate_mobile', [$this, 'htmx_validate_mobile']);
        add_action('wp_ajax_nopriv_htmx_validate_mobile', [$this, 'htmx_validate_mobile']);
        add_action('wp_ajax_htmx_validate_password', [$this, 'htmx_validate_password']);
        add_action('wp_ajax_nopriv_htmx_validate_password', [$this, 'htmx_validate_password']);
    }
    public function handle_sms_register_request(): void
    {
        check_ajax_referer('sms_register_nonce', 'nonce');
        $email    = sanitize_email($_POST['email'] ?? '');
        $mobile   = sanitize_text_field($_POST['mobile'] ?? '');
        $password = $_POST['password'] ?? '';
        // Validate fields
        $fields = [
            'ایمیل'       => ['value' => $email,    'rules' => ['required' => true, 'type' => 'email']],
            'شماره موبایل' => ['value' => $mobile,   'rules' => ['required' => true, 'type' => 'mobile']],
            'رمز عبور'     => ['value' => $password, 'rules' => ['required' => true]],
        ];
        $this->validator->validate_all_fields($fields);
        if (!empty($this->validator->get_errors())) {
            $this->validator->get_validation_response('html');
            wp_die();
        }
        $otp_mobile = $this->generate_otp();
$this->wpdb->replace(
    $this->table_name,
    [
        'user_id' => 0,
        'mobile_number' => $mobile,
        'status' => 'pending',
        'verification_code' => $otp_mobile,
    ]
);
        $sms = new \jamal13647850\smsapi\SMS(
            new \jamal13647850\smsapi\FarazSMS(
                FARAZSMS_USERNAME,
                FARAZSMS_PASSWORD,
                FARAZSMS_FROM_NUMBER,
                FARAZSMS_URL
            )
        );
        $sms->sendSMSByPattern($mobile, '', FARAZSMS_PATTERN, ['code' => $otp_mobile]);
        $this->create_otp_form($email, $mobile, $password);
        wp_die();
    }
    public function handle_sms_register_verify(): void
    {
        check_ajax_referer('sms_register_nonce', 'nonce');
        $email      = sanitize_email($_POST['email'] ?? '');
        $mobile     = sanitize_text_field($_POST['mobile'] ?? '');
        $password   = $_POST['password'] ?? '';
        $otp_mobile = sanitize_text_field($_POST['otp_mobile'] ?? '');
        // Validate fields + OTP
        $fields = [
            'ایمیل'                => ['value' => $email,      'rules' => ['required' => true, 'type' => 'email']],
            'شماره موبایل'         => ['value' => $mobile,     'rules' => ['required' => true, 'type' => 'mobile']],
            'رمز عبور'             => ['value' => $password,   'rules' => ['required' => true]],
            'کد تأیید موبایل'      => ['value' => $otp_mobile, 'rules' => ['required' => true, 'type' => 'otp']],
        ];
        $this->validator->validate_all_fields($fields);
        if (!empty($this->validator->get_errors())) {
            $this->create_otp_form($email, $mobile, $password, $otp_mobile);
            $this->validator->get_validation_response('html');
            wp_die();
        }
        $record = $this->wpdb->get_row($this->wpdb->prepare(
            "SELECT * FROM {$this->table_name} WHERE mobile_number = %s AND user_id = 0",
            $mobile
        ));
        if (!$record
            || $record->verification_code !== $otp_mobile
            || $record->status !== 'pending'
            || (time() - strtotime($record->updated_at)) > self::OTP_EXPIRY
        ) {
            $this->validator->add_error('کد تأیید موبایل نامعتبر یا منقضی شده است.');
            $this->create_otp_form($email, $mobile, $password, $otp_mobile);
            $this->validator->get_validation_response('html');
            wp_die();
        }
        $user_id = wp_create_user($email, $password, $email);
        if (is_wp_error($user_id)) {
            $this->validator->add_error('خطا در ثبت نام: ' . $user_id->get_error_message());
            $this->create_otp_form($email, $mobile, $password, $otp_mobile);
            $this->validator->get_validation_response('html');
            wp_die();
        }
        $this->wpdb->update(
            $this->table_name,
            [
                'user_id'          => $user_id,
                'status'           => 'verified',
                'verification_code'=> null,
            ],
            ['mobile_number' => $mobile, 'user_id' => 0]
        );
        $migration = new UserMigration($this->view);
        $migration->sync_mobile_to_billing_phone($user_id);
        echo '<p class="text-primary">ثبت نام با موفقیت انجام شد. '
            . '<a href="' . esc_url(home_url('/login/')) . '" class="text-secondary hover:underline">ورود به حساب</a></p>';
        wp_die();
    }
    private function generate_otp(): string
    {
        return sprintf('%06d', mt_rand(0, 999999));
    }
    private function create_otp_form(
        string $email,
        string $mobile,
        string $password,
        string $otp_mobile = ''
    ): void {
        $ajax_url = admin_url('admin-ajax.php');
        $nonce    = wp_create_nonce('sms_register_nonce');
        $data = [
            'ajax_url'    => $ajax_url,
            'nonce'       => $nonce,
            'email'       => $email,
            'mobile'      => $mobile,
            'password'    => $password,
            'otp_mobile'  => $otp_mobile,
        ];
        $this->view->display('@views/components/register/verify.twig', $data);
    }
    public function htmx_validate_email(): void
    {
        check_ajax_referer('sms_register_nonce', 'nonce');
        $value = sanitize_email($_POST['email'] ?? '');
        $this->validator->validate_email($value);
        $this->validator->get_validation_response();
        wp_die();
    }
    public function htmx_validate_mobile(): void
    {
        check_ajax_referer('sms_register_nonce', 'nonce');
        $value = sanitize_text_field($_POST['mobile'] ?? '');
        $this->validator->validate_mobile($value);
        $this->validator->get_validation_response();
        wp_die();
    }
    public function htmx_validate_password(): void
    {
        check_ajax_referer('sms_register_nonce', 'nonce');
        $value = $_POST['password'] ?? '';
        $fields = [
            'رمز عبور' => ['value' => $value, 'rules' => ['required' => true]],
        ];
        $this->validator->validate_all_fields($fields);
        $this->validator->get_validation_response();
        wp_die();
    }
}

================
File: src/Helpers/Helper.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Helpers;
defined('ABSPATH') || exit();
class Helper
{
	public function __construct() {}
	public function getRecentPosts(int $posts_per_page = 4, string $post_type = 'post')
	{
		require_once 'jdf.php';
		$jalali_date = jdate('l j F، Y');
		$recent_posts = new \WP_Query(array(
			'posts_per_page' => $posts_per_page,
			'post_type'      => $post_type
		));
		$post_data = array();
		if ($recent_posts->have_posts()) :
			while ($recent_posts->have_posts()) : $recent_posts->the_post();
				$post_data[] = array(
					'title'     => get_the_title(),
					'content'   => get_the_content(),
					'excerpt'   => get_the_excerpt(),
					'featured_image' => get_the_post_thumbnail_url(),
					'date'      => get_the_date('Y-m-d H:i'),
					'jalali_date' => $jalali_date,
					'link'      => get_permalink()
				);
			endwhile;
			wp_reset_postdata();
		endif;
		return $post_data;
	}
}

================
File: src/Helpers/JalaliDate.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Helpers;
class JalaliDate
{
    public static function format(
        string $format,
        $timestamp = null,
        string $time_zone = 'Asia/Tehran',
        string $tr_num = 'fa'
    ): string {
        $timestamp = $timestamp === null
            ? time()
            : (is_numeric($timestamp) ? (int)$timestamp : (int)self::trNum((string)$timestamp, 'en'));
        if ($time_zone !== 'local') {
            date_default_timezone_set($time_zone !== '' ? $time_zone : 'Asia/Tehran');
        }
        $date = explode('_', date('H_i_j_n_O_P_s_w_Y', $timestamp));
        [$jy, $jm, $jd] = self::gregorianToJalali((int)$date[8], (int)$date[3], (int)$date[2]);
        $doy = ($jm < 7) ? (($jm - 1) * 31) + $jd - 1 : (($jm - 7) * 30) + $jd + 185;
        $kab = (((($jy + 12) % 33) % 4) === 1) ? 1 : 0;
        $out = '';
        $sl = strlen($format);
        for ($i = 0; $i < $sl; $i++) {
            $sub = substr($format, $i, 1);
            if ($sub === '\\') {
                $out .= substr($format, ++$i, 1);
                continue;
            }
            switch ($sub) {
                // پرکاربردترین کدهای جلالی
                case 'Y': $out .= $jy; break;
                case 'y': $out .= substr((string)$jy, 2, 2); break;
                case 'm': $out .= ($jm < 10 ? '0' : '') . $jm; break;
                case 'n': $out .= $jm; break;
                case 'd': $out .= ($jd < 10 ? '0' : '') . $jd; break;
                case 'j': $out .= $jd; break;
                case 'F': $out .= self::jdateWords(['mm' => $jm], ' '); break;
                case 'l': $out .= self::jdateWords(['rh' => $date[7]], ' '); break;
                case 'D': $out .= self::jdateWords(['kh' => $date[7]], ' '); break;
                case 'H': $out .= $date[0]; break;
                case 'i': $out .= $date[1]; break;
                case 's': $out .= $date[6]; break;
                case 'N': $out .= $date[7] + 1; break;
                case 'w': $out .= ($date[7] == 6) ? 0 : $date[7] + 1; break;
                case 'z': $out .= $doy; break;
                case 'L': $out .= $kab; break;
                case 't': $out .= ($jm != 12) ? (31 - (int)($jm / 6.5)) : ($kab + 29); break;
                case 'U': $out .= $timestamp; break;
                case 'a': $out .= ($date[0] < 12) ? 'ق.ظ' : 'ب.ظ'; break;
                case 'A': $out .= ($date[0] < 12) ? 'قبل از ظهر' : 'بعد از ظهر'; break;
                default : $out .= $sub;
            }
        }
        return $tr_num !== 'en' ? self::trNum($out, 'fa') : $out;
    }
    public static function gregorianToJalali(int $gy, int $gm, int $gd): array
    {
        $g_d_m = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        $gy2 = ($gm > 2) ? $gy + 1 : $gy;
        $days = 355666 + (365 * $gy)
            + (int)(($gy2 + 3) / 4)
            - (int)(($gy2 + 99) / 100)
            + (int)(($gy2 + 399) / 400)
            + $gd + $g_d_m[$gm - 1];
        $jy = -1595 + (33 * (int)($days / 12053));
        $days %= 12053;
        $jy += 4 * (int)($days / 1461);
        $days %= 1461;
        if ($days > 365) {
            $jy += (int)(($days - 1) / 365);
            $days = ($days - 1) % 365;
        }
        if ($days < 186) {
            $jm = 1 + (int)($days / 31);
            $jd = 1 + ($days % 31);
        } else {
            $jm = 7 + (int)(($days - 186) / 30);
            $jd = 1 + (($days - 186) % 30);
        }
        return [$jy, $jm, $jd];
    }
    public static function jalaliToGregorian(int $jy, int $jm, int $jd): array
    {
        $jy += 1595;
        $days = -355668 + (365 * $jy)
            + (((int)($jy / 33)) * 8)
            + ((int)((($jy % 33) + 3) / 4))
            + $jd
            + (($jm < 7)
                ? ($jm - 1) * 31
                : (($jm - 7) * 30 + 186)
            );
        $gy = 400 * (int)($days / 146097);
        $days %= 146097;
        if ($days > 36524) {
            $gy += 100 * (int)(--$days / 36524);
            $days %= 36524;
            if ($days >= 365) $days++;
        }
        $gy += 4 * (int)($days / 1461);
        $days %= 1461;
        if ($days > 365) {
            $gy += (int)(($days - 1) / 365);
            $days = ($days - 1) % 365;
        }
        $gd = $days + 1;
        $sal_a = [0, 31, (($gy % 4 == 0 && $gy % 100 != 0) || ($gy % 400 == 0)) ? 29 : 28,
            31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        for ($gm = 0; $gm < 13 && $gd > $sal_a[$gm]; $gm++) {
            $gd -= $sal_a[$gm];
        }
        return [$gy, $gm, $gd];
    }
    public static function trNum(string $str, string $mod = 'en', string $mf = '٫'): string
    {
        $num_a = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'];
        $key_a = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹', $mf];
        return $mod === 'fa'
            ? str_replace($num_a, $key_a, $str)
            : str_replace($key_a, $num_a, $str);
    }
    public static function jdateWords(array $array, string $mod = '')
    {
        foreach ($array as $type => $num) {
            $num = (int)self::trNum((string)$num, 'en');
            switch ($type) {
                case 'mm':
                    $key = ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر',
                        'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'];
                    $array[$type] = $key[$num - 1];
                    break;
                case 'rr':
                    $key = ['یک', 'دو', 'سه', 'چهار', 'پنج', 'شش', 'هفت', 'هشت', 'نه', 'ده',
                        'یازده', 'دوازده', 'سیزده', 'چهارده', 'پانزده', 'شانزده', 'هفده', 'هجده', 'نوزده',
                        'بیست', 'بیست و یک', 'بیست و دو', 'بیست و سه', 'بیست و چهار', 'بیست و پنج', 'بیست و شش',
                        'بیست و هفت', 'بیست و هشت', 'بیست و نه', 'سی', 'سی و یک'];
                    $array[$type] = $key[$num - 1];
                    break;
                case 'rh':
                    $key = ['یکشنبه', 'دوشنبه', 'سه شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه', 'شنبه'];
                    $array[$type] = $key[$num];
                    break;
                case 'kh':
                    $key = ['ی', 'د', 'س', 'چ', 'پ', 'ج', 'ش'];
                    $array[$type] = $key[$num];
                    break;
                default:
                    $array[$type] = $num;
            }
        }
        return ($mod === '') ? $array : implode($mod, $array);
    }
    /**
     * چک کردن اعتبار تاریخ جلالی
     * @param int $jm ماه
     * @param int $jd روز
     * @param int $jy سال
     * @return bool
     */
    public static function isValid(int $jm, int $jd, int $jy): bool
    {
        $l_d = ($jm == 12 && ((($jy + 12) % 33) % 4) != 1)
            ? 29 : (31 - (int)($jm / 6.5));
        return ($jm > 12 || $jd > $l_d || $jm < 1 || $jd < 1 || $jy < 1)
            ? false : true;
    }
    /**
     * jgetdate - مشابه getdate میلادی، اما جلالی
     *
     * @param int|null $timestamp
     * @param string $time_zone
     * @param string $tr_num
     * @return array
     */
    public static function getDate(?int $timestamp = null, string $time_zone = 'Asia/Tehran', string $tr_num = 'en'): array
    {
        $timestamp = $timestamp ?? time();
        $jdate = explode(
            '_',
            self::format('F_G_i_j_l_n_s_w_Y_z', $timestamp, $time_zone, $tr_num)
        );
        return [
            'seconds'  => (int)self::trNum($jdate[6], $tr_num),
            'minutes'  => (int)self::trNum($jdate[2], $tr_num),
            'hours'    => $jdate[1],
            'mday'     => $jdate[3],
            'wday'     => $jdate[7],
            'mon'      => $jdate[5],
            'year'     => $jdate[8],
            'yday'     => $jdate[9],
            'weekday'  => $jdate[4],
            'month'    => $jdate[0],
            0          => self::trNum((string)$timestamp, $tr_num)
        ];
    }
}

================
File: src/Helpers/jdf.php
================
<?php
function jdate($format, $timestamp = '', $none = '', $time_zone = 'Asia/Tehran', $tr_num = 'fa') {
  $T_sec = 0;
  if ($time_zone != 'local') date_default_timezone_set(($time_zone === '') ? 'Asia/Tehran' : $time_zone);
  $ts = $T_sec + (($timestamp === '') ? time() : tr_num($timestamp));
  $date = explode('_', date('H_i_j_n_O_P_s_w_Y', $ts));
  list($j_y, $j_m, $j_d) = gregorian_to_jalali($date[8], $date[3], $date[2]);
  $doy = ($j_m < 7) ? (($j_m - 1) * 31) + $j_d - 1 : (($j_m - 7) * 30) + $j_d + 185;
  $kab = (((($j_y + 12) % 33) % 4) == 1) ? 1 : 0;
  $sl = strlen($format);
  $out = '';
  for ($i = 0; $i < $sl; $i++) {
    $sub = substr($format, $i, 1);
    if ($sub == '\\') {
      $out .= substr($format, ++$i, 1);
      continue;
    }
    switch ($sub) {
      case 'E':
      case 'R':
      case 'x':
      case 'X':
        $out .= 'http://jdf.scr.ir';
        break;
      case 'B':
      case 'e':
      case 'g':
      case 'G':
      case 'h':
      case 'I':
      case 'T':
      case 'u':
      case 'Z':
        $out .= date($sub, $ts);
        break;
      case 'a':
        $out .= ($date[0] < 12) ? 'ق.ظ' : 'ب.ظ';
        break;
      case 'A':
        $out .= ($date[0] < 12) ? 'قبل از ظهر' : 'بعد از ظهر';
        break;
      case 'b':
        $out .= (int) ($j_m / 3.1) + 1;
        break;
      case 'c':
        $out .= $j_y . '/' . $j_m . '/' . $j_d . ' ،' . $date[0] . ':' . $date[1] . ':' . $date[6] . ' ' . $date[5];
        break;
      case 'C':
        $out .= (int) (($j_y + 99) / 100);
        break;
      case 'd':
        $out .= ($j_d < 10) ? '0' . $j_d : $j_d;
        break;
      case 'D':
        $out .= jdate_words(array('kh' => $date[7]), ' ');
        break;
      case 'f':
        $out .= jdate_words(array('ff' => $j_m), ' ');
        break;
      case 'F':
        $out .= jdate_words(array('mm' => $j_m), ' ');
        break;
      case 'H':
        $out .= $date[0];
        break;
      case 'i':
        $out .= $date[1];
        break;
      case 'j':
        $out .= $j_d;
        break;
      case 'J':
        $out .= jdate_words(array('rr' => $j_d), ' ');
        break;
      case 'k';
        $out .= tr_num(100 - (int) ($doy / ($kab + 365.24) * 1000) / 10, $tr_num);
        break;
      case 'K':
        $out .= tr_num((int) ($doy / ($kab + 365.24) * 1000) / 10, $tr_num);
        break;
      case 'l':
        $out .= jdate_words(array('rh' => $date[7]), ' ');
        break;
      case 'L':
        $out .= $kab;
        break;
      case 'm':
        $out .= ($j_m > 9) ? $j_m : '0' . $j_m;
        break;
      case 'M':
        $out .= jdate_words(array('km' => $j_m), ' ');
        break;
      case 'n':
        $out .= $j_m;
        break;
      case 'N':
        $out .= $date[7] + 1;
        break;
      case 'o':
        $jdw = ($date[7] == 6) ? 0 : $date[7] + 1;
        $dny = 364 + $kab - $doy;
        $out .= ($jdw > ($doy + 3) and $doy < 3) ? $j_y - 1 : (((3 - $dny) > $jdw and $dny < 3) ? $j_y + 1 : $j_y);
        break;
      case 'O':
        $out .= $date[4];
        break;
      case 'p':
        $out .= jdate_words(array('mb' => $j_m), ' ');
        break;
      case 'P':
        $out .= $date[5];
        break;
      case 'q':
        $out .= jdate_words(array('sh' => $j_y), ' ');
        break;
      case 'Q':
        $out .= $kab + 364 - $doy;
        break;
      case 'r':
        $key = jdate_words(array('rh' => $date[7], 'mm' => $j_m));
        $out .= $date[0] . ':' . $date[1] . ':' . $date[6] . ' ' . $date[4] . ' ' . $key['rh'] . '، ' . $j_d . ' ' . $key['mm'] . ' ' . $j_y;
        break;
      case 's':
        $out .= $date[6];
        break;
      case 'S':
        $out .= 'ام';
        break;
      case 't':
        $out .= ($j_m != 12) ? (31 - (int) ($j_m / 6.5)) : ($kab + 29);
        break;
      case 'U':
        $out .= $ts;
        break;
      case 'v':
        $out .= jdate_words(array('ss' => ($j_y % 100)), ' ');
        break;
      case 'V':
        $out .= jdate_words(array('ss' => $j_y), ' ');
        break;
      case 'w':
        $out .= ($date[7] == 6) ? 0 : $date[7] + 1;
        break;
      case 'W':
        $avs = (($date[7] == 6) ? 0 : $date[7] + 1) - ($doy % 7);
        if ($avs < 0) $avs += 7;
        $num = (int) (($doy + $avs) / 7);
        if ($avs < 4) {
          $num++;
        } elseif ($num < 1) {
          $num = ($avs == 4 or $avs == ((((($j_y % 33) % 4) - 2) == ((int) (($j_y % 33) * 0.05))) ? 5 : 4)) ? 53 : 52;
        }
        $aks = $avs + $kab;
        if ($aks == 7) $aks = 0;
        $out .= (($kab + 363 - $doy) < $aks and $aks < 3) ? '01' : (($num < 10) ? '0' . $num : $num);
        break;
      case 'y':
        $out .= substr($j_y, 2, 2);
        break;
      case 'Y':
        $out .= $j_y;
        break;
      case 'z':
        $out .= $doy;
        break;
      default:
        $out .= $sub;
    }
  }
  return ($tr_num != 'en') ? tr_num($out, 'fa', '.') : $out;
}
function jstrftime($format, $timestamp = '', $none = '', $time_zone = 'Asia/Tehran', $tr_num = 'fa') {
  $T_sec = 0;
  if ($time_zone != 'local') date_default_timezone_set(($time_zone === '') ? 'Asia/Tehran' : $time_zone);
  $ts = $T_sec + (($timestamp === '') ? time() : tr_num($timestamp));
  $date = explode('_', date('h_H_i_j_n_s_w_Y', $ts));
  list($j_y, $j_m, $j_d) = gregorian_to_jalali($date[7], $date[4], $date[3]);
  $doy = ($j_m < 7) ? (($j_m - 1) * 31) + $j_d - 1 : (($j_m - 7) * 30) + $j_d + 185;
  $kab = (((($j_y + 12) % 33) % 4) == 1) ? 1 : 0;
  $sl = strlen($format);
  $out = '';
  for ($i = 0; $i < $sl; $i++) {
    $sub = substr($format, $i, 1);
    if ($sub == '%') {
      $sub = substr($format, ++$i, 1);
    } else {
      $out .= $sub;
      continue;
    }
    switch ($sub) {
        /* Day */
      case 'a':
        $out .= jdate_words(array('kh' => $date[6]), ' ');
        break;
      case 'A':
        $out .= jdate_words(array('rh' => $date[6]), ' ');
        break;
      case 'd':
        $out .= ($j_d < 10) ? '0' . $j_d : $j_d;
        break;
      case 'e':
        $out .= ($j_d < 10) ? ' ' . $j_d : $j_d;
        break;
      case 'j':
        $out .= str_pad($doy + 1, 3, 0, STR_PAD_LEFT);
        break;
      case 'u':
        $out .= $date[6] + 1;
        break;
      case 'w':
        $out .= ($date[6] == 6) ? 0 : $date[6] + 1;
        break;
      case 'U':
        $avs = (($date[6] < 5) ? $date[6] + 2 : $date[6] - 5) - ($doy % 7);
        if ($avs < 0) $avs += 7;
        $num = (int) (($doy + $avs) / 7) + 1;
        if ($avs > 3 or $avs == 1) $num--;
        $out .= ($num < 10) ? '0' . $num : $num;
        break;
      case 'V':
        $avs = (($date[6] == 6) ? 0 : $date[6] + 1) - ($doy % 7);
        if ($avs < 0) $avs += 7;
        $num = (int) (($doy + $avs) / 7);
        if ($avs < 4) {
          $num++;
        } elseif ($num < 1) {
          $num = ($avs == 4 or $avs == ((((($j_y % 33) % 4) - 2) == ((int) (($j_y % 33) * 0.05))) ? 5 : 4)) ? 53 : 52;
        }
        $aks = $avs + $kab;
        if ($aks == 7) $aks = 0;
        $out .= (($kab + 363 - $doy) < $aks and $aks < 3) ? '01' : (($num < 10) ? '0' . $num : $num);
        break;
      case 'W':
        $avs = (($date[6] == 6) ? 0 : $date[6] + 1) - ($doy % 7);
        if ($avs < 0) $avs += 7;
        $num = (int) (($doy + $avs) / 7) + 1;
        if ($avs > 3) $num--;
        $out .= ($num < 10) ? '0' . $num : $num;
        break;
      case 'b':
      case 'h':
        $out .= jdate_words(array('km' => $j_m), ' ');
        break;
      case 'B':
        $out .= jdate_words(array('mm' => $j_m), ' ');
        break;
      case 'm':
        $out .= ($j_m > 9) ? $j_m : '0' . $j_m;
        break;
      case 'C':
        $tmp = (int) ($j_y / 100);
        $out .= ($tmp > 9) ? $tmp : '0' . $tmp;
        break;
      case 'g':
        $jdw = ($date[6] == 6) ? 0 : $date[6] + 1;
        $dny = 364 + $kab - $doy;
        $out .= substr(($jdw > ($doy + 3) and $doy < 3) ? $j_y - 1 : (((3 - $dny) > $jdw and $dny < 3) ? $j_y + 1 : $j_y), 2, 2);
        break;
      case 'G':
        $jdw = ($date[6] == 6) ? 0 : $date[6] + 1;
        $dny = 364 + $kab - $doy;
        $out .= ($jdw > ($doy + 3) and $doy < 3) ? $j_y - 1 : (((3 - $dny) > $jdw and $dny < 3) ? $j_y + 1 : $j_y);
        break;
      case 'y':
        $out .= substr($j_y, 2, 2);
        break;
      case 'Y':
        $out .= $j_y;
        break;
      case 'H':
        $out .= $date[1];
        break;
      case 'I':
        $out .= $date[0];
        break;
      case 'l':
        $out .= ($date[0] > 9) ? $date[0] : ' ' . (int) $date[0];
        break;
      case 'M':
        $out .= $date[2];
        break;
      case 'p':
        $out .= ($date[1] < 12) ? 'قبل از ظهر' : 'بعد از ظهر';
        break;
      case 'P':
        $out .= ($date[1] < 12) ? 'ق.ظ' : 'ب.ظ';
        break;
      case 'r':
        $out .= $date[0] . ':' . $date[2] . ':' . $date[5] . ' ' . (($date[1] < 12) ? 'قبل از ظهر' : 'بعد از ظهر');
        break;
      case 'R':
        $out .= $date[1] . ':' . $date[2];
        break;
      case 'S':
        $out .= $date[5];
        break;
      case 'T':
        $out .= $date[1] . ':' . $date[2] . ':' . $date[5];
        break;
      case 'X':
        $out .= $date[0] . ':' . $date[2] . ':' . $date[5];
        break;
      case 'z':
        $out .= date('O', $ts);
        break;
      case 'Z':
        $out .= date('T', $ts);
        break;
      case 'c':
        $key = jdate_words(array('rh' => $date[6], 'mm' => $j_m));
        $out .= $date[1] . ':' . $date[2] . ':' . $date[5] . ' ' . date('P', $ts) . ' ' . $key['rh'] . '، ' . $j_d . ' ' . $key['mm'] . ' ' . $j_y;
        break;
      case 'D':
        $out .= substr($j_y, 2, 2) . '/' . (($j_m > 9) ? $j_m : '0' . $j_m) . '/' . (($j_d < 10) ? '0' . $j_d : $j_d);
        break;
      case 'F':
        $out .= $j_y . '-' . (($j_m > 9) ? $j_m : '0' . $j_m) . '-' . (($j_d < 10) ? '0' . $j_d : $j_d);
        break;
      case 's':
        $out .= $ts;
        break;
      case 'x':
        $out .= substr($j_y, 2, 2) . '/' . (($j_m > 9) ? $j_m : '0' . $j_m) . '/' . (($j_d < 10) ? '0' . $j_d : $j_d);
        break;
      case 'n':
        $out .= "\n";
        break;
      case 't':
        $out .= "\t";
        break;
      case '%':
        $out .= '%';
        break;
      default:
        $out .= $sub;
    }
  }
  return ($tr_num != 'en') ? tr_num($out, 'fa', '.') : $out;
}
function jmktime($h = '', $m = '', $s = '', $jm = '', $jd = '', $jy = '', $none = '', $timezone = 'Asia/Tehran') {
  if ($timezone != 'local') date_default_timezone_set($timezone);
  if ($h === '') {
    return time();
  } else {
    list($h, $m, $s, $jm, $jd, $jy) = explode('_', tr_num($h . '_' . $m . '_' . $s . '_' . $jm . '_' . $jd . '_' . $jy));
    if ($m === '') {
      return mktime($h);
    } else {
      if ($s === '') {
        return mktime($h, $m);
      } else {
        if ($jm === '') {
          return mktime($h, $m, $s);
        } else {
          $jdate = explode('_', jdate('Y_j', '', '', $timezone, 'en'));
          if ($jd === '') {
            list($gy, $gm, $gd) = jalali_to_gregorian($jdate[0], $jm, $jdate[1]);
            return mktime($h, $m, $s, $gm);
          } else {
            if ($jy === '') {
              list($gy, $gm, $gd) = jalali_to_gregorian($jdate[0], $jm, $jd);
              return mktime($h, $m, $s, $gm, $gd);
            } else {
              list($gy, $gm, $gd) = jalali_to_gregorian($jy, $jm, $jd);
              return mktime($h, $m, $s, $gm, $gd, $gy);
            }
          }
        }
      }
    }
  }
}
/*	F	*/
function jgetdate($timestamp = '', $none = '', $timezone = 'Asia/Tehran', $tn = 'en') {
  $ts = ($timestamp === '') ? time() : tr_num($timestamp);
  $jdate = explode('_', jdate('F_G_i_j_l_n_s_w_Y_z', $ts, '', $timezone, $tn));
  return array(
    'seconds' => tr_num((int) tr_num($jdate[6]), $tn),
    'minutes' => tr_num((int) tr_num($jdate[2]), $tn),
    'hours' => $jdate[1],
    'mday' => $jdate[3],
    'wday' => $jdate[7],
    'mon' => $jdate[5],
    'year' => $jdate[8],
    'yday' => $jdate[9],
    'weekday' => $jdate[4],
    'month' => $jdate[0],
    0 => tr_num($ts, $tn)
  );
}
function jcheckdate($jm, $jd, $jy) {
  list($jm, $jd, $jy) = explode('_', tr_num($jm . '_' . $jd . '_' . $jy));
  $l_d = ($jm == 12 and ((($jy + 12) % 33) % 4) != 1) ? 29 : (31 - (int) ($jm / 6.5));
  return ($jm > 12 or $jd > $l_d or $jm < 1 or $jd < 1 or $jy < 1) ? false : true;
}
function tr_num($str, $mod = 'en', $mf = '٫') {
  $num_a = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.');
  $key_a = array('۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹', $mf);
  return ($mod == 'fa') ? str_replace($num_a, $key_a, $str) : str_replace($key_a, $num_a, $str);
}
function jdate_words($array, $mod = '') {
  foreach ($array as $type => $num) {
    $num = (int) tr_num($num);
    switch ($type) {
      case 'ss':
        $sl = strlen($num);
        $xy3 = substr($num, 2 - $sl, 1);
        $h3 = $h34 = $h4 = '';
        if ($xy3 == 1) {
          $p34 = '';
          $k34 = array('ده', 'یازده', 'دوازده', 'سیزده', 'چهارده', 'پانزده', 'شانزده', 'هفده', 'هجده', 'نوزده');
          $h34 = $k34[substr($num, 2 - $sl, 2) - 10];
        } else {
          $xy4 = substr($num, 3 - $sl, 1);
          $p34 = ($xy3 == 0 or $xy4 == 0) ? '' : ' و ';
          $k3 = array('', '', 'بیست', 'سی', 'چهل', 'پنجاه', 'شصت', 'هفتاد', 'هشتاد', 'نود');
          $h3 = $k3[$xy3];
          $k4 = array('', 'یک', 'دو', 'سه', 'چهار', 'پنج', 'شش', 'هفت', 'هشت', 'نه');
          $h4 = $k4[$xy4];
        }
        $array[$type] = (($num > 99) ? str_replace(
          array('12', '13', '14', '19', '20'),
          array('هزار و دویست', 'هزار و سیصد', 'هزار و چهارصد', 'هزار و نهصد', 'دوهزار'),
          substr($num, 0, 2)
        ) . ((substr($num, 2, 2) == '00') ? '' : ' و ') : '') . $h3 . $p34 . $h34 . $h4;
        break;
      case 'mm':
        $key = array('فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند');
        $array[$type] = $key[$num - 1];
        break;
      case 'rr':
        $key = array(
          'یک', 'دو', 'سه', 'چهار', 'پنج', 'شش', 'هفت', 'هشت', 'نه', 'ده', 'یازده', 'دوازده', 'سیزده', 'چهارده', 'پانزده', 'شانزده', 'هفده', 'هجده', 'نوزده', 'بیست', 'بیست و یک', 'بیست و دو', 'بیست و سه', 'بیست و چهار', 'بیست و پنج', 'بیست و شش', 'بیست و هفت', 'بیست و هشت', 'بیست و نه', 'سی', 'سی و یک'
        );
        $array[$type] = $key[$num - 1];
        break;
      case 'rh':
        $key = array('یکشنبه', 'دوشنبه', 'سه شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه', 'شنبه');
        $array[$type] = $key[$num];
        break;
      case 'sh':
        $key = array('مار', 'اسب', 'گوسفند', 'میمون', 'مرغ', 'سگ', 'خوک', 'موش', 'گاو', 'پلنگ', 'خرگوش', 'نهنگ');
        $array[$type] = $key[$num % 12];
        break;
      case 'mb':
        $key = array('حمل', 'ثور', 'جوزا', 'سرطان', 'اسد', 'سنبله', 'میزان', 'عقرب', 'قوس', 'جدی', 'دلو', 'حوت');
        $array[$type] = $key[$num - 1];
        break;
      case 'ff':
        $key = array('بهار', 'تابستان', 'پاییز', 'زمستان');
        $array[$type] = $key[(int) ($num / 3.1)];
        break;
      case 'km':
        $key = array('فر', 'ار', 'خر', 'تی‍', 'مر', 'شه‍', 'مه‍', 'آب‍', 'آذ', 'دی', 'به‍', 'اس‍');
        $array[$type] = $key[$num - 1];
        break;
      case 'kh':
        $key = array('ی', 'د', 'س', 'چ', 'پ', 'ج', 'ش');
        $array[$type] = $key[$num];
        break;
      default:
        $array[$type] = $num;
    }
  }
  return ($mod === '') ? $array : implode($mod, $array);
}
/**  Gregorian & Jalali (Hijri_Shamsi,Solar) Date Converter Functions
Author: JDF.SCR.IR =>> Download Full Version :  http://jdf.scr.ir/jdf
License: GNU/LGPL _ Open Source & Free :: Version: 2.80 : [2020=1399]
---------------------------------------------------------------------
355746=361590-5844 & 361590=(30*33*365)+(30*8) & 5844=(16*365)+(16/4)
355666=355746-79-1 & 355668=355746-79+1 &  1595=605+990 &  605=621-16
990=30*33 & 12053=(365*33)+(32/4) & 36524=(365*100)+(100/4)-(100/100)
1461=(365*4)+(4/4) & 146097=(365*400)+(400/4)-(400/100)+(400/400)  */
/*	F	*/
function gregorian_to_jalali($gy, $gm, $gd, $mod = '') {
   list($gy, $gm, $gd) = explode('_', tr_num($gy . '_' . $gm . '_' . $gd));
  $g_d_m = array(0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334);
  $gy2 = ($gm > 2) ? ($gy + 1) : $gy;
  $days = 355666 + (365 * $gy) + ((int) (($gy2 + 3) / 4)) - ((int) (($gy2 + 99) / 100)) + ((int) (($gy2 + 399) / 400)) + $gd + $g_d_m[$gm - 1];
  $jy = -1595 + (33 * ((int) ($days / 12053)));
  $days %= 12053;
  $jy += 4 * ((int) ($days / 1461));
  $days %= 1461;
  if ($days > 365) {
    $jy += (int) (($days - 1) / 365);
    $days = ($days - 1) % 365;
  }
  if ($days < 186) {
    $jm = 1 + (int) ($days / 31);
    $jd = 1 + ($days % 31);
  } else {
    $jm = 7 + (int) (($days - 186) / 30);
    $jd = 1 + (($days - 186) % 30);
  }
  return ($mod == '') ? array($jy, $jm, $jd) : $jy . $mod . $jm . $mod . $jd;
}
/*	F	*/
function jalali_to_gregorian($jy, $jm, $jd, $mod = '') {
   list($jy, $jm, $jd) = explode('_', tr_num($jy . '_' . $jm . '_' . $jd));
  $jy += 1595;
  $days = -355668 + (365 * $jy) + (((int) ($jy / 33)) * 8) + ((int) ((($jy % 33) + 3) / 4)) + $jd + (($jm < 7) ? ($jm - 1) * 31 : (($jm - 7) * 30) + 186);
  $gy = 400 * ((int) ($days / 146097));
  $days %= 146097;
  if ($days > 36524) {
    $gy += 100 * ((int) (--$days / 36524));
    $days %= 36524;
    if ($days >= 365) $days++;
  }
  $gy += 4 * ((int) ($days / 1461));
  $days %= 1461;
  if ($days > 365) {
    $gy += (int) (($days - 1) / 365);
    $days = ($days - 1) % 365;
  }
  $gd = $days + 1;
  $sal_a = array(0, 31, (($gy % 4 == 0 and $gy % 100 != 0) or ($gy % 400 == 0)) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
  for ($gm = 0; $gm < 13 and $gd > $sal_a[$gm]; $gm++) $gd -= $sal_a[$gm];
  return ($mod == '') ? array($gy, $gm, $gd) : $gy . $mod . $gm . $mod . $gd;
}

================
File: src/Helpers/TwigHelper.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Helpers;
defined('ABSPATH') || exit();
class TwigHelper implements TwigHelperInterface
{
    private ?\Twig\Environment $twig = null;
    private ?\Twig\Loader\FilesystemLoader $loader = null;
    public function __construct()
    {
        $this->initTwig();
    }
    private function initTwig(): void
    {
        $this->loader = new \Twig\Loader\FilesystemLoader();
        $basePath = Config::get('views.path', get_template_directory() . '/templates/');
        $directories = Config::get('views.directories', ['views']);
        foreach ($directories as $dir) {
            $path = rtrim($basePath, '/') . '/' . $dir;
            if (is_dir($path)) {
                $this->loader->addPath($path, $dir);
                $this->loader->addPath($path);
            }
        }
        $this->twig = new \Twig\Environment($this->loader, [
            'debug' => Config::get('views.debug', WP_DEBUG),
            'cache' => Config::get('views.cache', false),
            'auto_reload' => Config::get('views.auto_reload', true),
        ]);
        if (Config::get('views.debug', WP_DEBUG)) {
            $this->twig->addExtension(new \Twig\Extension\DebugExtension());
        }
        $this->addWordPressFunctions();
    }
    public function createInstance(): \Twig\Environment
    {
        if ($this->twig === null) {
            $this->initTwig();
        }
        return $this->twig;
    }
    public function addPath(string $path, string $namespace): void
    {
        if ($this->loader === null) {
            $this->initTwig();
        }
        if (is_dir($path)) {
            $this->loader->addPath($path, $namespace);
        }
    }
    public function addExtension(\Twig\Extension\ExtensionInterface $extension): void
    {
        if ($this->twig === null) {
            $this->initTwig();
        }
        $this->twig->addExtension($extension);
    }
    public function addFilter(string $name, callable $callback, array $options = []): void
    {
        if ($this->twig === null) {
            $this->initTwig();
        }
        $this->twig->addFilter(new \Twig\TwigFilter($name, $callback, $options));
    }
    public function addFunction(string $name, callable $callback, array $options = []): void
    {
        if ($this->twig === null) {
            $this->initTwig();
        }
        $this->twig->addFunction(new \Twig\TwigFunction($name, $callback, $options));
    }
    private function addWordPressFunctions(): void
    {
        $wpFunctions = [
            'wp_head', 'wp_footer', 'body_class', 'get_header', 'get_footer', 'get_sidebar',
            'get_template_part', 'get_permalink', 'get_the_title', 'get_the_content',
            'get_the_excerpt', 'get_the_post_thumbnail', 'wp_get_attachment_image',
            'get_post_type', 'get_post_meta', 'get_term_meta', 'get_option', 'get_theme_mod',
            'wp_nav_menu', 'wp_list_categories', 'paginate_links', 'home_url', 'admin_url',
            'get_template_directory_uri', 'get_stylesheet_directory_uri', 'get_search_form',
            'wp_enqueue_script', 'wp_enqueue_style', 'wp_login_url', 'wp_logout_url',
            'wp_register_url', 'is_user_logged_in', 'current_user_can', 'wp_get_current_user',
            'is_front_page', 'is_home', 'is_single', 'is_page', 'is_archive', 'is_category',
            'is_tag', 'is_tax', 'is_author', 'is_search', 'is_404'
        ];
        foreach ($wpFunctions as $function) {
            if (function_exists($function)) {
                $this->addFunction($function, $function, ['is_safe' => ['html']]);
            }
        }
        $this->addFunction('__', function($text, $domain = 'default') {
            return __($text, $domain);
        }, ['is_safe' => ['html']]);
        $this->addFunction('_e', function($text, $domain = 'default') {
            return _e($text, $domain);
        }, ['is_safe' => ['html']]);
        $this->addFunction('_n', function($single, $plural, $number, $domain = 'default') {
            return _n($single, $plural, $number, $domain);
        }, ['is_safe' => ['html']]);
        $this->addFilter('esc_html', 'esc_html');
        $this->addFilter('esc_attr', 'esc_attr');
        $this->addFilter('esc_url', 'esc_url');
        $this->addFilter('esc_js', 'esc_js');
        $this->addFilter('wp_kses_post', 'wp_kses_post', ['is_safe' => ['html']]);
    }
}

================
File: src/Helpers/TwigHelperInterface.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Helpers;
defined('ABSPATH') || exit();
interface TwigHelperInterface
{
    public function createInstance(): \Twig\Environment;
    public function addPath(string $path, string $namespace): void;
    public function addExtension(\Twig\Extension\ExtensionInterface $extension): void;
    public function addFilter(string $name, callable $callback, array $options = []): void;
    public function addFunction(string $name, callable $callback, array $options = []): void;
}

================
File: src/Integrations/WooCommerce.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Integrations;
defined('ABSPATH') || exit();
class WooCommerce
{
    public function __construct() {}
    public function getTopLevelCategories(string $defaultImageURL): array
    {
        $args = array(
            'taxonomy'     => 'product_cat',
            'hide_empty'   => true,
            'parent'       => 0
        );
        $top_categories = get_terms($args);
        if (!is_wp_error($top_categories)) {
            foreach ($top_categories as $category) {
                if ($category->name !== 'بدون دسته‌بندی') {
                    $categories[$category->term_id]['id'] = $category->term_id;
                    $categories[$category->term_id]['name'] = $category->name;
                    $categories[$category->term_id]['description'] = $category->description;
                    $categories[$category->term_id]['products_count'] = $category->count;
                    $categories[$category->term_id]['link'] = get_term_link($category);
                    $categories[$category->term_id]['image_url'] = '';
                    $thumbnail_id = get_term_meta($category->term_id, 'thumbnail_id', true);
                    if ($thumbnail_id) {
                        $categories[$category->term_id]['image_url'] = wp_get_attachment_url($thumbnail_id);
                    } else {
                        $categories[$category->term_id]['image_url'] = $defaultImageURL;
                    }
                }
            }
            return $categories;
        }
        return [];
    }
    public function getTopLevelCategoriesWithImages(): array
    {
        $args = array(
            'taxonomy'     => 'product_cat',
            'hide_empty'   => true,
            'parent'       => 0
        );
        $top_categories = get_terms($args);
        $categories = array();
        if (!is_wp_error($top_categories)) {
            foreach ($top_categories as $category) {
                if ($category->name === 'بدون دسته‌بندی') {
                    continue;
                }
                $thumbnail_id = get_term_meta($category->term_id, 'thumbnail_id', true);
                if (!$thumbnail_id) {
                    continue;
                }
                $image_url = wp_get_attachment_url($thumbnail_id);
                if (!$image_url) {
                    continue;
                }
                $categories[$category->term_id] = array(
                    'id' => $category->term_id,
                    'name' => $category->name,
                    'description' => $category->description,
                    'products_count' => $category->count,
                    'link' => get_term_link($category),
                    'image_url' => $image_url
                );
            }
            return $categories;
        }
        return [];
    }
    public function getLatestWooProducts(int $count = 6): array
    {
        $products_array = array();
        $args = array(
            'post_type'      => 'product',
            'posts_per_page' => $count,
            'orderby'        => 'date',
            'order'          => 'DESC',
            'post_status'    => 'publish',
        );
        $products = new \WP_Query($args);
        if ($products->have_posts()) {
            while ($products->have_posts()) {
                $products->the_post();
                global $product;
                $thumbnail_url = get_the_post_thumbnail_url(get_the_ID(), 'woocommerce_thumbnail');
                if (!$thumbnail_url) {
                    $thumbnail_url = wc_placeholder_img_src('woocommerce_thumbnail');
                }
                $categories = get_the_terms($product->get_id(), 'product_cat');
                $category_names = [];
                if ($categories && !is_wp_error($categories)) {
                    foreach ($categories as $category) {
                        $category_names[] = esc_html($category->name);
                    }
                }
                $is_on_sale = $product->is_on_sale();
                $is_featured = $product->is_featured();
                $is_free = ($product->get_price() == 0);
                $is_in_stock = $product->is_in_stock();
                $is_variable = $product->is_type('variable');
                $product_classes = esc_attr(implode(' ', wc_get_product_class('group relative flex flex-col overflow-hidden rounded-lg bg-white transition-all duration-300 hover:shadow-lg sm:min-h-[450px] product', $product)));
                $permalink = esc_url(get_permalink($product->get_id()));
                $product_name = esc_html($product->get_name());
                $price_html = wp_kses_post($product->get_price_html());
                $add_to_cart_text = esc_html($product->add_to_cart_text());
                $product_data = array(
                    'id'                => get_the_ID(),
                    'title'             => get_the_title(),
                    'name'              => $product_name,
                    'link'              => $permalink,
                    'image'             => $thumbnail_url,
                    'price'             => array(
                        'regular_price'     => $product->get_regular_price(),
                        'sale_price'        => $product->get_sale_price(),
                        'price'             => $product->get_price(),
                        'formatted_price'   => $price_html,
                    ),
                    'sku'               => $product->get_sku(),
                    'status'            => $product->get_stock_status(),
                    'in_stock'          => $is_in_stock,
                    'category_names'    => $category_names,
                    'is_on_sale'        => $is_on_sale,
                    'is_featured'       => $is_featured,
                    'is_free'           => $is_free,
                    'is_variable'       => $is_variable,
                    'product_classes'   => $product_classes,
                    'add_to_cart_text'  => $add_to_cart_text,
                );
                $products_array[] = $product_data;
            }
            wp_reset_postdata();
        }
        return $products_array;
    }
}

================
File: src/Language/lang/en_US.php
================
<?php
return [
    'pagination_prev'         => '&laquo; Previous',
    'pagination_next'         => 'Next &raquo;',
    'pagination_navigation'   => 'Posts navigation',
    'home'                    => 'Home',
    'breadcrumbs_aria'        => 'Breadcrumbs',
    'search_results_for'      => 'Search results for',
    'error_404'               => '404 Not Found',
    'submit_comment'          => 'Submit Comment',
    'send'                    => 'Send',
    'read_more'               => 'Read More',
    'no_results_found'        => 'No results found',
    'author'                  => 'Author',
    'date'                    => 'Date',
    'tags'                    => 'Tags',
    'categories'              => 'Categories',
    'invalid_request'    => 'Invalid request.',
    'invalid_endpoint'   => 'Invalid endpoint.',
    'middleware_failed'  => 'Middleware check failed.',
    'endpoint_failed'    => 'Endpoint execution failed.',
    'validator_required'      => 'The :field field is required.',
    'validator_email'         => 'The :field field must be a valid email address.',
    'validator_url'           => 'The :field field must be a valid URL.',
    'validator_numeric'       => 'The :field field must be a number.',
    'validator_integer'       => 'The :field field must be an integer.',
    'validator_min'           => 'The :field field must be at least :min characters.',
    'validator_max'           => 'The :field field must not exceed :max characters.',
    'validator_between'       => 'The :field field must be between :min and :max characters.',
    'validator_in'            => 'The selected :field is invalid.',
    'validator_not_in'        => 'The selected :field is invalid.',
    'validator_regex'         => 'The :field format is invalid.',
    'validator_date'          => 'The :field field must be a valid date.',
    'validator_date_format'   => 'The :field field must match the format :format.',
    'validator_before'        => 'The :field field must be a date before :date.',
    'validator_after'         => 'The :field field must be a date after :date.',
    'validator_same'          => 'The :field field must match the :other field.',
    'validator_different'     => 'The :field field must be different from the :other field.',
    'validator_unique'        => 'The :field has already been taken.',
    'validator_exists'        => 'The selected :field is invalid.',
    'validator_wp_nonce'      => 'Invalid WordPress nonce.',
    'validator_wp_cap'        => 'You do not have permission.',
    'validator_file_type'     => 'Invalid file type.',
    'validator_file_size'     => 'File size exceeds the allowed maximum.',
    'validator_file_image'    => 'Only image files are allowed.',
    'validator_recaptcha'     => 'Recaptcha validation failed.',
    'validator_honeypot'      => 'Form submission failed.',
    'validator_default'       => 'The :field field is invalid.',
    'Theme Settings'                  => 'Theme Settings',
    'ACF Pro plugin is required for Theme Settings management.' => 'ACF Pro plugin is required for Theme Settings management.',
    'view_all_posts_in' => 'View all posts in %s',
];

================
File: src/Language/lang/fa_IR.php
================
<?php
return [
    'pagination_prev'         => 'قبلی',
    'pagination_next'         => 'بعدی',
    'pagination_navigation'   => 'ناوبری نوشته‌ها',
    'home'                    => 'خانه',
    'breadcrumbs_aria'        => 'مسیر صفحه',
    'search_results_for'      => 'نتایج جستجو برای',
    'error_404'               => 'یافت نشد',
    'submit_comment'          => 'ارسال نظر',
    'send'                    => 'ارسال',
    'read_more'               => 'ادامه مطلب',
    'no_results_found'        => 'هیچ نتیجه‌ای یافت نشد',
    'author'                  => 'نویسنده',
    'date'                    => 'تاریخ',
    'tags'                    => 'برچسب‌ها',
    'categories'              => 'دسته‌بندی‌ها',
    'invalid_request'    => 'درخواست نامعتبر است.',
    'invalid_endpoint'   => 'نقطه پایانی (endpoint) نامعتبر است.',
    'middleware_failed'  => 'خطا در بررسی اعتبار میانی (middleware).',
    'endpoint_failed'    => 'اجرا کردن نقطه پایانی با خطا مواجه شد.',
    'validator_required'      => 'فیلد :field اجباری است.',
    'validator_email'         => 'فیلد :field باید یک ایمیل معتبر باشد.',
    'validator_url'           => 'فیلد :field باید یک آدرس اینترنتی معتبر باشد.',
    'validator_numeric'       => 'فیلد :field باید یک عدد باشد.',
    'validator_integer'       => 'فیلد :field باید یک عدد صحیح باشد.',
    'validator_min'           => 'فیلد :field باید حداقل :min نویسه باشد.',
    'validator_max'           => 'فیلد :field نباید بیش از :max نویسه باشد.',
    'validator_between'       => 'فیلد :field باید بین :min و :max نویسه باشد.',
    'validator_in'            => 'مقدار انتخابی :field نامعتبر است.',
    'validator_not_in'        => 'مقدار انتخابی :field نامعتبر است.',
    'validator_regex'         => 'فرمت فیلد :field نامعتبر است.',
    'validator_date'          => 'فیلد :field باید یک تاریخ معتبر باشد.',
    'validator_date_format'   => 'فرمت فیلد :field باید مطابق با :format باشد.',
    'validator_before'        => 'فیلد :field باید پیش از :date باشد.',
    'validator_after'         => 'فیلد :field باید بعد از :date باشد.',
    'validator_same'          => 'فیلد :field باید با فیلد :other برابر باشد.',
    'validator_different'     => 'فیلد :field باید با فیلد :other متفاوت باشد.',
    'validator_unique'        => 'فیلد :field قبلاً استفاده شده است.',
    'validator_exists'        => 'مقدار انتخابی :field نامعتبر است.',
    'validator_wp_nonce'      => 'توکن امنیتی وردپرس نامعتبر است.',
    'validator_wp_cap'        => 'شما مجوز لازم را ندارید.',
    'validator_file_type'     => 'نوع فایل انتخابی نامعتبر است.',
    'validator_file_size'     => 'حجم فایل بیش از حد مجاز است.',
    'validator_file_image'    => 'تنها فایل‌های تصویری مجاز هستند.',
    'validator_recaptcha'     => 'اعتبارسنجی Recaptcha با شکست مواجه شد.',
    'validator_honeypot'      => 'ارسال فرم انجام نشد.',
    'validator_default'       => 'مقدار فیلد :field نامعتبر است.',
    'Theme Settings'                  => 'تنظیمات قالب',
    'ACF Pro plugin is required for Theme Settings management.' => 'افزونه ACF Pro برای مدیریت تنظیمات قالب لازم است.',
    'view_all_posts_in' => 'مشاهده همه نوشته‌ها در %s',
];

================
File: src/Language/LanguageManager.php
================
<?php
namespace jamal13647850\wphelpers\Language;
use jamal13647850\wphelpers\Cache\CacheManager;
defined('ABSPATH') || exit;
class LanguageManager
{
    private static ?self $instance = null;
    private array $languages = [];
    private static array $translation_cache = [];
    private CacheManager $cache;
    private function __construct(?array $languages = null)
    {
        $this->languages = $languages ?: [
            'fa_IR' => 'فارسی',
            'en_US' => 'English',
        ];
        $this->cache = new CacheManager('transient', 'lang_', 24 * 3600);
    }
    public static function getInstance(?array $languages = null): self
    {
        if (!self::$instance) {
            self::$instance = new self($languages);
        }
        return self::$instance;
    }
    public function getCurrentLocale(): string
    {
        return get_locale();
    }
    public function getLanguages(): array
    {
        return $this->languages;
    }
    public function trans(string $key, ?string $locale = null, ?string $default = null): string
    {
        $locale = $locale ?: $this->getCurrentLocale();
        $translations = $this->getTranslationsCached($locale);
        if (isset($translations[$key]) && $translations[$key] !== '') {
            return $translations[$key];
        }
        // Fallback: try 'en_US'
        if ($locale !== 'en_US') {
            $en_trans = $this->getTranslationsCached('en_US');
            if (isset($en_trans[$key]) && $en_trans[$key] !== '') {
                return $en_trans[$key];
            }
        }
        // Fallback: default
        return $default ?? $key;
    }
    /**
     * Generate a language-suffixed field key (e.g. main_phone_fa_IR)
     * @param string $key
     * @param string|null $locale
     * @return string
     */
    public function localizedKey(string $key, ?string $locale = null): string
    {
        $locale = $locale ?: $this->getCurrentLocale();
        return "{$key}_{$locale}";
    }
    /**
     * Returns cached translation array. Invalidates automatically when file changes.
     * @param string $locale
     * @return array
     */
    private function getTranslationsCached(string $locale): array
    {
        $file_path = __DIR__ . "/lang/{$locale}.php";
        $file_mtime = file_exists($file_path) ? filemtime($file_path) : 0;
        $cache_key = "translations_{$locale}_{$file_mtime}";
        // 1. Try in-memory cache (fastest)
        if (
            isset(self::$translation_cache[$locale]) &&
            self::$translation_cache[$locale]['filemtime'] === $file_mtime
        ) {
            return self::$translation_cache[$locale]['translations'];
        }
        $array = $this->cache->get($cache_key);
        if (is_array($array)) {
            self::$translation_cache[$locale] = [
                'filemtime'    => $file_mtime,
                'translations' => $array,
            ];
            return $array;
        }
        $array = $this->loadLangFile($locale);
        $this->cache->set($cache_key, $array, 24*3600);
        $this->invalidateOldCache($locale, $file_mtime);
        self::$translation_cache[$locale] = [
            'filemtime'    => $file_mtime,
            'translations' => $array,
        ];
        return $array;
    }
    private function invalidateOldCache(string $locale, int $current_mtime): void
    {
    }
    private function loadLangFile(string $locale): array
    {
        $path = __DIR__ . "/lang/{$locale}.php";
        if (file_exists($path)) {
            $array = include $path;
            if (is_array($array)) return $array;
        }
        return [];
    }
}

================
File: src/Managers/CaptchaManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Managers;
defined('ABSPATH') || exit();
class CaptchaManager
{
    private View $view;
    private string $session_key;
    private bool $enabled;
    private string $difficulty;
    public function __construct(?View $view = null)
    {
        $this->view = $view ?? new View();
        $this->enabled = Config::get('captcha.enabled', true);
        $this->difficulty = Config::get('captcha.difficulty', 'medium');
        $this->session_key = Config::get('captcha.session_key', 'captcha_answer');
        if ($this->enabled) {
            add_action('wp_ajax_generate_captcha', [$this, 'ajax_generate_captcha']);
            add_action('wp_ajax_nopriv_generate_captcha', [$this, 'ajax_generate_captcha']);
            add_action('wp_ajax_verify_captcha', [$this, 'ajax_verify_captcha']);
            add_action('wp_ajax_nopriv_verify_captcha', [$this, 'ajax_verify_captcha']);
        }
    }
    public function generate_captcha(): array
    {
        if (!$this->enabled) {
            return ['enabled' => false];
        }
        $question = '';
        $answer = 0;
        switch ($this->difficulty) {
            case 'easy':
                $num1 = rand(1, 10);
                $num2 = rand(1, 10);
                $answer = $num1 + $num2;
                $question = "حاصل جمع $num1 و $num2 چند می‌شود؟";
                break;
            case 'medium':
                $num1 = rand(10, 50);
                $num2 = rand(10, 50);
                $answer = $num1 + $num2;
                $question = "حاصل جمع $num1 و $num2 چند می‌شود؟";
                break;
            case 'hard':
                $num1 = rand(10, 100);
                $num2 = rand(10, 100);
                $operator = rand(0, 1) ? '+' : '*';
                $answer = $operator === '+' ? $num1 + $num2 : $num1 * $num2;
                $question = "حاصل $num1 " . ($operator === '+' ? 'به علاوه' : 'ضرب در') . " $num2 چند می‌شود؟";
                break;
        }
        $transient_key = 'captcha_' . wp_generate_uuid4();
        set_transient($transient_key, $answer, 300);
        if (Config::get('captcha.debug', false)) {
            error_log("Generated CAPTCHA - Answer: $answer, Transient Key: $transient_key");
        }
        return [
            'enabled' => true,
            'question' => $question,
            'nonce' => wp_create_nonce('captcha_' . $this->difficulty),
            'transient_key' => $transient_key,
        ];
    }
    public function verify_captcha($user_answer, $nonce, $transient_key): bool
    {
        if (!$this->enabled) {
            return true;
        }
        if (Config::get('captcha.debug', false)) {
            error_log("Verifying CAPTCHA - User Answer: $user_answer (Type: " . gettype($user_answer) . "), Nonce: $nonce, Transient Key: $transient_key");
        }
        if (!wp_verify_nonce($nonce, 'captcha_' . $this->difficulty)) {
            if (Config::get('captcha.debug', false)) {
                error_log("Nonce verification failed");
            }
            return false;
        }
        $correct_answer = get_transient($transient_key);
        if (Config::get('captcha.debug', false)) {
            error_log("Correct Answer from Transient: " . ($correct_answer === false ? 'false' : $correct_answer) . " (Type: " . gettype($correct_answer) . ")");
        }
        delete_transient($transient_key);
        $user_answer_int = (int)$user_answer;
        $correct_answer_int = (int)$correct_answer;
        if (Config::get('captcha.debug', false)) {
            error_log("Converted - User Answer: $user_answer_int (Type: " . gettype($user_answer_int) . "), Correct Answer: $correct_answer_int (Type: " . gettype($correct_answer_int) . ")");
        }
        if ($correct_answer_int === false) {
            if (Config::get('captcha.debug', false)) {
                error_log("Transient returned false");
            }
            return false;
        }
        if ($user_answer_int === $correct_answer_int) {
            if (Config::get('captcha.debug', false)) {
                error_log("Answers match!");
            }
            return true;
        } else {
            if (Config::get('captcha.debug', false)) {
                error_log("Answers do not match - User: $user_answer_int, Correct: $correct_answer_int");
            }
            return false;
        }
    }
    public function ajax_generate_captcha(): void
    {
        $captcha = $this->generate_captcha();
        $template = Config::get('captcha.template', '@views/components/captcha.twig');
        $html = $this->view->render($template, ['captcha' => $captcha]);
        echo $html;
        wp_die();
    }
    public function ajax_verify_captcha(): void
    {
        $user_answer = isset($_POST['captcha_answer']) ? sanitize_text_field($_POST['captcha_answer']) : '';
        $nonce = isset($_POST['nonce']) ? $_POST['nonce'] : '';
        $transient_key = isset($_POST['transient_key']) ? $_POST['transient_key'] : '';
        $result = $this->verify_captcha($user_answer, $nonce, $transient_key);
        wp_send_json(['success' => $result]);
        wp_die();
    }
    public function render_captcha(array $context = []): string
    {
        if (!$this->enabled) {
            return '';
        }
        $captcha = $this->generate_captcha();
        $context['captcha'] = $captcha;
        $template = Config::get('captcha.template', '@views/components/captcha.twig');
        return $this->view->render($template, $context);
    }
    public static function register_settings(): void
    {
        add_action('admin_menu', function() {
            add_options_page(
                'تنظیمات کپچا',
                'کپچا',
                'manage_options',
                'wphelpers-captcha-settings',
                [__CLASS__, 'render_settings_page']
            );
        });
        register_setting('wphelpers_captcha_group', 'wphelpers_captcha_enabled');
        register_setting('wphelpers_captcha_group', 'wphelpers_captcha_difficulty');
        register_setting('wphelpers_captcha_group', 'wphelpers_captcha_debug');
        add_action('admin_init', function() {
            $enabled = get_option('wphelpers_captcha_enabled', '1') === '1';
            $difficulty = get_option('wphelpers_captcha_difficulty', 'medium');
            $debug = get_option('wphelpers_captcha_debug', '0') === '1';
            Config::set('captcha.enabled', $enabled);
            Config::set('captcha.difficulty', $difficulty);
            Config::set('captcha.debug', $debug);
        });
    }
    public static function render_settings_page(): void
    {
        ?>
        <div class="wrap">
            <h1>تنظیمات کپچا</h1>
            <form method="post" action="options.php">
                <?php settings_fields('wphelpers_captcha_group'); ?>
                <?php do_settings_sections('wphelpers_captcha_group'); ?>
                <table class="form-table">
                    <tr>
                        <th>فعال کردن کپچا</th>
                        <td>
                            <input type="checkbox" name="wphelpers_captcha_enabled" value="1"
                                <?php checked(1, get_option('wphelpers_captcha_enabled', 1)); ?> />
                        </td>
                    </tr>
                    <tr>
                        <th>سطح سختی کپچا</th>
                        <td>
                            <select name="wphelpers_captcha_difficulty">
                                <option value="easy" <?php selected(get_option('wphelpers_captcha_difficulty', 'medium'), 'easy'); ?>>آسان</option>
                                <option value="medium" <?php selected(get_option('wphelpers_captcha_difficulty', 'medium'), 'medium'); ?>>متوسط</option>
                                <option value="hard" <?php selected(get_option('wphelpers_captcha_difficulty', 'medium'), 'hard'); ?>>سخت</option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th>حالت دیباگ</th>
                        <td>
                            <input type="checkbox" name="wphelpers_captcha_debug" value="1"
                                <?php checked(1, get_option('wphelpers_captcha_debug', 0)); ?> />
                            <p class="description">در حالت دیباگ، اطلاعات کپچا در لاگ سیستم ثبت می‌شود.</p>
                        </td>
                    </tr>
                </table>
                <?php submit_button(); ?>
            </form>
        </div>
        <?php
    }
    public function setEnabled(bool $enabled): void
    {
        $this->enabled = $enabled;
    }
    public function setDifficulty(string $difficulty): void
    {
        $this->difficulty = $difficulty;
    }
}

================
File: src/Managers/UserProfileManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Managers;
defined('ABSPATH') || exit();
class UserProfileManager
{
    private $wpdb;
    private string $table_name;
    public function __construct()
    {
        global $wpdb;
        $this->wpdb = $wpdb;
        $this->table_name = $wpdb->prefix . 'cafedentist_user_info';
        add_action('show_user_profile', [$this, 'add_custom_fields']);
        add_action('edit_user_profile', [$this, 'add_custom_fields']);
        add_action('personal_options_update', [$this, 'save_custom_fields']);
        add_action('edit_user_profile_update', [$this, 'save_custom_fields']);
        add_action('woocommerce_customer_save_address', [$this, 'sync_from_billing_phone'], 10, 2);
    }
    public function add_custom_fields($user)
    {
        $user_id = $user->ID;
        $billing_phone = get_user_meta($user_id, 'billing_phone', true);
        $data = $this->wpdb->get_row($this->wpdb->prepare(
            "SELECT birth_date, medical_code FROM {$this->table_name} WHERE user_id = %d",
            $user_id
        ));
        $birth_date = $data->birth_date ?? '';
        $medical_code = $data->medical_code ?? '';
        ?>
        <h3>اطلاعات اضافی کاربر</h3>
        <table class="form-table">
            <tr>
                <th><label for="birth_date">تاریخ تولد</label></th>
                <td>
                    <input type="text"
                           name="birth_date"
                           id="birth_date"
                           value="<?php echo esc_attr($birth_date); ?>"
                           class="regular-text">
                    <div id="birth_date_error" style="color: red;"></div>
                    <p class="description">اختیاری - فرمت: YYYY-MM-DD (مثال: 1364-08-12)</p>
                </td>
            </tr>
            <tr>
                <th><label for="medical_code">کد نظام پزشکی</label></th>
                <td>
                    <input type="text"
                           name="medical_code"
                           id="medical_code"
                           value="<?php echo esc_attr($medical_code); ?>"
                           class="regular-text">
                    <div id="medical_code_error" style="color: red;"></div>
                    <p class="description">اختیاری</p>
                </td>
            </tr>
        </table>
        <div id="profile_errors" style="color: red; margin-top: 10px;"></div>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const form = document.querySelector('form#your-profile');
                if (form) {
                    form.addEventListener('submit', function(event) {
                        let hasErrors = false;
                        let firstErrorField = null;
                        document.getElementById('profile_errors').innerHTML = '';
                        document.getElementById('billing_phone_error').innerHTML = '';
                        document.getElementById('birth_date_error').innerHTML = '';
                        document.getElementById('medical_code_error').innerHTML = '';
                        const billingPhone = document.getElementById('billing_phone').value.trim();
                        const birthDate = document.getElementById('birth_date').value.trim();
                        const medicalCode = document.getElementById('medical_code').value.trim();
                        if (!billingPhone) {
                            document.getElementById('billing_phone_error').innerHTML = 'شماره موبایل اجباری است.';
                            hasErrors = true;
                            if (!firstErrorField) firstErrorField = document.getElementById('billing_phone');
                        } else if (!/^09[0-9]{9}$/.test(billingPhone)) {
                            document.getElementById('billing_phone_error').innerHTML = 'شماره موبایل باید 11 رقم و با 09 شروع شود.';
                            hasErrors = true;
                            if (!firstErrorField) firstErrorField = document.getElementById('billing_phone');
                        }
                        if (birthDate) {
                            if (!/^\d{4}-\d{2}-\d{2}$/.test(birthDate)) {
                                document.getElementById('birth_date_error').innerHTML = 'فرمت تاریخ تولد باید YYYY-MM-DD باشد.';
                                hasErrors = true;
                                if (!firstErrorField) firstErrorField = document.getElementById('birth_date');
                            } else {
                                const [year, month, day] = birthDate.split('-').map(Number);
                                if (year < 1300 || year > 1500 || month < 1 || month > 12 || day < 1 || day > 31 ||
                                    (month > 6 && day > 30) || (month === 12 && day > 29)) {
                                    document.getElementById('birth_date_error').innerHTML = 'تاریخ تولد نامعتبر است.';
                                    hasErrors = true;
                                    if (!firstErrorField) firstErrorField = document.getElementById('birth_date');
                                }
                            }
                        }
                        if (medicalCode && !/^[a-zA-Z0-9_]{4,32}$/.test(medicalCode)) {
                            document.getElementById('medical_code_error').innerHTML = 'کد نظام پزشکی باید 4-32 کاراکتر و شامل حروف، اعداد یا _ باشد.';
                            hasErrors = true;
                            if (!firstErrorField) firstErrorField = document.getElementById('medical_code');
                        }
                        if (hasErrors) {
                            event.preventDefault();
                            document.getElementById('profile_errors').innerHTML = 'لطفاً خطاهای بالا را برطرف کنید.';
                            if (firstErrorField) {
                                firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                firstErrorField.focus();
                            }
                        }
                    });
                }
            });
        </script>
        <?php
    }
    public function save_custom_fields(int $user_id)
    {
        if (!current_user_can('edit_user', $user_id)) {
            return;
        }
        $billing_phone = sanitize_text_field($_POST['billing_phone'] ?? '');
        $birth_date = sanitize_text_field($_POST['birth_date'] ?? '');
        $medical_code = sanitize_text_field($_POST['medical_code'] ?? '');
        $normalized_billing = $this->normalize_phone_number($billing_phone);
        // ذخیره در جدول wp_cafedentist_user_info
        $this->wpdb->replace(
            $this->table_name,
            [
                'user_id' => $user_id,
                'mobile_number' => $normalized_billing,
                'birth_date' => $birth_date ?: null,
                'medical_code' => $medical_code,
                'status' => 'verified',
                'verification_code' => null,
            ],
            ['%d', '%s', '%s', '%s', '%s', '%s']
        );
        if ($normalized_billing) {
            update_user_meta($user_id, 'billing_phone', $normalized_billing);
            error_log("Updated billing_phone to $normalized_billing for user $user_id from profile");
        }
    }
    public function sync_from_billing_phone($user_id, $address_type)
    {
        if ($address_type !== 'billing') {
            return;
        }
        $billing_phone = get_user_meta($user_id, 'billing_phone', true);
        $normalized_billing = $this->normalize_phone_number($billing_phone);
        if ($normalized_billing) {
            $this->wpdb->replace(
                $this->table_name,
                [
                    'user_id' => $user_id,
                    'mobile_number' => $normalized_billing,
                    'birth_date' => null,
                    'medical_code' => null,
                    'status' => 'verified',
                    'verification_code' => null,
                ],
                ['%d', '%s', '%s', '%s', '%s', '%s']
            );
            error_log("Synced mobile_number to $normalized_billing from billing_phone for user $user_id");
        }
    }
    private function normalize_phone_number(?string $phone): ?string
    {
        if (empty($phone)) {
            return null;
        }
        $phone = preg_replace('/[^0-9+]/', '', $phone);
        if (substr($phone, 0, 3) === '+98') {
            $phone = '0' . substr($phone, 3);
        }
        if (strlen($phone) === 10 && substr($phone, 0, 1) === '9') {
            $phone = '0' . $phone;
        }
        return $phone;
    }
}

================
File: src/Models/CPTCategory.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Models;
defined('ABSPATH') || exit();
class CPTCategory{
	private string $catname,$catdesc,$caturl;
	private $catimage,$catenname;
	public function __construct(private int $catid,private string $taxonomyname){
		$this->getCategory();
		$post_id = $taxonomyname."_".$catid;
		$this->catimage = get_field('web24_product_cat_image', $post_id);
		$this->catenname = get_field('web24_pr_cat_en_name', $post_id);
	}
	private function getCategory(){
		$category = get_term_by( 'id', $this->catid, $this->taxonomyname );
		if ( ! is_wp_error( $category ) ) {
		    	$this->catname = $category->name;
		    	$this->catdesc = $category->description;
			$this->caturl = get_term_link( $category );
		}
	}
	public function getCatId(): int {
        	return $this->catid;
    	}
    	public function getCatName(): string {
        	return $this->catname;
    	}
    	public function getCatDesc(): string {
		return $this->catdesc;
	}
	public function getCatImage():array{
		return $this->catimage;
	}
	public function getCatEnName():string{
		return $this->catenname;
	}
	public function getCatUrl():string{
		return $this->caturl;
	}
}

================
File: src/Traits/CommentValidationTrait.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Traits;
defined('ABSPATH') || exit();
trait CommentValidationTrait
{
    private function verifyNonce(string $nonce, string $action): void
    {
        if (!isset($_SERVER['HTTP_X_CSRF_TOKEN']) || !wp_verify_nonce($_SERVER['HTTP_X_CSRF_TOKEN'], 'csrf_token')) {
            $this->view->render_with_exit($this->getResponseTemplate('invalid-csrf'), [], 400);
        }
        if (!wp_verify_nonce($nonce, $action)) {
            $this->view->render_with_exit(
                $this->getResponseTemplate('invalid-nonce'),
                [],
                400
            );
        }
    }
    private function verifyCaptcha(CaptchaManager $captchaManager, array $postData): void
    {
        $captcha_answer = isset($postData['captcha_answer']) ? sanitize_text_field($postData['captcha_answer']) : '';
        $captcha_nonce = isset($postData['captcha_nonce']) ? sanitize_text_field($postData['captcha_nonce']) : '';
        $captcha_transient_key = isset($postData['captcha_transient_key']) ? sanitize_text_field($postData['captcha_transient_key']) : '';
        if (!$captchaManager->verify_captcha($captcha_answer, $captcha_nonce, $captcha_transient_key)) {
            $this->view->render_with_exit(
                $this->getResponseTemplate('captcha-failed'),
                [],
                400
            );
        }
    }
    private function verifyHoneypot(array $postData): void
    {
        if (!empty($postData['hp_field'])) {
            $this->view->render_with_exit(
                $this->getResponseTemplate('honeypot-failed'),
                [],
                400
            );
        }
    }
    private function applyRateLimiting(string $transientPrefix): void
    {
        $user_ip = $_SERVER['REMOTE_ADDR'];
        $transient_key = $transientPrefix . '_rate_limit_' . md5($user_ip);
        $attempts = get_transient($transient_key);
        if ($attempts === false) {
            set_transient($transient_key, 1, 300);
        } elseif ($attempts >= 5) {
            $this->view->render_with_exit(
                $this->getResponseTemplate('rate-limit'),
                [],
                429
            );
        } else {
            set_transient($transient_key, $attempts + 1, 300);
        }
    }
    private function validateFields(array $fields, bool $isLoggedIn): void
    {
        $validator = new HTMX_Validator('html');
        if (!$isLoggedIn) {
            $fields['author_name'] = [
                'value' => $_POST['author_name'] ?? '',
                'rules' => ['required' => true]
            ];
            $fields['author_email'] = [
                'value' => $_POST['author_email'] ?? '',
                'rules' => ['required' => true, 'type' => 'email']
            ];
        }
        $validator->validate_all_fields($fields);
        if (!empty($validator->get_errors())) {
            $this->view->render_with_exit(
                $this->getResponseTemplate('validation-errors'),
                ['errors' => $validator->get_errors()],
                400
            );
        }
    }
    private function validateTextLength(string $text, int $minLength = 10, int $maxLength = 1000): void
    {
        $length = mb_strlen($text);
        if ($length < $minLength || $length > $maxLength) {
            $this->view->render_with_exit(
                $this->getResponseTemplate('invalid-length'),
                [],
                400
            );
        }
    }
    abstract protected function getResponseTemplate(string $responseType): string;
}

================
File: src/Utilities/Clear_Theme_Cache.php
================
<?php
namespace jamal13647850\wphelpers\Utilities;
if (!defined('ABSPATH')) {
    return;
}
class Clear_Theme_Cache
{
    public function __construct()
    {
        if (is_admin_bar_showing() && current_user_can('manage_options')) {
            add_action('admin_bar_menu', [$this, 'addAdminBarButton'], 100);
            add_action('admin_footer', [$this, 'printInlineScript']);
            add_action('wp_footer', [$this, 'printInlineScript']);
            add_action('wp_head', [$this, 'printAjaxUrl']);
        }
        add_action('wp_ajax_jg_clear_theme_cache', [$this, 'handleAjax']);
    }
    public function addAdminBarButton($wp_admin_bar): void
    {
        $args = [
            'id'    => 'jg-clear-theme-cache',
            'title' => '🧹 پاکسازی کش داخلی پوسته',
            'href'  => '#',
            'meta'  => [
                'title'   => 'تمام کش‌های داخلی پوسته (Transient) حذف خواهد شد',
                'onclick' => 'jgClearThemeCache(); return false;',
            ],
        ];
        $wp_admin_bar->add_node($args);
    }
    public function printInlineScript(): void
    {
        $nonce = wp_create_nonce('jg_clear_theme_cache');
        echo <<<JS
<script type="text/javascript">
function jgClearThemeCache() {
    if (!confirm('آیا مطمئن هستید که می‌خواهید تمام کش داخلی پوسته را پاک کنید؟')) return;
    var data = {
        action: 'jg_clear_theme_cache',
        _ajax_nonce: '{$nonce}'
    };
    jQuery.post(ajaxurl, data, function(response) {
        if (response.success) {
            alert('کش داخلی پوسته با موفقیت پاک شد!');
        } else {
            alert('پاکسازی کش با خطا مواجه شد: ' + (response.data || 'خطای ناشناخته'));
        }
    });
}
</script>
JS;
    }
    public function handleAjax(): void
    {
        check_ajax_referer('jg_clear_theme_cache');
        if (!current_user_can('manage_options')) {
            wp_send_json_error('دسترسی غیرمجاز.');
        }
        global $wpdb;
        $transient_names = $wpdb->get_col(
            "SELECT option_name FROM {$wpdb->options} WHERE option_name LIKE '\\_transient\\_%' OR option_name LIKE '\\_site\\_transient\\_%'"
        );
        $deleted_count = 0;
        foreach ($transient_names as $option) {
            if (delete_option($option)) {
                $deleted_count++;
            }
        }
        wp_cache_flush();
        wp_send_json_success(sprintf('تعداد %d کش داخلی حذف شد.', $deleted_count));
    }
    public function printAjaxUrl(): void
    {
        if (is_admin_bar_showing() && current_user_can('manage_options')) {
            $ajax_url = admin_url('admin-ajax.php');
            echo "<script type=\"text/javascript\">\n";
            echo "if (typeof ajaxurl === 'undefined') { var ajaxurl = '{$ajax_url}'; }\n";
            echo "</script>";
        }
    }
}

================
File: src/Utilities/UserMigration.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Utilities;
defined('ABSPATH') || exit();
class UserMigration
{
    private $wpdb;
    private string $table_name;
    private View $view;
    public function __construct(View $view)
    {
        global $wpdb;
        $this->wpdb = $wpdb;
        $this->table_name = $wpdb->prefix . 'cafedentist_user_info';
        $this->view = $view;
        add_action('user_register', [$this, 'sync_mobile_to_billing_phone']);
        add_action('profile_update', [$this, 'sync_mobile_to_billing_phone']);
        add_action('woocommerce_customer_save_address', [$this, 'sync_billing_to_mobile']);
        add_action('delete_user', [$this, 'delete_user_from_table']);
    }
    public function create_user_table(): bool
    {
        $charset_collate = $this->wpdb->get_charset_collate();
        $sql = "CREATE TABLE IF NOT EXISTS {$this->table_name} (
            user_id BIGINT(20) UNSIGNED NOT NULL,
            mobile_number VARCHAR(11) NOT NULL,
            birth_date VARCHAR(10) DEFAULT NULL,
            medical_code  VARCHAR(50) DEFAULT NULL,
            status ENUM('pending', 'verified') DEFAULT 'pending',
            verification_code VARCHAR(6) DEFAULT NULL,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id),
            UNIQUE KEY mobile_number (mobile_number)
        ) $charset_collate;";
        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        dbDelta($sql);
        return $this->wpdb->get_var("SHOW TABLES LIKE '{$this->table_name}'") === $this->table_name;
    }
    public function migrate_old_users(): array
    {
        $results = [
            'success' => 0,
            'failed' => 0,
            'duplicates' => 0,
            'invalid' => 0,
            'from_digits' => 0,
            'from_billing' => 0,
            'normalized' => 0,
        ];
        $users = $this->wpdb->get_results("
            SELECT u.ID AS user_id,
                   um1.meta_value AS digits_phone_no,
                   um2.meta_value AS billing_phone
            FROM {$this->wpdb->users} u
            LEFT JOIN {$this->wpdb->usermeta} um1 ON u.ID = um1.user_id AND um1.meta_key = 'digits_phone_no'
            LEFT JOIN {$this->wpdb->usermeta} um2 ON u.ID = um2.user_id AND um2.meta_key = 'billing_phone'
        ");
        foreach ($users as $user) {
            $mobile = null;
            $source = null;
            if (!empty($user->digits_phone_no)) {
                $mobile = $this->normalize_phone_number($user->digits_phone_no);
                $source = 'digits';
            } elseif (!empty($user->billing_phone)) {
                $mobile = $this->normalize_phone_number($user->billing_phone);
                $source = 'billing';
            }
            if ($mobile && preg_match('/^09[0-9]{9}$/', $mobile)) {
                $inserted = $this->wpdb->replace(
                    $this->table_name,
                    [
                        'user_id' => $user->user_id,
                        'mobile_number' => $mobile,
                        'birth_date' => null,
                        'medical_code' => null,
                        'status' => 'verified',
                        'verification_code' => null,
                    ]
                );
                if ($inserted === false) {
                    error_log("Failed to migrate user {$user->user_id}: " . $this->wpdb->last_error);
                    $results['failed']++;
                } elseif ($inserted === 0) {
                    $results['duplicates']++;
                } else {
                    $results['success']++;
                    $source === 'digits' ? $results['from_digits']++ : $results['from_billing']++;
                    if ($mobile !== ($user->digits_phone_no ?? $user->billing_phone)) {
                        $results['normalized']++;
                    }
                    $this->sync_mobile_to_billing_phone((int)$user->user_id);
                }
            } else {
                error_log("Invalid or missing mobile for user {$user->user_id}: digits={$user->digits_phone_no}, billing={$user->billing_phone}");
                $results['invalid']++;
            }
        }
        return $results;
    }
    public function delete_old_data(): int
    {
        $meta_keys = ['digits_phone', 'digits_phone_no', 'digits_form_data', 'digits_migrate_shown'];
        $placeholders = implode(',', array_fill(0, count($meta_keys), '%s'));
        $deleted = $this->wpdb->query(
            $this->wpdb->prepare(
                "DELETE FROM {$this->wpdb->usermeta} WHERE meta_key IN ($placeholders)",
                $meta_keys
            )
        );
        if ($deleted === false) {
            error_log("Failed to delete old data: " . $this->wpdb->last_error);
            return 0;
        }
        return $deleted;
    }
    public function sync_mobile_to_billing_phone(int $user_id): void
    {
        $record = $this->wpdb->get_row($this->wpdb->prepare(
            "SELECT mobile_number, status FROM {$this->table_name} WHERE user_id = %d",
            $user_id
        ));
        if ($record && $record->status === 'verified') {
            update_user_meta($user_id, 'billing_phone', $record->mobile_number);
        }
    }
    public function sync_billing_to_mobile(int $user_id): void
    {
        $billing_phone = get_user_meta($user_id, 'billing_phone', true);
        $current_record = $this->wpdb->get_row($this->wpdb->prepare(
            "SELECT mobile_number, status FROM {$this->table_name} WHERE user_id = %d",
            $user_id
        ));
        if ($billing_phone && $billing_phone !== ($current_record->mobile_number ?? '')) {
            $normalized_phone = $this->normalize_phone_number($billing_phone);
            $validator = new HTMX_Validator();
            $validator->validate_mobile($normalized_phone);
            if (empty($validator->get_errors())) {
                $verification_code = sprintf("%06d", rand(0, 999999));
                $this->wpdb->replace(
                    $this->table_name,
                    [
                        'user_id' => $user_id,
                        'mobile_number' => $normalized_phone,
                        'status' => 'pending',
                        'verification_code' => $verification_code,
                    ]
                );
                $this->send_verification_sms($normalized_phone, $verification_code);
            }
        }
    }
    private function send_verification_sms(string $mobile, string $code): void
    {
        $sms = new \jamal13647850\smsapi\SMS(new \jamal13647850\smsapi\FarazSMS(
            FARAZSMS_USERNAME,
            FARAZSMS_PASSWORD,
            FARAZSMS_FROM_NUMBER,
            FARAZSMS_URL
        ));
        $sms->sendSMSByPattern($mobile, '', FARAZSMS_PATTERN, ['code' => $code]);
    }
    private function normalize_phone_number(?string $phone): ?string
    {
        if (empty($phone)) {
            return null;
        }
        $phone = preg_replace('/[^0-9+]/', '', $phone);
        // اگر با +98 شروع می‌شه، تبدیل به 0
        if (substr($phone, 0, 3) === '+98') {
            $phone = '0' . substr($phone, 3);
        }
        if (strlen($phone) === 10 && substr($phone, 0, 1) === '9') {
            $phone = '0' . $phone;
        }
        return $phone;
    }
    public function delete_user_from_table(int $user_id): void
    {
        $deleted = $this->wpdb->delete(
            $this->table_name,
            ['user_id' => $user_id],
            ['%d']
        );
        if ($deleted === false) {
            error_log("Failed to delete user $user_id from {$this->table_name}: " . $this->wpdb->last_error);
        } else {
            error_log("Successfully deleted user $user_id from {$this->table_name}");
        }
    }
}

================
File: src/Views/ViewInterface.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Views;
defined('ABSPATH') || exit();
interface ViewInterface
{
    public function render(string $template, array $data = []): string;
    public function display(string $template, array $data = []): void;
    public function render_with_exit(string $template, array $data = [], int $status = 200): void;
    public function addExtension(\Twig\Extension\ExtensionInterface $extension): void;
    public function addFilter(string $name, callable $callback, array $options = []): void;
    public function addFunction(string $name, callable $callback, array $options = []): void;
    public function addPath(string $path, string $namespace): void;
}

================
File: composer.json
================
{
    "name": "jamal13647850/wp-helpers",
    "description": "مجموعه‌ای از کلاس‌های کمکی و ابزارها برای توسعه قالب‌ها و پلاگین‌های وردپرس.",
    "type": "library",
    "license": "GPL-2.0-or-later",
    "authors": [
        {
            "name": "Sayyed Jamal Ghasemi",
            "email": "jamal13647850@gmail.com" 
        }
    ],
    "minimum-stability": "dev",
    "prefer-stable": true,
    "require": {
        "php": ">=7.4",
        "twig/twig": "^3.0",
        "jamal13647850/sms-api": "^2.4"
    },
    "autoload": {

        "psr-4": {

            "jamal13647850\\wphelpers\\": "src/" 

        }

    },
    "config": {
        "platform": {
            "php": "7.4"
        }
    },
    "repositories": [
        {
            "type": "vcs",
            "url": "https://github.com/jamal13647850/smsapi" 
        }
    ]
}

================
File: src/Components/Menu/Variants/MobileMenu.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu\Variants;
use jamal13647850\wphelpers\Components\Menu\AbstractMenu;
final class MobileMenu extends AbstractMenu
{
    protected static function defaultOptions(): array
    {
        return [
            'menu_id'        => 'primary-menu-mobile',
            'menu_class'     => 'space-y-2',
            'aria_label'     => 'ناوبری موبایل',
            'items_wrap'     => '<ul id="%1$s" class="%2$s" x-data="{ activeMenu: null }" aria-label="%s">%3$s</ul>',
            'echo'           => false,
            'fallback_cb'    => false,
        ];
    }
    public function render(
        string $themeLocation,
        array $options = [],
        array $walkerOptions = []
    ): string {
        $opts = $this->makeOptions($options);
        $args = $opts->toArray();
        $args['theme_location'] = $themeLocation;
        $args['walker'] = $this->makeWalker('mobile', $walkerOptions);
        $aria_label = esc_attr__(
            $opts->get('aria_label'),
            'your-theme-textdomain'
        );
        $args['items_wrap'] =
            '<ul  x-data="{ activeMenu: null }" aria-label="' . $aria_label . '" id="%1$s" class="%2$s">%3$s</ul>';
        return (string) wp_nav_menu($args);
    }
}

================
File: src/Components/Menu/Variants/MultiColumnDesktopMenu.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Menu\Variants;
use jamal13647850\wphelpers\Components\Menu\AbstractMenu;
final class MultiColumnDesktopMenu extends AbstractMenu
{
    protected static function defaultOptions(): array
    {
        return [
            'menu_id'                => 'multi-column-desktop-menu',
            'menu_class'             => 'nav-menu',
            'aria_label'             => 'منوی اصلی',
            'dropdown_columns'       => 2,
            'enable_icons'           => true,
            'dropdown_trigger_class' => 'nav-link dropdown-trigger',
            'dropdown_link_class'    => 'dropdown-link',
            'dropdown_arrow_class'   => 'dropdown-arrow fas fa-chevron-down',
            'echo'                   => false,
            'fallback_cb'            => false,
        ];
    }
    public function render(
        string $themeLocation,
        array $options = [],
        array $walkerOptions = []
    ): string {
        $opts = $this->makeOptions($options);
        $walkerVariantOptions = [
            'dropdown_columns'       => (int) $opts->get('dropdown_columns'),
            'enable_icons'           => (bool) $opts->get('enable_icons'),
            'dropdown_trigger_class' => (string) $opts->get('dropdown_trigger_class'),
            'dropdown_link_class'    => (string) $opts->get('dropdown_link_class'),
            'dropdown_arrow_class'   => (string) $opts->get('dropdown_arrow_class'),
        ];
        $args = [
            'theme_location' => $themeLocation,
            'menu_id'        => (string) $opts->get('menu_id'),
            'menu_class'     => (string) $opts->get('menu_class'),
            'container'      => false,
            'fallback_cb'    => (bool) $opts->get('fallback_cb'),
            'echo'           => (bool) $opts->get('echo'),
        ];
        $args['walker'] = $this->makeWalker(
            'multi-column-desktop',
            array_merge($walkerVariantOptions, $walkerOptions)
        );
        $args['items_wrap'] = sprintf(
            '<ul id="%%1$s" class="%%2$s" aria-label="%s">%%3$s</ul>',
            esc_attr__($opts->get('aria_label'), 'your-theme-textdomain')
        );
        return (string) wp_nav_menu($args);
    }
}

================
File: src/Components/Slider/Variants/WideAuto/WideAuto.php
================
<?php
namespace jamal13647850\wphelpers\Components\Slider\Variants\WideAuto;
use jamal13647850\wphelpers\Components\Slider\AbstractSlider;
use jamal13647850\wphelpers\Components\Slider\Options\SliderOptions;
final class WideAuto extends AbstractSlider
{
    protected const TEMPLATE_NAMESPACE = '@slider_wide_auto';
    protected static function getViewsPath(): string
    {
        return __DIR__ . '/views';
    }
    protected static function defaultOptions(): array
    {
        return [
            'interval' => 5000,
            'height'   => 530,
        ];
    }
      protected static function assets(): array
    {
        $baseUri = get_stylesheet_directory_uri() . '/assets/slider/wide-auto';
        return [
            'styles' => [
                [
                    'handle' => 'slider-wide-auto',
                    'src'    => $baseUri . '.css',
                    'deps'   => [],
                    'ver'    => '1.0.0',
                ],
            ],
            'scripts' => [
                [
                    'handle' => 'slider-wide-auto',
                    'src'    => $baseUri . '.js',
                    'deps'   => ['alpinejs'],
                    'ver'    => '1.0.0',
                    'footer' => true,
                ],
            ],
        ];
    }
    public function render(array $slides, array $options = []): string
    {
        $optionsVO = $this->makeOptions($options);
        $slides = $this->sanitizeSlides($slides);
        $this->enqueueAssets();
        $heightClass = 'max-h-[' . (int) $optionsVO->get('height') . 'px]';
        return $this->view->render(
            self::TEMPLATE_NAMESPACE . '/wide-auto.twig',
            [
                'slides'      => $slides,
                'interval'    => (int) $optionsVO->get('interval'),
                'heightClass' => $heightClass,
            ]
        );
    }
}

================
File: src/Components/Slider/SliderManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Components\Slider;
use InvalidArgumentException;
use jamal13647850\wphelpers\Components\Slider\AbstractSlider;
final class SliderManager
{
    private static array $map = [];
    public static function register(string $key, string $class): void
    {
        if (!is_subclass_of($class, AbstractSlider::class)) {
            throw new InvalidArgumentException("{$class} باید از AbstractSlider ارث‌بری کند.");
        }
        self::$map[$key] = $class;
    }
    public static function make(string $key): AbstractSlider
    {
        if (!isset(self::$map[$key])) {
            throw new InvalidArgumentException("اسلایدر با کلید [{$key}] ثبت نشده است.");
        }
        $class = self::$map[$key];
        return new $class();
    }
    public static function render(string $key, array $slides = [], array $options = []): string
    {
        do_action_ref_array('slider/before_render', [&$key, &$slides, &$options]);
        do_action_ref_array("slider/before_render_{$key}", [&$slides, &$options]);
        $html = self::make($key)->render($slides, $options);
        do_action('slider/after_render', $key, $html, $slides, $options);
        do_action("slider/after_render_{$key}", $html, $slides, $options);
        return $html;
    }
}

================
File: src/Managers/CartManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Managers;
defined('ABSPATH') || exit();
class CartManager
{
    private $wpdb;
    public function __construct()
    {
        global $wpdb;
        $this->wpdb = $wpdb;
        add_action('wp_ajax_add_to_cart_ajax', [$this, 'handle_add_to_cart_ajax']);
        add_action('wp_ajax_nopriv_add_to_cart_ajax', [$this, 'handle_add_to_cart_ajax']);
        add_action('wp_ajax_add_to_cart_single_ajax', [$this, 'handle_add_to_cart_single_ajax']);
        add_action('wp_ajax_nopriv_add_to_cart_single_ajax', [$this, 'handle_add_to_cart_single_ajax']);
    }
    public function handle_add_to_cart_ajax()
    {
        $view = new \jamal13647850\wphelpers\Views\View();
        $product_id = isset($_POST['product_id']) ? intval($_POST['product_id']) : 0;
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'wc_add_to_cart_' . $product_id)) {
            $data = [
                'ajax_url' => admin_url('admin-ajax.php'),
                'product_id' => $product_id,
                'nonce' => wp_create_nonce('wc_add_to_cart_' . $product_id),
                'error' => 'خطای امنیتی: نانس نامعتبر'
            ];
            $view->display('@views/components/addToCartButton.twig', $data);
            wp_die();
        }
        if (!$product_id) {
            $data = [
                'ajax_url' => admin_url('admin-ajax.php'),
                'product_id' => $product_id,
                'nonce' => wp_create_nonce('wc_add_to_cart_' . $product_id),
                'error' => 'شناسه محصول نامعتبر است'
            ];
            $view->display('@views/components/addToCartButton.twig', $data);
            wp_die();
        }
        $product = wc_get_product($product_id);
        if (!$product) {
            $data = [
                'ajax_url' => admin_url('admin-ajax.php'),
                'product_id' => $product_id,
                'nonce' => wp_create_nonce('wc_add_to_cart_' . $product_id),
                'error' => 'محصول یافت نشد'
            ];
            $view->display('@views/components/addToCartButton.twig', $data);
            wp_die();
        }
        if ($product->is_type('variable')) {
            $data = [
                'ajax_url' => admin_url('admin-ajax.php'),
                'product_id' => $product_id,
                'nonce' => wp_create_nonce('wc_add_to_cart_' . $product_id),
                'permalink' => esc_url($product->get_permalink()),
                'is_variable' => true
            ];
            $view->display('@views/components/addToCartButton.twig', $data);
        } else {
            $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;
            $added = WC()->cart->add_to_cart($product_id, $quantity);
            if ($added) {
                $cart_count = WC()->cart->get_cart_contents_count();
                $data = [
                    'ajax_url' => admin_url('admin-ajax.php'),
                    'product_id' => $product_id,
                    'nonce' => wp_create_nonce('wc_add_to_cart_' . $product_id),
                    'cart_count' => $cart_count,
                    'message' => 'محصول با موفقیت به سبد اضافه شد!',
                    'is_variable' => false
                ];
                $view->display('@views/components/addToCartButton.twig', $data);
            } else {
                $data = [
                    'ajax_url' => admin_url('admin-ajax.php'),
                    'product_id' => $product_id,
                    'nonce' => wp_create_nonce('wc_add_to_cart_' . $product_id),
                    'error' => 'خطا در افزودن به سبد خرید',
                    'is_variable' => false
                ];
                $view->display('@views/components/addToCartButton.twig', $data);
            }
        }
        wp_die();
    }
    function handle_add_to_cart_single_ajax() {
        $product_id = isset($_POST['product_id']) ? intval($_POST['product_id']) : 0;
        $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;
        $variation_id = isset($_POST['variation_id']) ? intval($_POST['variation_id']) : 0;
        $attributes = [];
        foreach ($_POST as $key => $value) {
            if (strpos($key, 'attribute_') === 0) {
                $attributes[$key] = sanitize_text_field($value);
            }
        }
        if (!$product_id) {
            echo '<span class="text-red-500">خطا: شناسه محصول نامعتبر است.</span>';
            wp_die();
        }
        $product = wc_get_product($product_id);
        if (!$product) {
            echo '<span class="text-red-500">خطا: محصول یافت نشد.</span>';
            wp_die();
        }
        $passed_validation = apply_filters('woocommerce_add_to_cart_validation', true, $product_id, $quantity, $variation_id, $attributes);
        if ($passed_validation && WC()->cart->add_to_cart($product_id, $quantity, $variation_id, $attributes)) {
            $cart_url = wc_get_cart_url();
            $message = '<div class="text-green-500">محصول با موفقیت به سبد خرید اضافه شد!</div>';
            $message .= '<a href="' . esc_url($cart_url) . '" class="inline-block mt-2 bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors">مشاهده سبد خرید</a>';
        } else {
            $notices = wc_get_notices('error');
            wc_clear_notices();
            if (empty($notices)) {
                $message = '<span class="text-red-500">خطا در افزودن به سبد خرید. لطفاً دوباره تلاش کنید.</span>';
            } else {
                $message = '';
                foreach ($notices as $notice) {
                    switch (true) {
                        case strpos($notice['notice'], 'required') !== false || strpos($notice['notice'], 'variation') !== false:
                            $message .= '<span class="text-red-500">لطفاً ویژگی‌های محصول را انتخاب کنید.</span>';
                            break;
                        case strpos($notice['notice'], 'stock') !== false:
                            $message .= '<span class="text-red-500">موجودی محصول در انبار کافی نیست.</span>';
                            break;
                        default:
                            $message .= '<span class="text-red-500">' . wp_kses_post($notice['notice']) . '</span>';
                            break;
                    }
                }
            }
        }
        echo $message;
        wp_die();
    }
}

================
File: src/Managers/QuickViewManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Managers;
defined('ABSPATH') || exit();
class QuickViewManager
{
    private $wpdb;
    public function __construct()
    {
        global $wpdb;
        $this->wpdb = $wpdb;
        add_action('wp_ajax_load_quick_view_content', [$this, 'handle_quick_view_content']);
        add_action('wp_ajax_nopriv_load_quick_view_content', [$this, 'handle_quick_view_content']);
    }
    public function handle_quick_view_content()
    {
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'wc_quick_view_' . $_POST['product_id'])) {
            status_header(403);
            echo '<p>خطای امنیتی: نانس نامعتبر است.</p>';
            wp_die();
        }
        $product_id = isset($_POST['product_id']) ? intval($_POST['product_id']) : 0;
        $product = wc_get_product($product_id);
        if (!$product) {
            echo '<p>محصول یافت نشد.</p>';
            wp_die();
        }
        $data = [
            'product_id' => $product_id,
            'product_name' => esc_html($product->get_name()),
            'short_description' => wp_kses_post($product->get_short_description()),
            'price_html' => wp_kses_post($product->get_price_html()),
            'image_url' => esc_url(wp_get_attachment_url($product->get_image_id())),
            'permalink' => esc_url($product->get_permalink()),
            'quick_view_nonce' => wp_create_nonce('wc_quick_view_' . $product_id),
        ];
        $view = new \jamal13647850\wphelpers\Views\View();
        $view->display("@views/components/quickview/quickViewModal.twig", $data);
        wp_die();
    }
}

================
File: src/Managers/WishlistManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Managers;
defined('ABSPATH') || exit();
class WishlistManager
{
    private $wpdb;
    private $table_name;
    private static $table_version = '2.0';
    private $cache_group = 'wishlist_manager';
    private $cache_time = 3600;
    public function __construct()
    {
        global $wpdb;
        $this->wpdb = $wpdb;
        $this->table_name = $wpdb->prefix . 'custom_wishlist';
        add_action('wp_ajax_toggle_wishlist', [$this, 'handle_toggle_wishlist']);
        add_action('wp_ajax_nopriv_toggle_wishlist', [$this, 'handle_toggle_wishlist']);
        add_action('wp_ajax_remove_from_wishlist', [$this, 'handle_remove_from_wishlist']);
        add_action('wp_ajax_nopriv_remove_from_wishlist', [$this, 'handle_remove_from_wishlist']);
        $this->maybe_create_table();
    }
    public function getWishlistData()
    {
        if (!is_user_logged_in()) {
            return [
                'is_logged_in' => false,
                'items' => []
            ];
        }
        $table_name = $this->wpdb->prefix . 'custom_wishlist';
        $user_id = get_current_user_id();
        $wishlist_items = $this->wpdb->get_results($this->wpdb->prepare(
            "SELECT product_id FROM $table_name WHERE user_id = %d",
            $user_id
        ));
        $products = [];
        foreach ($wishlist_items as $item) {
            $product = wc_get_product($item->product_id);
            if (!$product) continue;
            $products[] = [
                'id' => $product->get_id(),
                'name' => $product->get_name(),
                'price_html' => $product->get_price_html(),
                'permalink' => $product->get_permalink(),
                'image' => $product->get_image('woocommerce_thumbnail'),
                'add_to_cart_url' => $product->add_to_cart_url(),
                'is_in_stock' => $product->is_in_stock(),
                'nonce' => wp_create_nonce('wishlist-nonce')
            ];
        }
        return [
            'is_logged_in' => true,
            'items' => $products,
            'ajax_url' => admin_url('admin-ajax.php')
        ];
    }
    public function check_if_product_is_wishlisted($product_id)
    {
        if (!is_user_logged_in()) {
            return false;
        }
        $user_id = get_current_user_id();
        $result = $this->wpdb->get_var($this->wpdb->prepare(
            "SELECT EXISTS(SELECT 1 FROM {$this->table_name} WHERE user_id = %d AND product_id = %d)",
            $user_id,
            $product_id
        ));
        return (bool) $result;
    }
    public function toggle_wishlist($product_id)
    {
        if (!is_user_logged_in()) {
            return [
                'success' => false,
                'message' => 'لطفا ابتدا وارد شوید.'
            ];
        }
        $user_id = get_current_user_id();
        if (!wc_get_product($product_id)) {
            return [
                'success' => false,
                'message' => 'محصول یافت نشد.'
            ];
        }
        if ($this->check_if_product_is_wishlisted($product_id)) {
            $result = $this->wpdb->delete(
                $this->table_name,
                [
                    'user_id' => $user_id,
                    'product_id' => $product_id
                ],
                ['%d', '%d']
            );
            if ($result !== false) {
                return [
                    'success' => true,
                    'action' => 'removed',
                    'message' => 'محصول از لیست علاقه‌مندی‌ها حذف شد.'
                ];
            }
        } else {
            $result = $this->wpdb->insert(
                $this->table_name,
                [
                    'user_id' => $user_id,
                    'product_id' => $product_id,
                    'date_added' => current_time('mysql')
                ],
                ['%d', '%d', '%s']
            );
            if ($result !== false) {
                return [
                    'success' => true,
                    'action' => 'added',
                    'message' => 'محصول به لیست علاقه‌مندی‌ها اضافه شد.'
                ];
            }
        }
        return [
            'success' => false,
            'message' => 'خطایی رخ داد. لطفا دوباره تلاش کنید.'
        ];
    }
    private function maybe_create_table()
    {
        $version = get_option('wishlist_table_version');
        if ($version && version_compare($version, self::$table_version, '>=')) {
            return;
        }
        $this->create_table();
        update_option('wishlist_table_version', self::$table_version);
    }
    private static function create_table()
    {
        global $wpdb;
        $charset_collate = $wpdb->get_charset_collate();
        $table_name = $wpdb->prefix . 'custom_wishlist';
        $sql = "CREATE TABLE IF NOT EXISTS {$table_name} (
            id int UNSIGNED NOT NULL AUTO_INCREMENT,
            user_id bigint(20) UNSIGNED NOT NULL,
            product_id bigint(20) UNSIGNED NOT NULL,
            date_added timestamp DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY  (id),
            INDEX user_id_idx (user_id),
            UNIQUE KEY user_product (user_id,product_id)
        ) $charset_collate;";
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
        $wpdb->query("ALTER TABLE {$table_name} ADD INDEX product_id_idx (product_id)");
    }
    public function get_wishlist_count()
    {
        if (!is_user_logged_in()) {
            return 0;
        }
        $user_id = get_current_user_id();
        return (int) $this->wpdb->get_var($this->wpdb->prepare(
            "SELECT COUNT(*) FROM {$this->table_name} WHERE user_id = %d",
            $user_id
        ));
    }
    public function handle_toggle_wishlist()
    {
        $view = new \jamal13647850\wphelpers\Views\View();
        check_ajax_referer('wishlist-nonce', 'security');
        $product_id = isset($_POST['product_id']) ? (int) $_POST['product_id'] : 0;
        if (!$product_id) {
            wp_send_json_error('شناسه محصول نامعتبر است.');
        }
        $result = $this->toggle_wishlist($product_id);
        if ($result['success']) {
            $data = [
                'ajax_url' => admin_url('admin-ajax.php'),
                'product_id' => $product_id,
                'nonce' => wp_create_nonce('wishlist-nonce'),
                'is_wishlisted' => $result['action'] === 'added'
            ];
            $view->display("@views/components/wishlist/wishlistButton.twig", $data);
            die();
        } else {
            $data = [
                'ajax_url' => admin_url('admin-ajax.php'),
                'product_id' => $product_id,
                'nonce' => wp_create_nonce('wishlist-nonce'),
                'is_wishlisted' => $result['action'] === 'added'
            ];
            $view->display("@views/components/wishlist/wishlistButton.twig", $data);
            die();
        }
    }
    public function handle_remove_from_wishlist()
    {
        $view = new \jamal13647850\wphelpers\Views\View();
        check_ajax_referer('wishlist-nonce', 'security');
        $product_id = isset($_POST['product_id']) ? (int) $_POST['product_id'] : 0;
        if (!$product_id) {
            wp_send_json_error('شناسه محصول نامعتبر است.');
        }
        $result = $this->toggle_wishlist($product_id);
        if ($result['success']) {
            $data = [
                'ajax_url' => admin_url('admin-ajax.php'),
                'product_id' => $product_id,
                'nonce' => wp_create_nonce('wishlist-nonce'),
                'is_wishlisted' => $result['action'] === 'added'
            ];
            $view->display("@views/components/wishlist/wishlist.twig", $this->getWishlistData());
            die();
        } else {
            $data = [
                'ajax_url' => admin_url('admin-ajax.php'),
                'product_id' => $product_id,
                'nonce' => wp_create_nonce('wishlist-nonce'),
                'is_wishlisted' => $result['action'] === 'added'
            ];
            $view->display("@views/components/wishlist/wishlist.twig", $this->getWishlistData());
            die();
        }
    }
}

================
File: src/Models/Category.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Models;
defined('ABSPATH') || exit();
use jamal13647850\wphelpers\Language\LanguageManager;
class Category
{
    public function getFirstCategory(int $postID): string
    {
        $cat = '';
        $categories = get_the_category($postID);
        if (!empty($categories)) {
            $lang = LanguageManager::getInstance();
            foreach ($categories as $category) {
                $cat = '<a href="' . esc_url(get_category_link($category->term_id)) . '" alt="' .
                    esc_attr(sprintf($lang->trans('view_all_posts_in'), $category->name)) . '">' .
                    esc_html($category->name) . '</a> ';
                break;
            }
        }
        return $cat;
    }
    /**
     * Get HTML link for the first custom taxonomy term.
     *
     * @param int $postID
     * @param string $customTaxonomy
     * @return string
     */
    public function getFirstCustomCategory(int $postID, string $customTaxonomy): string
    {
        $cat = '';
        $customCategories = get_the_terms($postID, $customTaxonomy);
        if (!empty($customCategories)) {
            $lang = LanguageManager::getInstance();
            foreach ($customCategories as $category) {
                $cat = '<a href="' . esc_url(get_term_link($category->term_id)) . '" alt="' .
                    esc_attr(sprintf($lang->trans('view_all_posts_in'), $category->name)) . '">' .
                    esc_html($category->name) . '</a>';
                break;
            }
        }
        return $cat;
    }
    /**
     * Get all terms for a custom taxonomy.
     *
     * @param string $customTaxonomy
     * @return array
     */
    public function getAllCPTTaxonomy(string $customTaxonomy): array
    {
        $args = array(
            'taxonomy' => $customTaxonomy,
            'hide_empty' => false,
        );
        $product_categories = get_terms($args);
        if (! empty($product_categories) && ! is_wp_error($product_categories)) {
            return $product_categories;
        } else {
            return [];
        }
    }
}

================
File: src/Models/ProductCompare.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Models;
defined('ABSPATH') || exit();
class ProductCompare
{
    private $products = [];
    public function __construct()
    {
        add_action('wp_ajax_add_to_compare', [$this, 'add_to_compare']);
        add_action('wp_ajax_nopriv_add_to_compare', [$this, 'add_to_compare']);
        add_action('wp_ajax_remove_from_compare', [$this, 'remove_from_compare']);
        add_action('wp_ajax_nopriv_remove_from_compare', [$this, 'remove_from_compare']);
    }
    public function get_compare_products($compare_ids = [])
    {
        if(empty($compare_ids)){
            $compare_ids = isset($_COOKIE['compare_products']) ? json_decode(stripslashes($_COOKIE['compare_products']), true) : [];
        }
        $products = [];
        foreach ($compare_ids as $product_id) {
            $product = wc_get_product($product_id);
            if ($product) {
                $products[] = [
                    'id' => $product->get_id(),
                    'name' => $product->get_name(),
                    'price' => $product->get_price_html(),
                    'image' => wp_get_attachment_image_url($product->get_image_id(), 'medium'),
                    'description' => $product->get_short_description(),
                    'attributes' => $this->get_product_attributes($product),
                    'stock_status' => $product->get_stock_status(),
                    'add_to_cart_url' => $product->add_to_cart_url()
                ];
            }
        }
        return $products;
    }
    private function get_product_attributes($product)
    {
        $attributes = [];
        $product_attributes = $product->get_attributes();
        foreach ($product_attributes as $attribute) {
            if ($attribute->get_visible()) {
                $name = wc_attribute_label($attribute->get_name());
                $values = [];
                if ($attribute->is_taxonomy()) {
                    $terms = wp_get_post_terms($product->get_id(), $attribute->get_name(), 'all');
                    foreach ($terms as $term) {
                        $values[] = $term->name;
                    }
                } else {
                    $values = $attribute->get_options();
                }
                $attributes[$name] = implode(', ', $values);
            }
        }
        return $attributes;
    }
    public function add_to_compare()
    {
        $product_id = isset($_POST['product_id']) ? intval($_POST['product_id']) : 0;
        $compare_ids = isset($_COOKIE['compare_products']) ? json_decode(stripslashes($_COOKIE['compare_products']), true) : [];
        if (!in_array($product_id, $compare_ids)) {
            $compare_ids[] = $product_id;
            setcookie('compare_products', json_encode($compare_ids), time() + (86400 * 30), '/');
            $compare_ids = isset($_COOKIE['compare_products']) ? json_decode(stripslashes($_COOKIE['compare_products']), true) : [];
        }
        $view = new \jamal13647850\wphelpers\Views\View();
        $view->display("@views/components/compare/compare-button.twig", [
            'ajax_url' => admin_url('admin-ajax.php'),
            'product_id' => $product_id,
            'compare_list' => $compare_ids,
        ]);
        die();
    }
    public function remove_from_compare()
    {
        $product_id = isset($_POST['product_id']) ? intval($_POST['product_id']) : 0;
        $compare_ids = isset($_COOKIE['compare_products']) ? json_decode(stripslashes($_COOKIE['compare_products']), true) : [];
        $compare_ids = array_diff($compare_ids, [$product_id]);
        setcookie('compare_products', json_encode($compare_ids), time() + (86400 * 30), '/');
        $view = new \jamal13647850\wphelpers\Views\View();
        $products = $this->get_compare_products($compare_ids);
        $view->display("@views/components/compare/compare.twig", [
            'products' => $products,
            'ajax_url' => admin_url('admin-ajax.php'),
            'shop_url' => get_permalink(wc_get_page_id('shop'))
        ]);
        die();
    }
}

================
File: src/Utilities/HTMX_Handler.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Utilities;
defined('ABSPATH') || exit();
use jamal13647850\wphelpers\Language\LanguageManager;
class HTMX_Handler
{
    private View $view;
    private HTMX_Validator $validator;
    private TransientCache $cache;
    private array $endpoints = [];
    private array $middleware = [];
    private string $prefix;
    public function __construct(?View $view = null, ?HTMX_Validator $validator = null, ?TransientCache $cache = null)
    {
        $this->view = $view ?? new View();
        $this->validator = $validator ?? new HTMX_Validator($this->view);
        $this->cache = $cache ?? new TransientCache();
        $this->prefix = Config::get('htmx.prefix', 'htmx_');
        add_action('wp_ajax_' . $this->prefix . 'endpoint', [$this, 'handleEndpoint']);
        add_action('wp_ajax_nopriv_' . $this->prefix . 'endpoint', [$this, 'handleEndpoint']);
        $this->registerMiddleware('auth', [$this, 'authMiddleware']);
        $this->registerMiddleware('nonce', [$this, 'nonceMiddleware']);
        $this->registerMiddleware('throttle', [$this, 'throttleMiddleware']);
        $this->registerMiddleware('cache', [$this, 'cacheMiddleware']);
        $custom_middleware = Config::get('htmx.middleware', []);
        foreach ($custom_middleware as $name => $callback) {
            if (is_callable($callback)) {
                $this->registerMiddleware($name, $callback);
            }
        }
    }
    public function registerEndpoint(string $name, callable $callback, array $middleware = []): self
    {
        $this->endpoints[$name] = [
            'callback'   => $callback,
            'middleware' => $middleware,
        ];
        return $this;
    }
    public function registerMiddleware(string $name, callable $callback): self
    {
        $this->middleware[$name] = $callback;
        return $this;
    }
    public function handleEndpoint(): void
    {
        $lang = LanguageManager::getInstance();
        $is_htmx = isset($_SERVER['HTTP_HX_REQUEST']) && $_SERVER['HTTP_HX_REQUEST'] === 'true';
        if (!$is_htmx && !Config::get('htmx.allow_non_htmx', false)) {
            $this->sendError(
                $lang->trans('invalid_request', null, 'Invalid request'),
                400
            );
        }
        $endpoint = sanitize_text_field($_REQUEST['endpoint'] ?? '');
        if (empty($endpoint) || !isset($this->endpoints[$endpoint])) {
            $this->sendError(
                $lang->trans('invalid_endpoint', null, 'Invalid endpoint'),
                404
            );
        }
        $endpoint_data = $this->endpoints[$endpoint];
        $callback = $endpoint_data['callback'];
        $middleware = $endpoint_data['middleware'];
        foreach ($middleware as $middleware_name) {
            if (isset($this->middleware[$middleware_name])) {
                $middleware_callback = $this->middleware[$middleware_name];
                $result = $middleware_callback();
                if ($result === false) {
                    $this->sendError(
                        $lang->trans('middleware_failed', null, 'Middleware check failed'),
                        403
                    );
                }
            }
        }
        $result = $callback($this);
        if ($result === false) {
            $this->sendError(
                $lang->trans('endpoint_failed', null, 'Endpoint execution failed'),
                500
            );
        }
        exit;
    }
    public function authMiddleware(): bool
    {
        return is_user_logged_in();
    }
    public function nonceMiddleware(): bool
    {
        $nonce = sanitize_text_field($_REQUEST['_wpnonce'] ?? '');
        $action = sanitize_text_field($_REQUEST['endpoint'] ?? '');
        return wp_verify_nonce($nonce, $this->prefix . $action);
    }
    /**
     * Throttle middleware.
     *
     * @return bool True if not throttled, false otherwise
     */
    public function throttleMiddleware(): bool
    {
        $ip = $_SERVER['REMOTE_ADDR'] ?? '';
        $endpoint = sanitize_text_field($_REQUEST['endpoint'] ?? '');
        $key = 'throttle_' . md5($ip . '_' . $endpoint);
        $limit = Config::get('htmx.throttle.limit', 60);
        $period = Config::get('htmx.throttle.period', 60);
        $count = (int) $this->cache->get($key, 0);
        if ($count >= $limit) {
            header('Retry-After: ' . $period);
            return false;
        }
        $this->cache->increment($key, 1, $period);
        return true;
    }
    public function cacheMiddleware(): bool
    {
        if (!Config::get('htmx.cache.enabled', false)) {
            return true;
        }
        $endpoint = sanitize_text_field($_REQUEST['endpoint'] ?? '');
        $key = 'cache_' . md5($endpoint . '_' . json_encode($_REQUEST));
        $ttl = Config::get('htmx.cache.ttl', 300);
        $cached = $this->cache->get($key);
        if ($cached !== null) {
            echo $cached;
            exit;
        }
        ob_start();
        return true;
    }
    public function endCacheMiddleware(): void
    {
        if (!Config::get('htmx.cache.enabled', false)) {
            return;
        }
        $endpoint = sanitize_text_field($_REQUEST['endpoint'] ?? '');
        $key = 'cache_' . md5($endpoint . '_' . json_encode($_REQUEST));
        $ttl = Config::get('htmx.cache.ttl', 300);
        $content = ob_get_clean();
        $this->cache->set($key, $content, $ttl);
        echo $content;
    }
    public function validate(array $rules, array $messages = []): bool
    {
        $data = $_REQUEST;
        return $this->validator->validate($data, $rules, $messages);
    }
    public function getValidatedData(): array
    {
        return $this->validator->getValidatedData();
    }
    public function getErrors(): array
    {
        return $this->validator->getErrors();
    }
    public function sendValidationErrors(string $target, string $template = 'validation/errors.twig', array $data = []): void
    {
        $this->validator->sendHtmxResponse($target, $template, $data);
    }
    public function sendError(string $message, int $status = 422): void
    {
        $this->validator->sendHtmxError($message, $status);
    }
    public function sendSuccess(string $message, array $trigger = []): void
    {
        $this->validator->sendHtmxSuccess($message, $trigger);
    }
    public function render(string $template, array $data = []): string
    {
        return $this->view->render($template, $data);
    }
    public function sendTemplate(string $template, array $data = []): void
    {
        echo $this->render($template, $data);
    }
    public function getEndpointUrl(string $endpoint, array $params = [], bool $with_nonce = true): string
    {
        $url = admin_url('admin-ajax.php');
        $params = array_merge([
            'action' => $this->prefix . 'endpoint',
            'endpoint' => $endpoint,
        ], $params);
        if ($with_nonce) {
            $params['_wpnonce'] = wp_create_nonce($this->prefix . $endpoint);
        }
        return add_query_arg($params, $url);
    }
    public function getHtmxAttrs(string $endpoint, array $params = [], array $attrs = []): string
    {
        $url = $this->getEndpointUrl($endpoint, $params);
        $default_attrs = [
            'hx-post' => $url,
            'hx-trigger' => 'click',
            'hx-swap' => 'outerHTML',
        ];
        $attrs = array_merge($default_attrs, $attrs);
        $html = '';
        foreach ($attrs as $name => $value) {
            $html .= ' ' . esc_attr($name) . '="' . esc_attr($value) . '"';
        }
        return $html;
    }
    /**
     * Register HTMX assets.
     *
     * @param bool $with_extensions Whether to include extensions
     * @return void
     */
    public function registerAssets(bool $with_extensions = false): void
    {
        $version = Config::get('htmx.version', '1.9.2');
        $min = Config::get('htmx.minified', true) ? '.min' : '';
        wp_register_script(
            'htmx',
            "https://unpkg.com/htmx.org@{$version}/dist/htmx{$min}.js",
            [],
            $version,
            true
        );
        wp_enqueue_script('htmx');
        if ($with_extensions) {
            $extensions = Config::get('htmx.extensions', []);
            foreach ($extensions as $name => $path) {
                wp_register_script(
                    "htmx-{$name}",
                    $path,
                    ['htmx'],
                    $version,
                    true
                );
                wp_enqueue_script("htmx-{$name}");
            }
        }
        if (Config::get('htmx.csrf_protection', true)) {
            $script = "
                document.addEventListener('DOMContentLoaded', function() {
                    document.body.addEventListener('htmx:configRequest', function(event) {
                        event.detail.headers['X-WP-Nonce'] = '" . esc_js(wp_create_nonce('wp_rest')) . "';
                    });
                });
            ";
            wp_add_inline_script('htmx', $script);
        }
    }
    public function isHtmxRequest(): bool
    {
        return isset($_SERVER['HTTP_HX_REQUEST']) && $_SERVER['HTTP_HX_REQUEST'] === 'true';
    }
    public function getHtmxTarget(): ?string
    {
        return $_SERVER['HTTP_HX_TARGET'] ?? null;
    }
    public function getHtmxTrigger(): ?string
    {
        return $_SERVER['HTTP_HX_TRIGGER'] ?? null;
    }
    public function getHtmxTriggerName(): ?string
    {
        return $_SERVER['HTTP_HX_TRIGGER_NAME'] ?? null;
    }
    public function getHtmxCurrentUrl(): ?string
    {
        return $_SERVER['HTTP_HX_CURRENT_URL'] ?? null;
    }
    public function getHtmxPrompt(): ?string
    {
        return $_SERVER['HTTP_HX_PROMPT'] ?? null;
    }
    public function setHtmxHeader(string $name, string $value): void
    {
        header("HX-{$name}: {$value}");
    }
    public function triggerEvent(string $event, array $detail = []): void
    {
        $this->setHtmxHeader('Trigger', json_encode([
            $event => $detail ?: true,
        ]));
    }
    public function redirect(string $url): void
    {
        $this->setHtmxHeader('Redirect', $url);
        exit;
    }
    public function refresh(): void
    {
        $this->setHtmxHeader('Refresh', 'true');
        exit;
    }
    public function setTarget(string $target): void
    {
        $this->setHtmxHeader('Retarget', $target);
    }
    public function setSwap(string $method): void
    {
        $this->setHtmxHeader('Reswap', $method);
    }
    public function pushUrl(string $url): void
    {
        $this->setHtmxHeader('Push-Url', $url);
    }
    public function replaceUrl(string $url): void
    {
        $this->setHtmxHeader('Replace-Url', $url);
    }
    public function setStatus(int $code): void
    {
        http_response_code($code);
    }
    public function getView(): View
    {
        return $this->view;
    }
    public function getValidator(): HTMX_Validator
    {
        return $this->validator;
    }
    public function getCache(): TransientCache
    {
        return $this->cache;
    }
    public function getEndpoints(): array
    {
        return $this->endpoints;
    }
    public function getMiddleware(): array
    {
        return $this->middleware;
    }
    public function getPrefix(): string
    {
        return $this->prefix;
    }
}

================
File: src/Utilities/HTMX_Validator.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Utilities;
defined('ABSPATH') || exit();
use jamal13647850\wphelpers\Language\LanguageManager;
class HTMX_Validator
{
    private View $view;
    private array $errors = [];
    private array $data = [];
    private array $rules = [];
    private array $messages = [];
    public function __construct(?View $view = null)
    {
        $this->view = $view ?? new View();
    }
    public function validate(array $data, array $rules, array $messages = []): bool
    {
        $this->data = $data;
        $this->rules = $rules;
        $this->messages = $messages;
        $this->errors = [];
        foreach ($rules as $field => $field_rules) {
            $field_rules = explode('|', $field_rules);
            foreach ($field_rules as $rule) {
                $rule_parts = explode(':', $rule);
                $rule_name = $rule_parts[0];
                $rule_params = isset($rule_parts[1]) ? explode(',', $rule_parts[1]) : [];
                $method = 'validate' . ucfirst($rule_name);
                if (method_exists($this, $method)) {
                    $value = $data[$field] ?? null;
                    if (!$this->$method($field, $value, $rule_params)) {
                        $this->addError($field, $rule_name, $rule_params);
                    }
                }
            }
        }
        return empty($this->errors);
    }
    private function addError(string $field, string $rule, array $params = []): void
    {
        $message = $this->messages[$field . '.' . $rule]
            ?? $this->messages[$field]
            ?? $this->getDefaultMessage($field, $rule, $params);
        $message = $this->replacePlaceholders($message, $field, $params);
        $this->errors[$field][] = $message;
    }
    private function getDefaultMessage(string $field, string $rule, array $params = []): string
    {
        $lang = LanguageManager::getInstance();
        switch ($rule) {
            case 'required':
                return $lang->trans('validator_required', null, 'The :field field is required.');
            case 'email':
                return $lang->trans('validator_email', null, 'The :field field must be a valid email address.');
            case 'url':
                return $lang->trans('validator_url', null, 'The :field field must be a valid URL.');
            case 'numeric':
                return $lang->trans('validator_numeric', null, 'The :field field must be a number.');
            case 'integer':
                return $lang->trans('validator_integer', null, 'The :field field must be an integer.');
            case 'min':
                return $lang->trans('validator_min', null, 'The :field field must be at least :min characters.');
            case 'max':
                return $lang->trans('validator_max', null, 'The :field field must not exceed :max characters.');
            case 'between':
                return $lang->trans('validator_between', null, 'The :field field must be between :min and :max characters.');
            case 'in':
                return $lang->trans('validator_in', null, 'The selected :field is invalid.');
            case 'not_in':
                return $lang->trans('validator_not_in', null, 'The selected :field is invalid.');
            case 'regex':
                return $lang->trans('validator_regex', null, 'The :field format is invalid.');
            case 'date':
                return $lang->trans('validator_date', null, 'The :field field must be a valid date.');
            case 'date_format':
                return $lang->trans('validator_date_format', null, 'The :field field must match the format :format.');
            case 'before':
                return $lang->trans('validator_before', null, 'The :field field must be a date before :date.');
            case 'after':
                return $lang->trans('validator_after', null, 'The :field field must be a date after :date.');
            case 'same':
                return $lang->trans('validator_same', null, 'The :field field must match the :other field.');
            case 'different':
                return $lang->trans('validator_different', null, 'The :field field must be different from the :other field.');
            case 'unique':
                return $lang->trans('validator_unique', null, 'The :field has already been taken.');
            case 'exists':
                return $lang->trans('validator_exists', null, 'The selected :field is invalid.');
            case 'wp_nonce':
                return $lang->trans('validator_wp_nonce', null, 'Invalid WordPress nonce.');
            case 'wp_cap':
                return $lang->trans('validator_wp_cap', null, 'You do not have permission.');
            case 'file_type':
                return $lang->trans('validator_file_type', null, 'Invalid file type.');
            case 'file_size':
                return $lang->trans('validator_file_size', null, 'File size exceeds the allowed maximum.');
            case 'file_image':
                return $lang->trans('validator_file_image', null, 'Only image files are allowed.');
            case 'recaptcha':
                return $lang->trans('validator_recaptcha', null, 'Recaptcha validation failed.');
            case 'honeypot':
                return $lang->trans('validator_honeypot', null, 'Form submission failed.');
            default:
                return $lang->trans('validator_default', null, 'The :field field is invalid.');
        }
    }
    private function replacePlaceholders(string $message, string $field, array $params = []): string
    {
        $field_name = ucfirst(str_replace('_', ' ', $field));
        $replacements = [
            ':field' => $field_name,
        ];
        if (isset($params[0])) {
            $replacements[':min'] = $params[0];
            $replacements[':max'] = isset($params[1]) ? $params[1] : $params[0];
            $replacements[':size'] = $params[0];
            $replacements[':date'] = $params[0];
            $replacements[':format'] = $params[0];
            $replacements[':other'] = ucfirst(str_replace('_', ' ', $params[0]));
        }
        if (isset($params[1])) {
            $replacements[':max'] = $params[1];
        }
        return strtr($message, $replacements);
    }
    public function getErrors(): array
    {
        return $this->errors;
    }
    public function getFirstError(string $field): ?string
    {
        return $this->errors[$field][0] ?? null;
    }
    public function hasError(string $field): bool
    {
        return isset($this->errors[$field]);
    }
    public function getFlatErrors(): array
    {
        $flat = [];
        foreach ($this->errors as $field => $errors) {
            foreach ($errors as $error) {
                $flat[] = $error;
            }
        }
        return $flat;
    }
    public function renderErrors(string $template = 'validation/errors.twig', array $data = []): string
    {
        $data = array_merge([
            'errors' => $this->errors,
            'flat_errors' => $this->getFlatErrors(),
        ], $data);
        return $this->view->render($template, $data);
    }
    private function validateRequired(string $field, $value, array $params = []): bool
    {
        if (is_null($value)) {
            return false;
        } elseif (is_string($value) && trim($value) === '') {
            return false;
        } elseif (is_array($value) && count($value) < 1) {
            return false;
        }
        return true;
    }
    private function validateEmail(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        return filter_var($value, FILTER_VALIDATE_EMAIL) !== false;
    }
    private function validateUrl(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        return filter_var($value, FILTER_VALIDATE_URL) !== false;
    }
    private function validateNumeric(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        return is_numeric($value);
    }
    private function validateInteger(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        return filter_var($value, FILTER_VALIDATE_INT) !== false;
    }
    private function validateMin(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        $min = (int)($params[0] ?? 0);
        if (is_numeric($value)) {
            return $value >= $min;
        }
        return mb_strlen($value) >= $min;
    }
    private function validateMax(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        $max = (int)($params[0] ?? 0);
        if (is_numeric($value)) {
            return $value <= $max;
        }
        return mb_strlen($value) <= $max;
    }
    private function validateBetween(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        $min = (int)($params[0] ?? 0);
        $max = (int)($params[1] ?? 0);
        if (is_numeric($value)) {
            return $value >= $min && $value <= $max;
        }
        $length = mb_strlen($value);
        return $length >= $min && $length <= $max;
    }
    private function validateIn(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        return in_array($value, $params);
    }
    private function validateNotIn(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        return !in_array($value, $params);
    }
    private function validateRegex(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        $pattern = $params[0] ?? '';
        return preg_match($pattern, $value) > 0;
    }
    private function validateDate(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        $date = date_create($value);
        return $date !== false;
    }
    private function validateDateFormat(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        $format = $params[0] ?? 'Y-m-d';
        $date = \DateTime::createFromFormat($format, $value);
        return $date !== false && $date->format($format) === $value;
    }
    private function validateBefore(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        $date = date_create($value);
        $before = date_create($params[0] ?? 'now');
        return $date !== false && $before !== false && $date < $before;
    }
    private function validateAfter(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        $date = date_create($value);
        $after = date_create($params[0] ?? 'now');
        return $date !== false && $after !== false && $date > $after;
    }
    private function validateSame(string $field, $value, array $params = []): bool
    {
        $other_field = $params[0] ?? '';
        $other_value = $this->data[$other_field] ?? null;
        return $value === $other_value;
    }
    private function validateDifferent(string $field, $value, array $params = []): bool
    {
        $other_field = $params[0] ?? '';
        $other_value = $this->data[$other_field] ?? null;
        return $value !== $other_value;
    }
    private function validateUnique(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        global $wpdb;
        $table = $wpdb->prefix . ($params[0] ?? '');
        $column = $params[1] ?? $field;
        $except_column = $params[2] ?? 'id';
        $except_value = $params[3] ?? null;
        $query = $wpdb->prepare("SELECT COUNT(*) FROM {$table} WHERE {$column} = %s", $value);
        if ($except_value !== null) {
            $query .= $wpdb->prepare(" AND {$except_column} != %s", $except_value);
        }
        $count = $wpdb->get_var($query);
        return $count == 0;
    }
    private function validateExists(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return true;
        }
        global $wpdb;
        $table = $wpdb->prefix . ($params[0] ?? '');
        $column = $params[1] ?? $field;
        $query = $wpdb->prepare("SELECT COUNT(*) FROM {$table} WHERE {$column} = %s", $value);
        $count = $wpdb->get_var($query);
        return $count > 0;
    }
    private function validateWpNonce(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return false;
        }
        $action = $params[0] ?? -1;
        return wp_verify_nonce($value, $action);
    }
    private function validateWpCap(string $field, $value, array $params = []): bool
    {
        $capability = $params[0] ?? '';
        return current_user_can($capability);
    }
    private function validateFileType(string $field, $value, array $params = []): bool
    {
        if (empty($value) || !isset($_FILES[$field])) {
            return true;
        }
        $file = $_FILES[$field];
        $extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
        return in_array($extension, $params);
    }
    private function validateFileSize(string $field, $value, array $params = []): bool
    {
        if (empty($value) || !isset($_FILES[$field])) {
            return true;
        }
        $file = $_FILES[$field];
        $max_size = (int)($params[0] ?? 0) * 1024 * 1024;
        return $file['size'] <= $max_size;
    }
    private function validateFileImage(string $field, $value, array $params = []): bool
    {
        if (empty($value) || !isset($_FILES[$field])) {
            return true;
        }
        $file = $_FILES[$field];
        $type = $file['type'];
        return strpos($type, 'image/') === 0;
    }
    private function validateRecaptcha(string $field, $value, array $params = []): bool
    {
        if (empty($value)) {
            return false;
        }
        $secret = $params[0] ?? (defined('Config') ? Config::get('recaptcha.secret_key', '') : '');
        if (empty($secret)) {
            return false;
        }
        $response = wp_remote_post('https:
            'body' => [
                'secret' => $secret,
                'response' => $value,
                'remoteip' => $_SERVER['REMOTE_ADDR'] ?? '',
            ],
        ]);
        if (is_wp_error($response)) {
            return false;
        }
        $body = wp_remote_retrieve_body($response);
        $data = json_decode($body, true);
        return isset($data['success']) && $data['success'] === true;
    }
    private function validateHoneypot(string $field, $value, array $params = []): bool
    {
        return empty($value);
    }
    private function validateCustom(string $field, $value, array $params = []): bool
    {
        $callback = $params[0] ?? '';
        if (is_callable($callback)) {
            return call_user_func($callback, $value, $field, $this->data);
        }
        return false;
    }
    /**
     * Get validated data.
     *
     * @return array Validated data
     */
    public function getValidatedData(): array
    {
        $validated = [];
        foreach ($this->rules as $field => $rules) {
            if (isset($this->data[$field])) {
                $validated[$field] = $this->data[$field];
            }
        }
        return $validated;
    }
    /**
     * Get only the specified fields from the validated data.
     *
     * @param array $fields Fields to get
     * @return array Filtered validated data
     */
    public function only(array $fields): array
    {
        $validated = $this->getValidatedData();
        $filtered = [];
        foreach ($fields as $field) {
            if (isset($validated[$field])) {
                $filtered[$field] = $validated[$field];
            }
        }
        return $filtered;
    }
    /**
     * Get all fields except the specified ones from the validated data.
     *
     * @param array $fields Fields to exclude
     * @return array Filtered validated data
     */
    public function except(array $fields): array
    {
        $validated = $this->getValidatedData();
        foreach ($fields as $field) {
            unset($validated[$field]);
        }
        return $validated;
    }
    /**
     * Send HTMX validation response.
     *
     * @param string $target Target element
     * @param string $template Template name
     * @param array $data Template data
     * @return void
     */
    public function sendHtmxResponse(string $target, string $template = 'validation/errors.twig', array $data = []): void
    {
        header('HX-Retarget: ' . $target);
        echo $this->renderErrors($template, $data);
        exit;
    }
    public function sendHtmxError(string $message, int $status = 422): void
    {
        header('HX-Reswap: none');
        header('HX-Trigger: {"showMessage": {"message": "' . esc_js($message) . '", "type": "error"}}');
        http_response_code($status);
        exit;
    }
    public function sendHtmxSuccess(string $message, array $trigger = []): void
    {
        $trigger_data = array_merge([
            'showMessage' => [
                'message' => $message,
                'type' => 'success',
            ],
        ], $trigger);
        header('HX-Trigger: ' . json_encode($trigger_data));
        exit;
    }
}

================
File: src/Views/WordPressTwigExtension.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Views;
defined('ABSPATH') || exit();
use Twig\Extension\AbstractExtension;
use Twig\TwigFilter;
use Twig\TwigFunction;
use jamal13647850\wphelpers\Language\LanguageManager;
class WordPressTwigExtension extends AbstractExtension
{
    public function getName(): string
    {
        return 'wordpress';
    }
    public function getFilters(): array
    {
        return [
            new TwigFilter('wpautop', 'wpautop'),
            new TwigFilter('wp_trim_words', 'wp_trim_words'),
            new TwigFilter('sanitize', [$this, 'sanitize']),
            new TwigFilter('esc_html', 'esc_html'),
            new TwigFilter('esc_attr', 'esc_attr'),
            new TwigFilter('esc_url', 'esc_url'),
            new TwigFilter('esc_js', 'esc_js'),
            new TwigFilter('esc_textarea', 'esc_textarea'),
            new TwigFilter('wp_kses_post', 'wp_kses_post'),
            new TwigFilter('format_date', [$this, 'formatDate']),
            new TwigFilter('human_time_diff', 'human_time_diff'),
            new TwigFilter('apply_filters', 'apply_filters', ['is_variadic' => true]),
            new TwigFilter('shortcodes', 'do_shortcode'),
            new TwigFilter('slugify', 'sanitize_title'),
            new TwigFilter('translate', [$this, 'twigTranslate']),
        ];
    }
    public function twigTranslate(string $key, ?string $default = null): string
    {
        return LanguageManager::getInstance()->trans($key, null, $default);
    }
    public function getFunctions(): array
    {
        return [
            new TwigFunction('wp_query', [$this, 'wpQuery']),
            new TwigFunction('wp_menu', [$this, 'wpMenu']),
            new TwigFunction('wp_sidebar', [$this, 'wpSidebar']),
            new TwigFunction('wp_pagination', [$this, 'wpPagination']),
            new TwigFunction('wp_breadcrumbs', [$this, 'wpBreadcrumbs']),
            new TwigFunction('wp_image', [$this, 'wpImage']),
            new TwigFunction('wp_image_url', [$this, 'wpImageUrl']),
            new TwigFunction('wp_post_thumbnail', [$this, 'wpPostThumbnail']),
            new TwigFunction('wp_enqueue_asset', [$this, 'wpEnqueueAsset']),
            new TwigFunction('wp_localize_script', 'wp_localize_script'),
            new TwigFunction('wp_get_archives', 'wp_get_archives'),
            new TwigFunction('wp_meta', 'wp_meta'),
            new TwigFunction('wp_login_form', 'wp_login_form'),
            new TwigFunction('wp_nonce_field', 'wp_nonce_field'),
            new TwigFunction('wp_create_nonce', 'wp_create_nonce'),
            new TwigFunction('wp_get_attachment_image', 'wp_get_attachment_image'),
            new TwigFunction('wp_get_attachment_url', 'wp_get_attachment_url'),
            new TwigFunction('wp_get_attachment_image_src', 'wp_get_attachment_image_src'),
            new TwigFunction('wp_get_attachment_metadata', 'wp_get_attachment_metadata'),
            new TwigFunction('wp_get_attachment_caption', 'wp_get_attachment_caption'),
            new TwigFunction('wp_get_post_terms', 'wp_get_post_terms'),
            new TwigFunction('wp_get_object_terms', 'wp_get_object_terms'),
            new TwigFunction('wp_list_comments', 'wp_list_comments'),
            new TwigFunction('wp_link_pages', 'wp_link_pages'),
            new TwigFunction('wp_reset_postdata', 'wp_reset_postdata'),
            new TwigFunction('wp_reset_query', 'wp_reset_query'),
            new TwigFunction('wp_doing_ajax', 'wp_doing_ajax'),
            new TwigFunction('wp_doing_cron', 'wp_doing_cron'),
            new TwigFunction('wp_upload_dir', 'wp_upload_dir'),
            new TwigFunction('wp_get_theme', 'wp_get_theme'),
            new TwigFunction('wp_get_current_user', 'wp_get_current_user'),
            new TwigFunction('wp_get_current_user_id', 'get_current_user_id'),
            new TwigFunction('wp_get_post_type', 'get_post_type'),
            new TwigFunction('wp_get_post_types', 'get_post_types'),
            new TwigFunction('wp_get_post_type_object', 'get_post_type_object'),
            new TwigFunction('wp_get_post_type_archive_link', 'get_post_type_archive_link'),
            new TwigFunction('wp_get_post_format', 'get_post_format'),
            new TwigFunction('wp_get_the_author_posts_link', 'get_the_author_posts_link'),
            new TwigFunction('wp_get_the_author_meta', 'get_the_author_meta'),
            new TwigFunction('wp_get_the_category_list', 'get_the_category_list'),
            new TwigFunction('wp_get_the_tag_list', 'get_the_tag_list'),
            new TwigFunction('wp_get_the_term_list', 'get_the_term_list'),
            new TwigFunction('wp_get_the_terms', 'get_the_terms'),
            new TwigFunction('wp_get_the_time', 'get_the_time'),
            new TwigFunction('wp_get_the_modified_time', 'get_the_modified_time'),
            new TwigFunction('wp_get_the_date', 'get_the_date'),
            new TwigFunction('wp_get_the_modified_date', 'get_the_modified_date'),
            new TwigFunction('wp_get_the_excerpt', 'get_the_excerpt'),
            new TwigFunction('wp_has_excerpt', 'has_excerpt'),
            new TwigFunction('wp_get_the_ID', 'get_the_ID'),
            new TwigFunction('wp_get_the_title', 'get_the_title'),
            new TwigFunction('wp_get_the_content', 'get_the_content'),
            new TwigFunction('wp_get_the_permalink', 'get_the_permalink'),
            new TwigFunction('wp_get_permalink', 'get_permalink'),
            new TwigFunction('wp_get_post_permalink', 'get_post_permalink'),
            new TwigFunction('wp_get_edit_post_link', 'get_edit_post_link'),
            new TwigFunction('wp_get_delete_post_link', 'get_delete_post_link'),
            new TwigFunction('wp_get_comments_number', 'get_comments_number'),
            new TwigFunction('wp_get_comments_popup_link', 'comments_popup_link'),
            new TwigFunction('wp_get_avatar', 'get_avatar'),
            new TwigFunction('wp_get_avatar_url', 'get_avatar_url'),
            new TwigFunction('wp_get_search_form', 'get_search_form'),
            new TwigFunction('wp_get_calendar', 'get_calendar'),
            new TwigFunction('wp_get_template_part', 'get_template_part'),
            new TwigFunction('wp_get_locale', 'get_locale'),
            new TwigFunction('wp_get_language_attributes', 'get_language_attributes'),
            new TwigFunction('wp_get_bloginfo', 'get_bloginfo'),
            new TwigFunction('wp_get_option', 'get_option'),
            new TwigFunction('wp_get_theme_mod', 'get_theme_mod'),
            new TwigFunction('wp_get_theme_mods', 'get_theme_mods'),
            new TwigFunction('wp_get_custom_logo', 'get_custom_logo'),
            new TwigFunction('wp_get_site_url', 'get_site_url'),
            new TwigFunction('wp_get_home_url', 'get_home_url'),
            new TwigFunction('wp_get_admin_url', 'get_admin_url'),
            new TwigFunction('wp_get_rest_url', 'get_rest_url'),
            new TwigFunction('wp_get_privacy_policy_url', 'get_privacy_policy_url'),
            new TwigFunction('wp_get_post_meta', 'get_post_meta'),
            new TwigFunction('wp_get_term_meta', 'get_term_meta'),
            new TwigFunction('wp_get_user_meta', 'get_user_meta'),
            new TwigFunction('wp_get_metadata', 'get_metadata'),
            new TwigFunction('wp_get_post_custom', 'get_post_custom'),
            new TwigFunction('wp_get_post_custom_values', 'get_post_custom_values'),
            new TwigFunction('wp_get_post_custom_keys', 'get_post_custom_keys'),
            new TwigFunction('wp_get_post_status', 'get_post_status'),
            new TwigFunction('wp_get_post_stati', 'get_post_stati'),
            new TwigFunction('wp_get_post_statuses', 'get_post_statuses'),
            new TwigFunction('is_home', 'is_home'),
            new TwigFunction('is_front_page', 'is_front_page'),
            new TwigFunction('is_single', 'is_single'),
            new TwigFunction('is_page', 'is_page'),
            new TwigFunction('is_archive', 'is_archive'),
            new TwigFunction('is_category', 'is_category'),
            new TwigFunction('is_tag', 'is_tag'),
            new TwigFunction('is_tax', 'is_tax'),
            new TwigFunction('is_author', 'is_author'),
            new TwigFunction('is_search', 'is_search'),
            new TwigFunction('is_404', 'is_404'),
            new TwigFunction('is_user_logged_in', 'is_user_logged_in'),
            new TwigFunction('current_user_can', 'current_user_can'),
        ];
    }
    public function sanitize($value, string $type = 'text')
    {
        switch ($type) {
            case 'email':
                return sanitize_email($value);
            case 'url':
                return sanitize_url($value);
            case 'title':
                return sanitize_title($value);
            case 'key':
                return sanitize_key($value);
            case 'file_name':
                return sanitize_file_name($value);
            case 'html_class':
                return sanitize_html_class($value);
            case 'meta':
                return sanitize_meta($value, '', '');
            case 'sql':
                return esc_sql($value);
            case 'text':
            default:
                return sanitize_text_field($value);
        }
    }
    public function formatDate($date, string $format = ''): string
    {
        if (empty($format)) {
            $format = get_option('date_format');
        }
        if (is_numeric($date)) {
            return date_i18n($format, (int)$date);
        }
        return date_i18n($format, strtotime($date));
    }
    public function wpQuery(array $args = []): array
    {
        $query = new \WP_Query($args);
        $result = [
            'posts' => $query->posts,
            'post_count' => $query->post_count,
            'found_posts' => $query->found_posts,
            'max_num_pages' => $query->max_num_pages,
            'current_page' => max(1, get_query_var('paged')),
            'is_single' => $query->is_single(),
            'is_preview' => $query->is_preview(),
            'is_page' => $query->is_page(),
            'is_archive' => $query->is_archive(),
            'is_date' => $query->is_date(),
            'is_year' => $query->is_year(),
            'is_month' => $query->is_month(),
            'is_day' => $query->is_day(),
            'is_time' => $query->is_time(),
            'is_author' => $query->is_author(),
            'is_category' => $query->is_category(),
            'is_tag' => $query->is_tag(),
            'is_tax' => $query->is_tax(),
            'is_search' => $query->is_search(),
            'is_feed' => $query->is_feed(),
            'is_comment_feed' => $query->is_comment_feed(),
            'is_trackback' => $query->is_trackback(),
            'is_home' => $query->is_home(),
            'is_404' => $query->is_404(),
            'is_embed' => $query->is_embed(),
            'is_paged' => $query->is_paged(),
            'is_admin' => $query->is_admin(),
            'is_attachment' => $query->is_attachment(),
            'is_singular' => $query->is_singular(),
            'is_robots' => $query->is_robots(),
            'is_favicon' => $query->is_favicon(),
            'is_posts_page' => $query->is_posts_page(),
            'is_post_type_archive' => $query->is_post_type_archive(),
        ];
        wp_reset_postdata();
        return $result;
    }
    public function wpMenu($args = []): string
    {
        if (is_string($args)) {
            $args = ['theme_location' => $args];
        }
        $defaults = [
            'echo' => false,
        ];
        $args = wp_parse_args($args, $defaults);
        return wp_nav_menu($args);
    }
    public function wpSidebar(string $id, array $args = [])
    {
        if (!is_active_sidebar($id)) {
            return false;
        }
        ob_start();
        dynamic_sidebar($id);
        return ob_get_clean();
    }
    public function wpPagination(array $args = []): string
    {
        $lang = LanguageManager::getInstance();
        $defaults = [
            'mid_size' => 2,
            'prev_text' => $lang->trans('pagination_prev', null, '&laquo; Previous'),
            'next_text' => $lang->trans('pagination_next', null, 'Next &raquo;'),
            'screen_reader_text' => $lang->trans('pagination_navigation', null, 'Posts navigation'),
            'type' => 'array',
            'total' => 0,
            'current' => 0,
        ];
        $args = wp_parse_args($args, $defaults);
        if ($args['total'] > 0 && $args['current'] > 0) {
            $links = paginate_links($args);
        } else {
            global $wp_query;
            $args['total'] = $wp_query->max_num_pages;
            $args['current'] = max(1, get_query_var('paged'));
            $links = paginate_links($args);
        }
        if (is_array($links)) {
            $html = '<nav class="navigation pagination" role="navigation">';
            $html .= '<h2 class="screen-reader-text">' . $args['screen_reader_text'] . '</h2>';
            $html .= '<div class="nav-links">';
            $html .= implode('', $links);
            $html .= '</div>';
            $html .= '</nav>';
            return $html;
        }
        return '';
    }
    /**
     * Render WordPress breadcrumbs with multilingual support.
     *
     * @param array $args Breadcrumbs arguments
     * @return string Breadcrumbs HTML
     */
    public function wpBreadcrumbs(array $args = []): string
    {
        $lang = LanguageManager::getInstance();
        global $post;
        $defaults = [
            'delimiter' => '&raquo;',
            'home' => $lang->trans('home', null, 'Home'),
            'show_home' => true,
            'show_current' => true,
            'before' => '<span class="current">',
            'after' => '</span>',
            'before_item' => '',
            'after_item' => '',
        ];
        $args = wp_parse_args($args, $defaults);
        $html = '<nav class="breadcrumbs" aria-label="' . $lang->trans('breadcrumbs_aria', null, 'Breadcrumbs') . '">';
        $html .= '<ol class="breadcrumb">';
        if ($args['show_home']) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item"><a href="' . esc_url(home_url('/')) . '">' . $args['home'] . '</a></li>' . $args['after_item'];
        }
        if (is_category() || is_single()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ';
            if (is_category()) {
                $cat = get_category(get_query_var('cat'), false);
                if ($cat && $cat->parent != 0) {
                    $parent_categories = get_category_parents($cat->parent, true, ' ' . $args['delimiter'] . ' ');
                    $html .= substr($parent_categories, 0, -3);
                }
                $html .= $args['before'] . single_cat_title('', false) . $args['after'];
            }
            if (is_single()) {
                $categories = get_the_category();
                if (!empty($categories)) {
                    $category = $categories[0];
                    if ($category->parent != 0) {
                        $parent_categories = get_category_parents($category->parent, true, ' ' . $args['delimiter'] . ' ');
                        $html .= substr($parent_categories, 0, -3);
                    }
                    $html .= '<a href="' . esc_url(get_category_link($category->term_id)) . '">' . $category->name . '</a> ' . $args['delimiter'] . ' ';
                }
                if ($args['show_current']) {
                    $html .= $args['before'] . get_the_title() . $args['after'];
                }
            }
            $html .= '</li>' . $args['after_item'];
        } elseif (is_page()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ';
            if (isset($post) && $post->post_parent) {
                $parent_id = $post->post_parent;
                $breadcrumbs = [];
                while ($parent_id) {
                    $page = get_post($parent_id);
                    $breadcrumbs[] = '<a href="' . esc_url(get_permalink($page->ID)) . '">' . get_the_title($page->ID) . '</a>';
                    $parent_id = $page->post_parent;
                }
                $breadcrumbs = array_reverse($breadcrumbs);
                foreach ($breadcrumbs as $crumb) {
                    $html .= $crumb . ' ' . $args['delimiter'] . ' ';
                }
            }
            if ($args['show_current']) {
                $html .= $args['before'] . get_the_title() . $args['after'];
            }
            $html .= '</li>' . $args['after_item'];
        } elseif (is_tag()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . single_tag_title('', false) . $args['after'] . '</li>' . $args['after_item'];
        } elseif (is_author()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . get_the_author() . $args['after'] . '</li>' . $args['after_item'];
        } elseif (is_year()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . get_the_date('Y') . $args['after'] . '</li>' . $args['after_item'];
        } elseif (is_month()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . get_the_date('F Y') . $args['after'] . '</li>' . $args['after_item'];
        } elseif (is_day()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . get_the_date() . $args['after'] . '</li>' . $args['after_item'];
        } elseif (is_tax()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . single_term_title('', false) . $args['after'] . '</li>' . $args['after_item'];
        } elseif (is_post_type_archive()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . post_type_archive_title('', false) . $args['after'] . '</li>' . $args['after_item'];
        } elseif (is_search()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . $lang->trans('search_results_for', null, 'Search results for') . ' "' . get_search_query() . '"' . $args['after'] . '</li>' . $args['after_item'];
        } elseif (is_404()) {
            $html .= $args['before_item'] . '<li class="breadcrumb-item">' . $args['delimiter'] . ' ' . $args['before'] . $lang->trans('error_404', null, '404 Not Found') . $args['after'] . '</li>' . $args['after_item'];
        }
        $html .= '</ol>';
        $html .= '</nav>';
        return $html;
    }
    public function wpImage(int $attachment_id, $size = 'thumbnail', array $attr = []): string
    {
        return wp_get_attachment_image($attachment_id, $size, false, $attr);
    }
    public function wpImageUrl(int $attachment_id, $size = 'thumbnail')
    {
        $image = wp_get_attachment_image_src($attachment_id, $size);
        return $image ? $image[0] : false;
    }
    public function wpPostThumbnail(?int $post_id = null, $size = 'thumbnail', array $attr = []): string
    {
        if ($post_id === null) {
            $post_id = get_the_ID();
        }
        if (has_post_thumbnail($post_id)) {
            return get_the_post_thumbnail($post_id, $size, $attr);
        }
        return '';
    }
    /**
     * Enqueue an asset.
     *
     * @param string $handle Asset handle
     * @param string $src Asset source
     * @param array $deps Asset dependencies
     * @param string|bool $ver Asset version
     * @param bool $in_footer Whether to enqueue in footer
     * @param string $type Asset type (script or style)
     * @return bool True on success, false on failure
     */
    public function wpEnqueueAsset(string $handle, string $src, array $deps = [], $ver = false, bool $in_footer = true, string $type = 'script'): bool
    {
        if ($type === 'script') {
            wp_enqueue_script($handle, $src, $deps, $ver, $in_footer);
            return true;
        } elseif ($type === 'style') {
            wp_enqueue_style($handle, $src, $deps, $ver);
            return true;
        }
        return false;
    }
}

================
File: src/Components/Slider/Variants/WideAuto/views/wide-auto.twig
================
{#
 /**
  * Component: WideAutoSlider
  * Developed by: Sayyed Jamal Ghasemi (Full Stack Developer)
  * Email: info@jamalghasemi.com
  * LinkedIn: https://www.linkedin.com/in/jamal1364/
  * Website: https://jamalghasemi.com
  * Description: Full-width, auto-playing slider (max-height 530 px) with dots nav.
  */
#}

{% macro dot(index, current) %}
  <button
    type="button"
    :class="{'bg-primary': index === current, 'bg-gray-300': index !== current}"
    class="w-3 h-3 rounded-full transition-colors duration-300 focus:outline-none"
    @click="goTo(index)"
    :aria-label="`اسلاید ${index + 1}`"
  ></button>
{% endmacro %}

{% set slides = slides|default([]) %}
<section
  x-data="slider({{ slides|length }})"
  x-init="init()"
  role="region"
  aria-roledescription="carousel"
  aria-label="اسلایدر اصلی سایت"
  class="relative w-full {{ heightClass }} aspect-[16/6] overflow-hidden"
>
  {# Slides #}
  <template x-for="(slide, idx) in slides" :key="idx">
    <div
      x-show="idx === current"
      x-transition:enter="opacity-0"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="opacity-100"
      x-transition:leave-end="opacity-0"
      class="absolute inset-0 w-full h-full"
    >
      <img
        :src="slide.image"
        :alt="slide.alt || `اسلاید ${idx + 1}`"
        class="object-fit w-full h-full"
        loading="lazy"
        decoding="async"
      />
      <div
        x-show="slide.title || slide.subtitle || slide.button_text"
        class="absolute inset-0 flex flex-col justify-center px-6 lg:px-20"
        :class="{
          'items-start text-left': slide.text_position === 'left',
          'items-center text-center': slide.text_position === 'center',
          'items-end text-right': slide.text_position === 'right'
        }"
      >
        <h2 class="text-3xl lg:text-5xl font-bold text-white drop-shadow">{{ slide.title }}</h2>
        <p class="mt-2 text-lg lg:text-2xl text-white/90 drop-shadow">{{ slide.subtitle }}</p>
        <template x-if="slide.button_text && slide.button_link">
          <a
            :href="slide.button_link"
            class="mt-4 inline-flex items-center px-6 py-3 rounded-lg bg-primary text-white font-medium shadow-lg hover:bg-primary/90 transition"
          >{{ slide.button_text }}</a>
        </template>
      </div>
    </div>
  </template>

  
  {# --- Dots Navigation --- #}
    <div class="absolute bottom-4 w-full flex justify-center gap-2">
    <template x-for="i in total" :key="i">
        <button
        type="button"
        class="w-3 h-3 rounded-full transition-colors duration-300 focus:outline-none"
        :class="(i - 1) === current ? 'bg-primary' : 'bg-gray-300'"
        @click="goTo(i - 1)"
        :aria-label="`اسلاید ${i}`"
        ></button>
    </template>
    </div>


  {# Alpine Component Definition #}
  <script>
window.slider = function (total) {
    return {
        slides: {{ slides|json_encode|raw }},
        total,
        current: 0,
        timer: null,
        interval: {{ interval|default(5000) }},
        init() { this.start() },
        start() { this.timer = setInterval(() => this.next(), this.interval) },
        stop()  { clearInterval(this.timer) },
        next()  { this.current = (this.current + 1) % this.total },
        goTo(i) { this.current = i; this.stop(); this.start() },
    }
}
</script>

</section>

================
File: src/Config/theme_settings_definitions.php
================
<?php
return [
    'general' => [
        'menu_slug'   => 'theme-settings-general-settings',
        'menu_order'  => 0,
        'title'       => 'تنظیمات عمومی',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'اطلاعات پایه',
                'name' => 'tab_basic_info'
            ],
            [
                'type' => 'image',
                'label' => 'لوگوی اصلی سایت',
                'name' => 'logo_main',
                'instructions' => 'لوگو باید حداقل 100×30 پیکسل باشد. فرمت مجاز: webp، svg، avif',
                'required' => true,
                'return_format' => 'array',
                'preview_size' => 'medium',
                'min_width' => 100,
                'min_height' => 30,
                'mime_types' => 'webp,svg,avif'
            ],
            [
                'type' => 'image',
                'label' => 'لوگوی موبایل',
                'name' => 'logo_mobile',
                'instructions' => 'اختیاری',
                'return_format' => 'array',
                'preview_size' => 'medium',
                'mime_types' => 'webp,svg,avif'
            ],
            [
                'type' => 'image',
                'label' => 'فاوآیکون',
                'name' => 'favicon',
                'instructions' => 'سایز 32×32 پیکسل، فرمت: webp، ico',
                'required' => true,
                'return_format' => 'array',
                'preview_size' => 'thumbnail',
                'min_width' => 32,
                'min_height' => 32,
                'mime_types' => 'webp,ico'
            ],
            [
                'type' => 'tab',
                'label' => 'اطلاعات تماس',
                'name' => 'tab_contact_info'
            ],
            [
                'type' => 'text',
                'label' => 'شماره تماس',
                'name' => 'phone',
                'required' => true,
                'instructions' => 'شماره تلفن اصلی سایت',
                'default_value' => ''
            ],
            [
                'type' => 'text',
                'label' => 'شماره موبایل',
                'name' => 'mobile'
            ],
            [
                'type' => 'email',
                'label' => 'ایمیل',
                'name' => 'email',
                'required' => true,
                'instructions' => 'ایمیل رسمی پشتیبانی'
            ],
            [
                'type' => 'textarea',
                'label' => 'آدرس',
                'name' => 'address',
                'rows' => 3,
            ],
        ]
    ],
    'header' => [
        'menu_slug'   => 'theme-settings-header-settings',
        'menu_order'  => 1,
        'title'       => 'تنظیمات هدر',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'تنظیمات کلی هدر',
                'name' => 'tab_general'
            ],
            [
                'type' => 'true_false',
                'label' => 'هدر چسبان',
                'name' => 'sticky_header',
                'instructions' => 'فعال کردن هدر چسبان در بالای صفحه',
                'default_value' => 1,
            ],
            [
                'type' => 'tab',
                'label' => 'نوار بالای هدر',
                'name' => 'tab_topbar'
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش نوار بالای هدر',
                'name' => 'topbar_show',
                'default_value' => 1,
            ],
            [
                'type' => 'text',
                'label' => 'متن نوار بالا',
                'name' => 'topbar_text',
                'conditional_logic' => [
                    [
                        [
                            'field' => 'header_topbar_show',
                            'operator' => '==',
                            'value' => '1'
                        ]
                    ]
                ],
            ],
            [
                'type' => 'tab',
                'label' => 'منوها و آیکون‌ها',
                'name' => 'tab_menus'
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش جستجو',
                'name' => 'show_search',
                'default_value' => 1
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش سبد خرید',
                'name' => 'show_cart',
                'default_value' => 1
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش علاقه‌مندی‌ها',
                'name' => 'show_wishlist',
                'default_value' => 1
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش حساب کاربری',
                'name' => 'show_account',
                'default_value' => 1
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش مقایسه محصولات',
                'name' => 'show_compare',
                'default_value' => 1
            ],
        ]
    ],
    'footer' => [
        'menu_slug'   => 'theme-settings-footer-settings',
        'menu_order'  => 2,
        'title'       => 'تنظیمات فوتر',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'تنظیمات کلی فوتر',
                'name' => 'tab_general'
            ],
            [
                'type' => 'select',
                'label' => 'استایل فوتر',
                'name' => 'footer_style',
                'choices' => [
                    'style1' => 'استایل 1 (4 ستون)',
                    'style2' => 'استایل 2 (3 ستون)',
                    'style3' => 'استایل 3 (2 ستون)'
                ],
                'default_value' => 'style1',
            ],
            [
                'type' => 'tab',
                'label' => 'ستون اول',
                'name' => 'tab_column1'
            ],
            [
                'type' => 'text',
                'label' => 'عنوان ستون اول',
                'name' => 'col1_title'
            ],
            [
                'type' => 'select',
                'label' => 'نوع محتوا',
                'name' => 'col1_content_type',
                'choices' => [
                    'custom' => 'محتوای سفارشی',
                    'menu'   => 'منو'
                ],
                'default_value' => 'custom'
            ],
            [
                'type' => 'wysiwyg',
                'label' => 'محتوای سفارشی',
                'name'  => 'col1_custom_content',
                'conditional_logic' => [
                    [
                        [
                            'field' => 'footer_col1_content_type',
                            'operator' => '==',
                            'value' => 'custom'
                        ]
                    ]
                ]
            ],
            [
                'type' => 'nav_menu',
                'label' => 'انتخاب منو',
                'name'  => 'col1_menu',
                'conditional_logic' => [
                    [
                        [
                            'field' => 'footer_col1_content_type',
                            'operator' => '==',
                            'value' => 'menu'
                        ]
                    ]
                ]
            ],
        ]
    ],
    'homepage' => [
        'menu_slug'   => 'theme-settings-homepage-settings',
        'menu_order'  => 3,
        'title'       => 'تنظیمات صفحه اصلی',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'اسلایدر',
                'name' => 'tab_slider',
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش اسلایدر',
                'name' => 'slider_show',
                'default_value' => 1,
                'ui' => 1
            ],
            [
                'type' => 'repeater',
                'label' => 'اسلایدها',
                'name' => 'slider_slides',
                'instructions' => 'افزودن اسلاید جدید به اسلایدر',
                'required' => 1,
                'conditional_logic' => [
                    [
                        [
                            'field' => 'slider_show',
                            'operator' => '==',
                            'value' => '1'
                        ]
                    ]
                ],
                'min' => 0,
                'layout' => 'block',
                'button_label' => 'افزودن اسلاید',
                'sub_fields' => [
                    [
                        'type' => 'image',
                        'label' => 'تصویر اسلاید',
                        'name' => 'image',
                        'required' => 1,
                        'return_format' => 'array',
                        'preview_size' => 'medium',
                        'min_width' => 1200,
                        'min_height' => 500,
                        'mime_types' => 'webp,svg,avif,jpg,jpeg,png',
                        'instructions' => 'حداقل سایز تصویر: 1200×500 پیکسل'
                    ],
                    [
                        'type' => 'text',
                        'label' => 'عنوان',
                        'name' => 'title'
                    ],
                    [
                        'type' => 'text',
                        'label' => 'زیرعنوان',
                        'name' => 'subtitle'
                    ],
                    [
                        'type' => 'text',
                        'label' => 'متن دکمه',
                        'name' => 'button_text'
                    ],
                    [
                        'type' => 'url',
                        'label' => 'لینک دکمه',
                        'name' => 'button_link'
                    ],
                    [
                        'type' => 'select',
                        'label' => 'موقعیت متن',
                        'name' => 'text_position',
                        'choices' => [
                            'right' => 'راست',
                            'left'  => 'چپ',
                            'center' => 'وسط'
                        ],
                        'default_value' => 'right'
                    ]
                ]
            ],
        ]
    ],
    'shop' => [
        'menu_slug'   => 'theme-settings-shop-settings',
        'menu_order'  => 4,
        'title'       => 'تنظیمات فروشگاه',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'تنظیمات نمایش محصولات',
                'name' => 'tab_products_display'
            ],
            [
                'type' => 'number',
                'label' => 'تعداد محصولات در هر صفحه',
                'name' => 'products_per_page',
                'default_value' => 12,
                'min' => 1
            ],
            [
                'type' => 'select',
                'label' => 'نوع نمایش پیش‌فرض',
                'name' => 'default_display_type',
                'choices' => [
                    'grid' => 'شبکه‌ای',
                    'list' => 'لیستی'
                ],
                'default_value' => 'grid'
            ],
            [
                'type' => 'select',
                'label' => 'تعداد ستون‌ها در حالت دسکتاپ',
                'name' => 'columns_desktop',
                'choices' => [2 => '2', 3 => '3', 4 => '4', 5 => '5'],
                'default_value' => 4
            ],
        ]
    ],
    'inner' => [
        'menu_slug'   => 'theme-settings-inner-pages-settings',
        'menu_order'  => 5,
        'title'       => 'تنظیمات صفحات داخلی',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'تنظیمات کلی صفحات',
                'name' => 'tab_general'
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش عنوان صفحه',
                'name' => 'show_page_title',
                'default_value' => 1,
                'ui' => 1
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش مسیر (breadcrumb)',
                'name' => 'show_breadcrumb',
                'default_value' => 1,
                'ui' => 1
            ],
            [
                'type' => 'image',
                'label' => 'تصویر هدر پیش‌فرض',
                'name' => 'default_header_image',
                'return_format' => 'array',
                'preview_size' => 'medium',
                'mime_types' => 'webp,svg,avif,jpg,jpeg,png'
            ],
            [
                'type' => 'number',
                'label' => 'ارتفاع هدر صفحات (پیکسل)',
                'name' => 'header_height',
                'default_value' => 300,
                'min' => 100,
                'max' => 1000,
            ],
        ]
    ],
    'contact' => [
        'menu_slug'   => 'theme-settings-contact-settings',
        'menu_order'  => 6,
        'title'       => 'تنظیمات تماس با ما',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'اطلاعات تماس',
                'name' => 'tab_contact_info'
            ],
            [
                'type' => 'text',
                'label' => 'عنوان صفحه',
                'name' => 'page_title',
                'default_value' => 'تماس با ما'
            ],
            [
                'type' => 'wysiwyg',
                'label' => 'توضیحات صفحه',
                'name' => 'page_description'
            ],
            [
                'type' => 'email',
                'label' => 'ایمیل تماس',
                'name' => 'email'
            ],
            [
                'type' => 'text',
                'label' => 'شماره تماس',
                'name' => 'phone'
            ],
        ]
    ],
    'about' => [
        'menu_slug'   => 'theme-settings-about-settings',
        'menu_order'  => 7,
        'title'       => 'تنظیمات درباره ما',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'محتوای اصلی',
                'name' => 'tab_main_content'
            ],
            [
                'type' => 'text',
                'label' => 'عنوان صفحه',
                'name' => 'page_title',
                'default_value' => 'درباره ما',
            ],
            [
                'type' => 'textarea',
                'label' => 'توضیحات کوتاه',
                'name' => 'short_description',
                'rows' => 3
            ],
            [
                'type' => 'wysiwyg',
                'label' => 'محتوای اصلی',
                'name' => 'main_content'
            ],
            [
                'type' => 'image',
                'label' => 'تصویر اصلی',
                'name' => 'main_image',
                'mime_types' => 'webp,svg,avif,jpg,jpeg,png',
                'return_format' => 'array',
                'preview_size' => 'medium'
            ],
            [
                'type' => 'tab',
                'label' => 'تیم ما',
                'name' => 'tab_team'
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش بخش تیم',
                'name' => 'show_team_section',
                'default_value' => 1,
                'ui' => 1
            ],
            [
                'type' => 'text',
                'label' => 'عنوان بخش',
                'name' => 'team_section_title',
                'default_value' => 'تیم ما'
            ],
            [
                'type' => 'text',
                'label' => 'توضیحات بخش',
                'name' => 'team_section_description'
            ],
            [
                'type' => 'repeater',
                'label' => 'اعضای تیم',
                'name' => 'team_members',
                'button_label' => 'افزودن عضو',
                'sub_fields' => [
                    [
                        'type' => 'image',
                        'label' => 'تصویر',
                        'name' => 'image',
                        'mime_types' => 'webp,svg,avif,jpg,jpeg,png',
                        'return_format' => 'array',
                        'preview_size' => 'thumbnail',
                    ],
                    [
                        'type' => 'text',
                        'label' => 'نام',
                        'name' => 'name'
                    ],
                    [
                        'type' => 'text',
                        'label' => 'سمت',
                        'name' => 'position'
                    ],
                    [
                        'type' => 'text',
                        'label' => 'توضیحات',
                        'name' => 'description'
                    ],
                    [
                        'type' => 'repeater',
                        'label' => 'شبکه‌های اجتماعی',
                        'name' => 'socials',
                        'button_label' => 'افزودن شبکه',
                        'sub_fields' => [
                            [
                                'type' => 'select',
                                'label' => 'نوع شبکه',
                                'name' => 'type',
                                'choices' => [
                                    'instagram' => 'اینستاگرام',
                                    'telegram'  => 'تلگرام',
                                    'linkedin'  => 'لینکدین',
                                    'twitter'   => 'توییتر',
                                ],
                            ],
                            [
                                'type' => 'url',
                                'label' => 'لینک',
                                'name' => 'link'
                            ]
                        ]
                    ]
                ]
            ],
        ]
    ],
    'social' => [
        'menu_slug'   => 'theme-settings-social-settings',
        'menu_order'  => 8,
        'title'       => 'تنظیمات شبکه‌های اجتماعی',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'شبکه‌های اجتماعی',
                'name' => 'tab_social_links'
            ],
            [
                'type' => 'url',
                'label' => 'اینستاگرام',
                'name'  => 'instagram'
            ],
            [
                'type' => 'url',
                'label' => 'تلگرام',
                'name'  => 'telegram'
            ],
            [
                'type' => 'url',
                'label' => 'واتس‌اپ',
                'name'  => 'whatsapp'
            ],
            [
                'type' => 'url',
                'label' => 'لینکدین',
                'name'  => 'linkedin'
            ],
            [
                'type' => 'url',
                'label' => 'توییتر',
                'name'  => 'twitter'
            ],
            [
                'type' => 'url',
                'label' => 'یوتیوب',
                'name'  => 'youtube'
            ],
            [
                'type' => 'url',
                'label' => 'آپارات',
                'name'  => 'aparat'
            ],
            [
                'type' => 'url',
                'label' => 'پینترست',
                'name'  => 'pinterest'
            ],
            [
                'type' => 'tab',
                'label' => 'تنظیمات نمایش',
                'name' => 'tab_display_settings'
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش در هدر',
                'name'  => 'show_in_header',
                'default_value' => 1,
                'ui' => 1,
            ],
            [
                'type' => 'true_false',
                'label' => 'نمایش در فوتر',
                'name'  => 'show_in_footer',
                'default_value' => 1,
                'ui' => 1,
            ],
            [
                'type' => 'select',
                'label' => 'سایز آیکون‌ها',
                'name'  => 'icon_size',
                'choices' => [
                    'small'  => 'کوچک',
                    'medium' => 'متوسط',
                    'large'  => 'بزرگ',
                ],
                'default_value' => 'medium',
            ],
            [
                'type' => 'select',
                'label' => 'رنگ آیکون‌ها',
                'name'  => 'icon_color',
                'choices' => [
                    'color'  => 'رنگی',
                    'bw'     => 'سیاه و سفید',
                    'custom' => 'رنگ سفارشی',
                ],
                'default_value' => 'color',
            ],
            [
                'type' => 'color_picker',
                'label' => 'رنگ سفارشی',
                'name'  => 'custom_color',
                'conditional_logic' => [
                    [
                        [
                            'field' => 'social_icon_color',
                            'operator' => '==',
                            'value' => 'custom',
                        ]
                    ]
                ]
            ]
        ]
    ],
    'scripts' => [
        'menu_slug'   => 'theme-settings-scripts-settings',
        'menu_order'  => 9,
        'title'       => 'تنظیمات اسکریپت‌ها',
        'capability' => 'manage_options',
        'fields' => [
            [
                'type' => 'tab',
                'label' => 'کدهای سفارشی',
                'name' => 'tab_custom_code'
            ],
            [
                'type' => 'code',
                'label' => 'کد سفارشی CSS',
                'name'  => 'custom_css',
                'language' => 'css',
                'rows' => 6,
            ],
            [
                'type' => 'code',
                'label' => 'کد سفارشی JavaScript',
                'name'  => 'custom_js',
                'language' => 'javascript',
                'rows' => 6,
            ],
            [
                'type' => 'tab',
                'label' => 'کدهای تحلیلی',
                'name' => 'tab_analytics'
            ],
            [
                'type' => 'textarea',
                'label' => 'کد گوگل آنالیتیکس',
                'name'  => 'google_analytics',
                'rows' => 4
            ],
            [
                'type' => 'textarea',
                'label' => 'کد گوگل تگ منیجر',
                'name'  => 'google_tag_manager',
                'rows' => 4
            ],
            [
                'type' => 'textarea',
                'label' => 'سایر کدهای تحلیلی',
                'name'  => 'other_analytics',
                'rows' => 4
            ],
            [
                'type' => 'tab',
                'label' => 'کدهای سربرگ و پاورقی',
                'name' => 'tab_head_footer'
            ],
            [
                'type' => 'textarea',
                'label' => 'کدهای اضافی سربرگ',
                'name'  => 'head_extra_code',
                'rows' => 5,
                'instructions' => 'کدهایی که در داخل تگ head قرار می‌گیرند'
            ],
            [
                'type' => 'textarea',
                'label' => 'کدهای اضافی پاورقی',
                'name'  => 'footer_extra_code',
                'rows' => 5,
                'instructions' => 'کدهایی که قبل از بسته شدن تگ body قرار می‌گیرند'
            ]
        ]
    ],
];

================
File: src/Utilities/Theme_Settings_Cache.php
================
<?php
namespace jamal13647850\wphelpers\Utilities;
use jamal13647850\wphelpers\Cache\CacheManager;
defined('ABSPATH') || exit();
class Theme_Settings_Cache
{
    protected $driver;
    protected $group_keys = [];
    protected $prefix;
    protected $bypass = false;
    public function __construct($prefix = 'theme_settings_')
    {
        $this->prefix = $prefix;
        $this->bypass = $this->isDebug();
        if (!$this->bypass && function_exists('wp_cache_set') && $this->isRedisAvailable()) {
            $this->driver = new CacheManager('object', $this->prefix);
        } else {
            $this->driver = new CacheManager('transient', $this->prefix);
        }
    }
    protected function isDebug()
    {
        if (defined('CACHE_THEME') && CACHE_THEME)      return false;
        if (defined('WP_DEBUG') && WP_DEBUG)      return true;
        if (defined('WP_ENV') && WP_ENV === 'development') return true;
        return false;
    }
    protected function isRedisAvailable()
    {
        global $wp_object_cache;
        return is_object($wp_object_cache) && method_exists($wp_object_cache, 'redis');
    }
    public function get($group)
    {
        if ($this->bypass) return false;
        return $this->driver->get('group_' . $group, false);
    }
    public function set($group, $data, $expiration = 604800)
    {
        if ($this->bypass) return false;
        return $this->driver->set('group_' . $group, $data, $expiration);
    }
    public function flush_group($group)
    {
        if ($this->bypass) return true;
        return $this->driver->delete('group_' . $group);
    }
    public function flush_all()
    {
        if ($this->bypass) return true;
        return $this->driver->flush();
    }
}

================
File: .gitignore
================
repomix-output.txt
wphelper.txt
repomix.config.json

================
File: src/Components/Slider/AbstractSlider.php
================
<?php
namespace jamal13647850\wphelpers\Components\Slider;
use jamal13647850\wphelpers\Views\View;
use jamal13647850\wphelpers\Components\Slider\Options\SliderOptions;
use jamal13647850\wphelpers\Assets\AssetManager;
abstract class AbstractSlider
{
    protected const TWIG_PREFIX = '@slider_';
    protected const TEMPLATE_NAMESPACE = '';
    /**
     * View object used for rendering templates.
     *
     * @var View
     */
    protected View $view;
    /**
     * AbstractSlider constructor.
     * Initializes the view and registers the variant-specific namespace and template path.
     *
     * @return void
     */
    public function __construct()
    {
        $this->view = new View();
        /* ---------- VALIDATE NAMESPACE PREFIX ---------- */
        if (! str_starts_with(static::TEMPLATE_NAMESPACE, self::TWIG_PREFIX)) {
            throw new \RuntimeException(
                static::class . ' must define TEMPLATE_NAMESPACE starting with "' .
                self::TWIG_PREFIX . '"'
            );
        }
        // Each variant registers its own Twig template namespace and path.
        $this->view->addPath(
            static::TEMPLATE_NAMESPACE,
            static::getViewsPath()
        );
    }
    /**
     * Get the path to the variant's views folder.
     *
     * Child classes must implement this to specify where their templates reside.
     *
     * @return string Absolute path to the views directory.
     */
    abstract protected static function getViewsPath(): string;
    abstract public function render(array $slides, array $options = []): string;
    abstract protected static function defaultOptions(): array;
    protected static function assets(): array
    {
        return [
            'styles'  => [],
            'scripts' => [],
        ];
    }
    protected function enqueueAssets(): void
    {
        foreach (static::assets()['styles'] as $style) {
            AssetManager::style(
                $style['handle'],
                $style['src'],
                $style['deps']  ?? [],
                $style['ver']   ?? null,
                $style['media'] ?? 'all'
            );
        }
        foreach (static::assets()['scripts'] as $script) {
            AssetManager::script(
                $script['handle'],
                $script['src'],
                $script['deps']   ?? [],
                $script['ver']    ?? null,
                $script['footer'] ?? true
            );
        }
    }
    protected function makeOptions(array $incoming): SliderOptions
    {
        return new SliderOptions($incoming, static::defaultOptions());
    }
    protected function sanitizeSlides(array $slides): array
    {
        return array_map(static function (array $s): array {
            return [
                'image'         => esc_url_raw($s['image'] ?? ''),
                'alt'           => sanitize_text_field($s['alt'] ?? ''),
                'title'         => sanitize_text_field($s['title'] ?? ''),
                'subtitle'      => sanitize_text_field($s['subtitle'] ?? ''),
                'button_text'   => sanitize_text_field($s['button_text'] ?? ''),
                'button_link'   => esc_url_raw($s['button_link'] ?? ''),
                'text_position' => in_array($s['text_position'] ?? 'right', ['left','center','right'], true)
                                    ? $s['text_position']
                                    : 'right',
            ];
        }, $slides);
    }
}

================
File: src/Config.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers;
defined('ABSPATH') || exit();
class Config
{
    private static array $config = [];
    private static ?string $configPath = null;
    public static function init(?string $configPath = null): void
    {
        self::$config = [
            'twig' => [
                'paths' => [
                    'views' => get_template_directory() . '/templates/views',
                ],
                'cache' => [
                    'enabled' => defined('WP_ENV') && (WP_ENV === "development") ? false : true,
                    'path' => WP_CONTENT_DIR . '/cache/twig',
                ],
                'debug' => defined('WP_DEBUG') ? WP_DEBUG : false,
                'auto_reload' => defined('WP_DEBUG') && (WP_DEBUG) ? true : false,
                'strict_variables' => (defined('WP_ENV') && (WP_ENV === "development"))  ? true : false,
            ],
            'captcha' => [
                'enabled' => true,
                'difficulty' => 'medium',
                'session_key' => 'captcha_answer',
            ],
            'sms' => [
                'providers' => [
                    'faraz' => [
                        'username'    => defined('FARAZSMS_USERNAME') ? FARAZSMS_USERNAME : '',
                        'password'    => defined('FARAZSMS_PASSWORD') ? FARAZSMS_PASSWORD : '',
                        'from_number' => defined('FARAZSMS_FROM_NUMBER') ? FARAZSMS_FROM_NUMBER : '',
                        'url'         => defined('FARAZSMS_URL') ? FARAZSMS_URL : '',
                        'patterns'    => [
                            'login'   => defined('FARAZSMS_PATTERN') ? FARAZSMS_PATTERN : '',
                        ],
                    ],
                    // نمونه برای افزودن Provider دیگر:
                    // 'kavenegar' => [
                ],
            ],
            'cache' => [
                'enabled' => defined('WPH_CACHE_ENABLED') ? WPH_CACHE_ENABLED : true,
                'prefix' => defined('WPH_CACHE_PREFIX') ? WPH_CACHE_PREFIX : 'wphelpers_',
                'version' => defined('WPH_CACHE_VERSION') ? WPH_CACHE_VERSION : '1.0',
                'default_expiration' => defined('WPH_CACHE_DEFAULT_EXPIRATION') ? WPH_CACHE_DEFAULT_EXPIRATION : 3600,
            ],
            'comments' => [
                'rate_limit'   => defined('WPH_COMMENTS_RATE_LIMIT') ? WPH_COMMENTS_RATE_LIMIT : 300,
                'max_attempts' => defined('WPH_COMMENTS_MAX_ATTEMPTS') ? WPH_COMMENTS_MAX_ATTEMPTS : 5,
            ],
            'htmx' =>  [
                'validation_response_type' => defined('WPH_HTMX_VALIDATION_RESPONSE_TYPE') ? WPH_HTMX_VALIDATION_RESPONSE_TYPE : 'html',
            ],
            'megamenu' => [
                'enabled'   => defined('WPH_MEGAMENU_ENABLED') ? WPH_MEGAMENU_ENABLED : true,
                'bg_color'  => defined('WPH_MEGAMENU_BG_COLOR') ? WPH_MEGAMENU_BG_COLOR : '#fff',
                'svg'       => [
                    'color'       => defined('WPH_MEGAMENU_SVG_COLOR') ? WPH_MEGAMENU_SVG_COLOR : '#000',
                    'hover_color' => defined('WPH_MEGAMENU_SVG_HOVER_COLOR') ? WPH_MEGAMENU_SVG_HOVER_COLOR : '#0073aa',
                ],
                'menu_item' => [
                    'color'       => defined('WPH_MEGAMENU_MENU_ITEM_COLOR') ? WPH_MEGAMENU_MENU_ITEM_COLOR : '#000',
                    'hover_color' => defined('WPH_MEGAMENU_MENU_ITEM_HOVER_COLOR') ? WPH_MEGAMENU_MENU_ITEM_HOVER_COLOR : '#0073aa',
                ],
            ],
        ];
        self::$configPath = $configPath;
        if ($configPath && file_exists($configPath)) {
            $customConfig = require $configPath;
            if (is_array($customConfig)) {
                self::$config = array_replace_recursive(self::$config, $customConfig);
            }
        }
    }
    public static function get(string $key, $default = null)
    {
        if (empty(self::$config)) {
            self::init();
        }
        $keys = explode('.', $key);
        $value = self::$config;
        foreach ($keys as $k) {
            if (!isset($value[$k])) {
                return $default;
            }
            $value = $value[$k];
        }
        return $value;
    }
    public static function set(string $key, $value): void
    {
        if (empty(self::$config)) {
            self::init();
        }
        $keys = explode('.', $key);
        $lastKey = array_pop($keys);
        $current = &self::$config;
        foreach ($keys as $k) {
            if (!isset($current[$k]) || !is_array($current[$k])) {
                $current[$k] = [];
            }
            $current = &$current[$k];
        }
        $current[$lastKey] = $value;
    }
    public static function unset(string $key): bool
    {
        if (empty(self::$config)) {
            self::init();
        }
        $keys = explode('.', $key);
        $lastKey = array_pop($keys);
        $current = &self::$config;
        foreach ($keys as $k) {
            if (!isset($current[$k]) || !is_array($current[$k])) {
                return false;
            }
            $current = &$current[$k];
        }
        if (isset($current[$lastKey])) {
            unset($current[$lastKey]);
            return true;
        }
        return false;
    }
    public static function saveToOption(string $optionName, ?string $key = null): bool
    {
        if (empty(self::$config)) {
            self::init();
        }
        $value = self::$config;
        if ($key !== null) {
            $value = self::get($key);
        }
        return update_option($optionName, $value, false);
    }
    public static function loadFromOption(string $optionName, ?string $key = null): bool
    {
        $value = get_option($optionName);
        if ($value === false) {
            return false;
        }
        if ($key !== null) {
            self::set($key, $value);
            return true;
        } elseif (is_array($value)) {
            self::$config = array_replace_recursive(self::$config, $value);
            return true;
        }
        return false;
    }
    public static function getACFOption(string $key, $default = null)
    {
        if (function_exists('get_field')) {
            $result = get_field($key, 'option');
            if ($result !== null && $result !== false) {
                return $result;
            }
        }
        $result = get_option($key, $default);
        return $result !== false ? $result : $default;
    }
}

================
File: src/Navigation/AlpineMenuManager.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Navigation;
defined('ABSPATH') || exit();
class AlpineMenuManager
{
    private array $default_args = [
        'echo'        => false,
        'fallback_cb' => false,
    ];
    public function get_desktop_menu(string $theme_location, array $override_args = [], array $walker_options = []): string
    {
        $desktop_defaults = [
            'theme_location' => $theme_location,
            'menu_id'        => 'primary-menu-desktop',
            'menu_class'     => 'flex items-center space-x-2 relative',
            'items_wrap'     => '<ul id="%1$s" class="%2$s" aria-label="' . esc_attr__('ناوبری اصلی', 'your-theme-textdomain') . '">%3$s</ul>',
            'walker'         => new AlpineNavWalker('desktop', $walker_options),
        ];
        $args = wp_parse_args($override_args, wp_parse_args($desktop_defaults, $this->default_args));
        $menu_output = wp_nav_menu($args);
        return is_string($menu_output) ? $menu_output : '';
    }
    /**
     * Generate a mobile navigation menu with accordion behavior.
     *
     * This method adds Alpine.js state (`x-data="{ activeMenu: null }"`) to allow
     * only one submenu open at a time (accordion pattern).
     *
     * @param string $theme_location Theme location registered in WordPress.
     * @param array  $override_args  (Optional) Custom wp_nav_menu args to override defaults.
     * @param array  $walker_options (Optional) Options passed to AlpineNavWalker.
     * @return string HTML markup of the menu or empty string on failure.
     *
     * @example
     *   $manager = new AlpineMenuManager();
     *   echo $manager->get_mobile_menu('main_menu');
     */
    public function get_mobile_menu(string $theme_location, array $override_args = [], array $walker_options = []): string
    {
        $mobile_defaults = [
            'theme_location' => $theme_location,
            'menu_id'        => 'primary-menu-mobile',
            'menu_class'     => 'space-y-2',
            'items_wrap'     => '<ul id="%1$s" class="%2$s" x-data="{ activeMenu: null }" aria-label="' . esc_attr__('ناوبری موبایل', 'your-theme-textdomain') . '">%3$s</ul>',
            'walker'         => new AlpineNavWalker('mobile', $walker_options),
        ];
        $args           = wp_parse_args($override_args, wp_parse_args($mobile_defaults, $this->default_args));
        $args['walker'] = new AlpineNavWalker('mobile', $walker_options);
        $args['echo']   = false;
        $menu_output = wp_nav_menu($args);
        return is_string($menu_output) ? $menu_output : '';
    }
    /**
     * Generate a simple horizontal menu.
     *
     * @param string $theme_location Theme location registered in WordPress.
     * @param array  $override_args  (Optional) Custom wp_nav_menu args to override defaults.
     * @param array  $walker_options (Optional) Options passed to AlpineNavWalker.
     * @return string HTML markup of the menu or empty string on failure.
     *
     * @example
     *   $manager = new AlpineMenuManager();
     *   echo $manager->get_simple_menu('top_menu');
     */
    public function get_simple_menu(string $theme_location, array $override_args = [], array $walker_options = []): string
    {
        $simple_defaults = [
            'theme_location' => $theme_location,
            'menu_id'        => 'top-menu',
            'menu_class'     => 'flex items-center space-x-1 sm:space-x-2 lg:space-x-4',
            'items_wrap'     => '<ul id="%1$s" class="%2$s" aria-label="' . esc_attr__('ناوبری بالایی', 'your-theme-textdomain') . '">%3$s</ul>',
            'walker'         => new AlpineNavWalker('simple', $walker_options),
        ];
        $args = wp_parse_args($override_args, wp_parse_args($simple_defaults, $this->default_args));
        $args['walker'] = new AlpineNavWalker('simple', $walker_options);
        $args['echo']   = false;
        $menu_output = wp_nav_menu($args);
        return is_string($menu_output) ? $menu_output : '';
    }
    /**
     * Generate a dropdown menu.
     *
     * @param string $theme_location Theme location registered in WordPress.
     * @param array  $override_args  (Optional) Custom wp_nav_menu args to override defaults.
     * @param array  $walker_options (Optional) Options passed to AlpineNavWalker.
     * @return string HTML markup of the menu or empty string on failure.
     *
     * @example
     *   $manager = new AlpineMenuManager();
     *   echo $manager->get_dropdown_menu('dropdown_menu');
     */
    public function get_dropdown_menu(string $theme_location, array $override_args = [], array $walker_options = []): string
    {
        $dropdown_defaults = [
            'theme_location' => $theme_location,
            'menu_id'        => 'dropdown-menu',
            'menu_class'     => 'flex list-none m-0 p-0',
            'items_wrap'     => '<ul id="%1$s" class="%2$s">%3$s</ul>',
            'walker'         => new AlpineNavWalker('dropdown', $walker_options),
        ];
        $args = wp_parse_args($override_args, wp_parse_args($dropdown_defaults, $this->default_args));
        if (!isset($args['walker']) || !($args['walker'] instanceof AlpineNavWalker)) {
            $args['walker'] = new AlpineNavWalker('dropdown', $walker_options);
        }
        $args['echo'] = false;
        $menu_output = wp_nav_menu($args);
        return is_string($menu_output) ? $menu_output : '';
    }
}

================
File: src/Views/View.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Views;
defined('ABSPATH') || exit();
use Twig\Environment;
use Twig\Loader\FilesystemLoader;
use Twig\TwigFunction;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Error\SyntaxError;
use jamal13647850\wphelpers\Config;
class View
{
    private ?Environment $twig = null;
    private array $globals = [];
    private array $functions = [];
    private array $paths = [];
    public function __construct()
    {
        $this->paths = [
            '@views' => Config::get('twig.paths.views', get_template_directory() . '/templates/views'),
        ];
        $custom_paths = Config::get('twig.paths..custom', []);
        foreach ($custom_paths as $namespace => $path) {
            $this->paths[$namespace] = $path;
        }
        $this->registerDefaultFunctions();
        $custom_functions = Config::get('view.functions', []);
        foreach ($custom_functions as $name => $callback) {
            $this->registerFunction($name, $callback);
        }
        $globals = Config::get('view.globals', []);
        foreach ($globals as $name => $value) {
            $this->addGlobal($name, $value);
        }
    }
    private function initTwig(): Environment
    {
        if ($this->twig === null) {
            $loader = new FilesystemLoader();
            foreach ($this->paths as $namespace => $path) {
                if (is_dir($path)) {
                    $loader->addPath($path, substr($namespace, 1));
                }
            }
            $debug = Config::get('twig.debug', WP_DEBUG);
            $cache = Config::get('twig.cache.enabled', false) ? Config::get('twig.cache.path', WP_CONTENT_DIR . '/cache/twig') : false;
            $options = [
                'debug' => $debug,
                'cache' => $cache,
                'auto_reload' => Config::get('twig.auto_reload', true),
                'strict_variables' => Config::get('view.strict_variables', false),
            ];
            $this->twig = new Environment($loader, $options);
            foreach ($this->globals as $name => $value) {
                $this->twig->addGlobal($name, $value);
            }
            foreach ($this->functions as $name => $callback) {
                $this->twig->addFunction(new TwigFunction($name, $callback));
            }
            if ($debug) {
                $this->twig->addExtension(new \Twig\Extension\DebugExtension());
            }
            $this->twig->addExtension(new WordPressTwigExtension());
        }
        return $this->twig;
    }
    private function registerDefaultFunctions(): void
    {
        $wp_functions = [
            'get_header', 'get_footer', 'get_sidebar', 'get_template_part',
            'wp_head', 'wp_footer', 'body_class', 'post_class',
            'wp_nav_menu', 'wp_title', 'bloginfo', 'get_bloginfo',
            'get_the_title', 'the_title', 'the_content', 'the_excerpt',
            'the_permalink', 'get_the_permalink', 'get_the_ID', 'get_the_date',
            'get_the_author', 'get_the_author_meta', 'get_post_meta', 'get_post_thumbnail_id',
            'get_post_thumbnail', 'get_the_post_thumbnail', 'wp_get_attachment_image',
            'wp_get_attachment_url', 'wp_get_attachment_image_src', 'wp_enqueue_script',
            'wp_enqueue_style', 'wp_localize_script', 'get_search_form', 'comments_template',
            'comment_form', 'previous_posts_link', 'next_posts_link', 'paginate_links',
            'get_posts', 'get_terms', 'get_term_by', 'get_term_link', 'get_categories',
            'get_tags', 'get_archives_link', 'wp_list_categories', 'wp_list_pages',
            'wp_login_url', 'wp_logout_url', 'wp_registration_url', 'wp_lostpassword_url',
            'is_home', 'is_front_page', 'is_single', 'is_page', 'is_archive', 'is_category',
            'is_tag', 'is_tax', 'is_author', 'is_search', 'is_404', 'is_user_logged_in',
            'current_user_can', 'wp_nonce_field', 'wp_create_nonce', 'wp_verify_nonce',
            'esc_html', 'esc_attr', 'esc_url', 'esc_js', 'esc_textarea', 'wp_kses_post',
            'sanitize_text_field', 'sanitize_email', 'sanitize_title', 'apply_filters',
            'do_action', 'do_shortcode', 'shortcode_exists', 'wp_reset_postdata',
            'get_option', 'update_option', 'delete_option', 'get_theme_mod', 'set_theme_mod',
            'remove_theme_mod', 'get_theme_mods', 'remove_theme_mods', 'get_theme_support',
            'add_theme_support', 'remove_theme_support', 'current_theme_supports',
            '__', '_e', '_n', '_x', 'esc_html__', 'esc_html_e', 'esc_attr__', 'esc_attr_e',
        ];
        foreach ($wp_functions as $function) {
            if (function_exists($function)) {
                $this->registerFunction($function, $function);
            }
        }
    }
    public function registerFunction(string $name, callable $callback): self
    {
        $this->functions[$name] = $callback;
        if ($this->twig !== null) {
            $this->twig->addFunction(new TwigFunction($name, $callback));
        }
        return $this;
    }
    public function addGlobal(string $name, $value): self
    {
        $this->globals[$name] = $value;
        if ($this->twig !== null) {
            $this->twig->addGlobal($name, $value);
        }
        return $this;
    }
    public function addPath(string $namespace, string $path): self
    {
        $this->paths[$namespace] = $path;
        if ($this->twig !== null && is_dir($path)) {
            $this->twig->getLoader()->addPath($path, substr($namespace, 1));
        }
        return $this;
    }
    public function render(string $template, array $data = []): string
    {
        try {
            $twig = $this->initTwig();
            if (!isset($data['current_user']) && is_user_logged_in()) {
                $data['current_user'] = wp_get_current_user();
            }
            if (!isset($data['post']) && in_the_loop()) {
                global $post;
                $data['post'] = $post;
            }
            if (!isset($data['wp_query'])) {
                global $wp_query;
                $data['wp_query'] = $wp_query;
            }
            $data = apply_filters('wphelpers_view_data', $data, $template);
            return $twig->render($template, $data);
        } catch (LoaderError $e) {
            if (Config::get('view.debug', WP_DEBUG)) {
                throw $e;
            }
            return $this->renderError('Template not found: ' . $template);
        } catch (RuntimeError | SyntaxError $e) {
            if (Config::get('view.debug', WP_DEBUG)) {
                throw $e;
            }
            return $this->renderError('Error rendering template: ' . $e->getMessage());
        }
    }
    private function renderError(string $message): string
    {
        if (Config::get('view.show_errors', WP_DEBUG)) {
            return '<div class="wphelpers-view-error">' . esc_html($message) . '</div>';
        }
        return '<!-- Template Error: ' . esc_html($message) . ' -->';
    }
    public function getTwig(): Environment
    {
        return $this->initTwig();
    }
    public function templateExists(string $template): bool
    {
        try {
            $twig = $this->initTwig();
            return $twig->getLoader()->exists($template);
        } catch (\Exception $e) {
            return false;
        }
    }
    public function getTemplates(string $namespace = '@views'): array
    {
        $templates = [];
        if (isset($this->paths[$namespace])) {
            $path = $this->paths[$namespace];
            if (is_dir($path)) {
                $iterator = new \RecursiveIteratorIterator(
                    new \RecursiveDirectoryIterator($path),
                    \RecursiveIteratorIterator::LEAVES_ONLY
                );
                foreach ($iterator as $file) {
                    if ($file->isFile() && in_array($file->getExtension(), ['twig', 'html'])) {
                        $relativePath = str_replace($path . '/', '', $file->getPathname());
                        $templates[] = $relativePath;
                    }
                }
            }
        }
        return $templates;
    }
    /**
     * Clear the Twig cache.
     *
     * @return bool True if cache was cleared, false otherwise
     */
    public function clearCache(): bool
    {
        $cache_path = Config::get('view.cache.path', WP_CONTENT_DIR . '/cache/twig');
        if (is_dir($cache_path)) {
            $files = new \RecursiveIteratorIterator(
                new \RecursiveDirectoryIterator($cache_path, \RecursiveDirectoryIterator::SKIP_DOTS),
                \RecursiveIteratorIterator::CHILD_FIRST
            );
            foreach ($files as $file) {
                if ($file->isDir()) {
                    rmdir($file->getRealPath());
                } else {
                    unlink($file->getRealPath());
                }
            }
            return true;
        }
        return false;
    }
}

================
File: src/Utilities/Theme_Settings_ACF.php
================
<?php
namespace jamal13647850\wphelpers\Utilities;
use jamal13647850\wphelpers\Utilities\Theme_Settings_Cache;
use jamal13647850\wphelpers\Language\LanguageManager;
defined('ABSPATH') || exit;
class Theme_Settings_ACF
{
    private string $theme_prefix;
    private array $prefixes = [
        'general'  => 'general_',
        'header'   => 'header_',
        'footer'   => 'footer_',
        'homepage' => 'homepage_',
        'shop'     => 'shop_',
        'inner'    => 'inner_',
        'contact'  => 'contact_',
        'about'    => 'about_',
        'social'   => 'social_',
        'scripts'  => 'scripts_',
    ];
    private array $groups = [];
    private ?string $config_path = null;
    private ?Theme_Settings_Cache $cache = null;
    private LanguageManager $lang;
    public function __construct(?string $theme_prefix = null, ?string $config_path = null)
    {
        $stylesheet = function_exists('get_stylesheet') ? get_stylesheet() : 'defaulttheme';
        $this->theme_prefix = $theme_prefix ? $this->normalize_prefix($theme_prefix) : $this->normalize_prefix($stylesheet);
        $this->cache = new Theme_Settings_Cache($this->theme_prefix);
        $this->config_path = $config_path ?: get_template_directory() . '/config/theme_settings_definitions.php';
        $this->lang = LanguageManager::getInstance();
        add_action('admin_notices', [$this, 'check_acf_pro_admin_notices']);
        if (function_exists('acf_add_options_page')) {
            add_action('acf/init', [$this, 'load_config']);
            add_action('acf/init', [$this, 'register_options_pages'], 10);
            add_action('acf/init', [$this, 'register_field_groups'], 15);
        }
        add_action('acf/save_post', [$this, 'clearCacheOnSave']);
    }
    private function normalize_prefix(string $prefix): string
    {
        $prefix = strtolower($prefix);
        $prefix = preg_replace('/[^a-z0-9_]/', '_', $prefix);
        return rtrim($prefix, '_') . '_';
    }
    public function check_acf_pro_admin_notices(): void
    {
        if (
            !function_exists('acf_add_options_page') &&
            current_user_can('manage_options') &&
            is_admin()
        ) {
            echo '<div class="notice notice-error"><p><strong>' .
                $this->lang->trans(
                    'ACF Pro plugin is required for Theme Settings management.',
                    null,
                    'ACF Pro plugin is required for Theme Settings management.'
                )
                . '</strong></p></div>';
        }
    }
    public function load_config(): void
    {
        if ($this->groups) {
            return;
        }
        try {
            if (!file_exists($this->config_path)) {
                throw new \Exception("Config file not found: {$this->config_path}");
            }
            $config = require $this->config_path;
            if (!is_array($config)) {
                throw new \Exception('Config file must return an array.');
            }
            $this->groups = $config;
        } catch (\Exception $e) {
            error_log("Error loading config in Theme_Settings_ACF: " . $e->getMessage());
        }
    }
    public function setConfigPath(string $path): void
    {
        $this->config_path = $path;
        $this->groups = [];
    }
    public function register_options_pages(): void
    {
        if (!function_exists('acf_add_options_page') || empty($this->groups)) {
            return;
        }
        acf_add_options_page([
            'page_title' => $this->lang->trans('Theme Settings', null, 'Theme Settings'),
            'menu_title' => $this->lang->trans('Theme Settings', null, 'Theme Settings'),
            'menu_slug'  => $this->theme_prefix . 'theme-settings',
            'capability' => 'manage_options',
            'redirect'   => false,
            'icon_url'   => 'dashicons-admin-customizer',
            'position'   => 60,
        ]);
        foreach ($this->groups as $key => $group) {
            acf_add_options_sub_page([
                'page_title'  => $this->lang->trans($group['title'], null, $group['title']),
                'menu_title'  => $this->lang->trans($group['title'], null, $group['title']),
                'parent_slug' => $this->theme_prefix . 'theme-settings',
                'menu_slug'   => $this->theme_prefix . $group['menu_slug'],
                'capability'  => $group['capability'] ?? 'manage_options',
                'position'    => 60 + ($group['menu_order'] ?? 0),
            ]);
        }
    }
    public function register_field_groups(): void
    {
        if (empty($this->groups)) {
            $this->load_config();
        }
        foreach ($this->groups as $key => $group) {
            $this->register_settings_group($key, $group);
        }
    }
    private function register_settings_group(string $key, array $group): void
    {
        $prefix = $this->theme_prefix . ($this->prefixes[$key] ?? "{$key}_");
        $fields = $this->prepareFields($group['fields'], $prefix);
        acf_add_local_field_group([
            'key'      => $prefix . 'group_settings',
            'title'    => $this->lang->trans($group['title'], null, $group['title']),
            'fields'   => $fields,
            'location' => [[[
                'param'    => 'options_page',
                'operator' => '==',
                'value'    => $this->theme_prefix . $group['menu_slug'],
            ]]],
            'menu_order'            => $group['menu_order'] ?? 0,
            'position'              => 'acf_after_title',
            'style'                 => 'default',
            'label_placement'       => 'top',
            'instruction_placement' => 'label',
        ]);
    }
    private function prepareFields(array $fields, string $prefix): array
    {
        $result = [];
        $current_user = function_exists('wp_get_current_user') ? wp_get_current_user() : false;
        foreach ($fields as $field) {
            if (!empty($field['capability']) && !current_user_can($field['capability'])) {
                continue;
            }
            if (!empty($field['visible_for_roles']) && $current_user !== false) {
                $allowed_roles = (array) $field['visible_for_roles'];
                if (!array_intersect($allowed_roles, (array) $current_user->roles)) {
                    continue;
                }
            }
            $field_copy = $field;
            $field_copy['key'] = $prefix . ($field_copy['name'] ?? $field_copy['type'] . '_' . uniqid());
            if (isset($field_copy['name']) && $field_copy['type'] !== 'tab') {
                $field_copy['name'] = $prefix . $field_copy['name'];
            }
            if (isset($field_copy['label'])) {
                $field_copy['label'] = $this->lang->trans($field_copy['label'], null, $field_copy['label']);
            }
            if (isset($field_copy['instructions'])) {
                $field_copy['instructions'] = $this->lang->trans($field_copy['instructions'], null, $field_copy['instructions']);
            }
            if (isset($field_copy['choices']) && is_array($field_copy['choices'])) {
                foreach ($field_copy['choices'] as $choice_key => $choice_val) {
                    $field_copy['choices'][$choice_key] = $this->lang->trans($choice_val, null, $choice_val);
                }
            }
            if (!empty($field_copy['conditional_logic'])) {
                $field_copy['conditional_logic'] = $this->prefixConditionalLogicFields($field_copy['conditional_logic'], $prefix);
            }
            if (
                in_array($field_copy['type'], ['repeater', 'group', 'flexible_content'], true)
                && isset($field_copy['sub_fields'])
            ) {
                $field_copy['sub_fields'] = $this->prepareFields($field_copy['sub_fields'], $field_copy['key'] . '_');
            }
            if ($field_copy['type'] === 'flexible_content' && isset($field_copy['layouts'])) {
                foreach ($field_copy['layouts'] as &$layout) {
                    if (isset($layout['sub_fields'])) {
                        $layout_prefix = $field_copy['key'] . '_' . ($layout['name'] ?? 'layout_') . '_';
                        $layout['sub_fields'] = $this->prepareFields($layout['sub_fields'], $layout_prefix);
                    }
                }
                unset($layout);
            }
            $result[] = $field_copy;
        }
        return $result;
    }
    protected function prefixConditionalLogicFields(array $conditionalLogic, string $prefix): array
    {
        foreach ($conditionalLogic as &$group) {
            if (is_array($group)) {
                foreach ($group as &$rule) {
                    if (
                        is_array($rule)
                        && isset($rule['field'])
                        && strpos($rule['field'], $prefix) !== 0
                    ) {
                        $rule['field'] = $prefix . $rule['field'];
                    }
                }
            }
        }
        return $conditionalLogic;
    }
    public function clearCacheOnSave($post_id): void
    {
        if ($post_id !== 'options' && substr($post_id, 0, 8) !== 'options_') {
            return;
        }
        $locale = $this->lang->getCurrentLocale();
        foreach ($this->groups as $key => $group) {
            $this->cache->flush_group($key . '_' . $locale);
        }
    }
    public function getOption($field = null, string $group = 'general')
    {
        $this->load_config();
        $prefix = $this->theme_prefix . ($this->prefixes[$group] ?? "{$group}_");
        $locale = $this->lang->getCurrentLocale();
        $option_lang = "option_" . $locale;
        if (empty($field)) {
            $cache_key = $group . '_' . $locale;
            $cached = $this->cache ? $this->cache->get($cache_key) : false;
            if ($cached !== false) {
                return $cached;
            }
            $result = [];
            if (!empty($this->groups[$group]['fields'])) {
                foreach ($this->groups[$group]['fields'] as $f) {
                    if (isset($f['name']) && $f['type'] !== 'tab') {
                        $fname = $prefix . $f['name'];
                        $result[$f['name']] = function_exists('get_field')
                            ? get_field($fname, 'option')
                            : null;
                    }
                }
                if ($this->cache) {
                    $this->cache->set($cache_key, $result, 604800);
                }
            }
            return $result;
        }
        $field_name = $prefix . $field;
        $cache_key = $group . '_' . $locale;
        $cached = $this->cache ? $this->cache->get($cache_key) : false;
        if ($cached !== false && isset($cached[$field])) {
            return $cached[$field];
        }
        $value = function_exists('get_field') ? get_field($field_name, $option_lang) : null;
        if ($this->cache && $cached === false && !empty($this->groups[$group]['fields'])) {
            $all = [];
            foreach ($this->groups[$group]['fields'] as $f) {
                if (isset($f['name']) && $f['type'] !== 'tab') {
                    $all_prefix_name = $prefix . $f['name'];
                    $all[$f['name']] = function_exists('get_field')
                        ? get_field($all_prefix_name, $option_lang)
                        : null;
                }
            }
            $this->cache->set($cache_key, $all, 604800);
            if (isset($all[$field])) {
                return $all[$field];
            }
        }
        return $value;
    }
}

================
File: src/ServiceProvider.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers;
use jamal13647850\wphelpers\Views\View;
use jamal13647850\wphelpers\Components\Slider\SliderManager;
use jamal13647850\wphelpers\Components\Slider\Variants\WideAuto\WideAuto;
use jamal13647850\wphelpers\Components\Menu\MenuManager;
use jamal13647850\wphelpers\Components\Menu\Variants\MobileMenu;
use jamal13647850\wphelpers\Components\Menu\Variants\SimpleMenu;
use jamal13647850\wphelpers\Components\Menu\Variants\DropdownMenu;
use jamal13647850\wphelpers\Components\Menu\Variants\DesktopMenu;
use jamal13647850\wphelpers\Components\Menu\Variants\MultiColumnDesktopMenu;
use jamal13647850\wphelpers\Components\Menu\Variants\OverlayMobileMenu;
use jamal13647850\wphelpers\Components\Menu\MenuCacheManager;
use jamal13647850\wphelpers\Utilities\Clear_Theme_Cache;
defined('ABSPATH') || exit();
final class ServiceProvider
{
    private static bool $booted = false;
    public static function boot(): void
    {
        if (self::$booted) {
            return;
        }
        self::$booted = true;
        $theme_settings_acf = new \jamal13647850\wphelpers\Utilities\Theme_Settings_ACF();
        new Clear_Theme_Cache();
        SliderManager::register('wide-auto', WideAuto::class);
        add_action('after_setup_theme', [self::class, 'registerTwigHelpers']);
        add_action('wp_enqueue_scripts', [self::class, 'enqueueAssets']);
        MenuManager::register('mobile',   MobileMenu::class);
        MenuManager::register('simple',   SimpleMenu::class);
        MenuManager::register('dropdown', DropdownMenu::class);
        MenuManager::register('desktop',  DesktopMenu::class);
        MenuManager::register('multi-column-desktop', MultiColumnDesktopMenu::class);
        MenuManager::register('overlay-mobile',     OverlayMobileMenu::class);
        add_action('wp_update_nav_menu',         [MenuCacheManager::getInstance(), 'purgeAll'], 99);
        add_action('wp_delete_nav_menu',         [MenuCacheManager::getInstance(), 'purgeAll'], 99);
        add_action('wp_nav_menu_item_updated',   [MenuCacheManager::getInstance(), 'purgeAll'], 99, 3);
        add_action('customize_save_after',       [MenuCacheManager::getInstance(), 'purgeAll'], 99);
        add_action('acf/save_post', function ($post_id) {
            if ($post_id === 'options') {
                MenuCacheManager::getInstance()->purgeAll();
            }
        }, 99);
    }
    public static function registerTwigHelpers(): void
    {
        $view = new View();
        $view->registerFunction('slider', static function (
            string $variantKey,
            array $slides = [],
            array $options = []
        ) {
            return \jamal13647850\wphelpers\Components\Slider\SliderManager::render(
                $variantKey,
                $slides,
                $options
            );
        });
    }
    public static function enqueueAssets(): void
    {
    }
}
ServiceProvider::boot();

================
File: src/Navigation/AlpineNavWalker.php
================
<?php
declare(strict_types=1);
namespace jamal13647850\wphelpers\Navigation;
defined('ABSPATH') || exit();
class AlpineNavWalker extends \Walker_Nav_Menu
{
    private array $mega_menu_items = [];
    private ?array $current_parent = null;
    private string $menu_type = 'desktop';
    private array $current_menu_images = [];
    private array $options = [];
    private ?int $current_item_id = null;
    private ?int $current_mobile_item_id = null;
    private array $default_options = [
        'simple_link_class'             => 'text-secondary hover:text-primary transition-colors text-nowrap',
        'desktop_link_class'            => 'flex items-center gap-1 py-4 px-1 text-gray-800 hover:text-primary transition-colors text-nowrap text-sm lg:text-xs xl:text-sm',
        'desktop_link_hover_color'      => '#F25A04',
        'desktop_svg_default_fill'      => '#79528A',
        'desktop_svg_hover_fill'        => '#F25A04',
        'mobile_link_class'             => 'flex-1 py-3 text-secondary hover:text-primary transition-colors text-sm sm:text-base',
        'mobile_link_no_children_class' => 'block py-3 text-secondary hover:text-primary transition-colors text-sm sm:text-base',
        'mobile_button_class'           => 'p-2 text-dark hover:text-primary transition-colors',
        'mobile_svg_default_fill'       => '#79528A',
        'submenu_link_class'            => 'block py-2 px-4 text-gray-700 hover:text-primary hover:bg-gray-50 transition-colors',
        'mega_menu_parent_title_class'  => 'hover:text-primary transition-colors duration-300',
        'mega_menu_child_link_class'    => 'text-gray-700 hover:text-primary transition-colors duration-300 block py-1 text-sm hover:bg-gray-50 px-2 rounded',
        'dropdown_root_link_class'      => 'block text-[#333] text-[16px] font-medium transition-colors duration-300 px-[22px] pt-[18px] pb-4 border-b-2 border-transparent hover:text-[#d32f2f] hover:border-[#d32f2f]',
        'dropdown_child_link_class'     => 'relative block pr-[36px] pl-6 py-3 text-[#333] text-[15px] whitespace-nowrap transition-all duration-300 hover:bg-[#f5f5f5] hover:text-[#d32f2f] font-normal',
        'dropdown_subchild_link_class'  => 'block px-6 py-3 text-[15px] text-[#333] transition-colors duration-300 hover:text-[#d32f2f] whitespace-nowrap',
    ];
    private bool $is_multi_column = false;
    private int $multi_columns = 2;
    private array $mc_buffer = [];
    private ?int $mc_parent_id = null;
    public function __construct(string $type = 'desktop', array $options = [])
    {
        $this->menu_type = $type;
        $this->options   = wp_parse_args($options, $this->default_options);
        if (in_array($type, ['multi-column-desktop', 'overlay-mobile'])) {
            $this->setupCustomVariantOptions($type, $options);
        }
    }
    private function setupCustomVariantOptions(string $type, array $options): void
    {
        if ($type === 'multi-column-desktop' ) {
            $this->is_multi_column = true;
            $this->multi_columns   = (int) max(1, min(6, (int)($options['dropdown_columns'] ?? 2)));
            $this->menu_type       = 'desktop';
            $this->options = array_merge($this->options, [
                'dropdown_trigger_class' => $options['dropdown_trigger_class'] ?? 'nav-link dropdown-trigger',
                'dropdown_link_class'    => $options['dropdown_link_class'] ?? 'dropdown-link',
                'dropdown_arrow_class'   => $options['dropdown_arrow_class'] ?? 'dropdown-arrow fas fa-chevron-down',
                'enable_icons'           => $options['enable_icons'] ?? true,
            ]);
        }
        if ($type === 'overlay-mobile') {
            $this->options = array_merge($this->options, [
                'mobile_link_class' => $options['mobile_link_class'] ?? 'mobile-menu-link block py-3 px-5 text-foreground hover:text-primary transition-colors font-medium',
                'mobile_submenu_class' => $options['mobile_submenu_class'] ?? 'mobile-submenu-link block py-2 px-8 text-text-muted hover:text-primary transition-colors',
                'enable_accordion' => $options['enable_accordion'] ?? true,
            ]);
            $this->menu_type = 'mobile';
        }
    }
    private function mcResolveIconClass(?string $attrTitle, ?array $classes): ?string
    {
        if (is_string($attrTitle) && strpos($attrTitle, 'fa-') !== false) {
            return strpos($attrTitle, 'fa ') !== false ? trim($attrTitle) : 'fa ' . trim($attrTitle);
        }
        if (is_array($classes)) {
            foreach ($classes as $c) {
                if (is_string($c) && strpos($c, 'fa-') === 0) {
                    return 'fa ' . trim($c);
                }
            }
        }
        return null;
    }
    public function start_el(&$output, $item, $depth = 0, $args = [], $id = 0): void
    {
        if ($this->menu_type === 'desktop' && $this->is_multi_column) {
            $item  = (object) $item;
            $title = apply_filters('the_title', $item->title ?? '');
            $url   = isset($item->url) ? esc_url($item->url) : '
              if ($depth === 0) {
            $classes_wp   = empty($item->classes) ? [] : (array) $item->classes;
            $has_children = in_array('menu-item-has-children', $classes_wp, true);
            $li_classes   = $classes_wp;
            $li_classes[] = 'menu-item-' . (int) ($item->ID ?? 0);
            $li_classes[] = 'relative';
            if ($has_children) {
                $li_classes[] = 'has-dropdown';
            }
            $output .= "\n<li class=\"" . esc_attr(implode(' ', array_filter($li_classes))) . "\">";
            $link_class_children    = esc_attr($this->options['dropdown_trigger_class'] ?? 'nav-link dropdown-trigger');
            $link_class_no_children = esc_attr($this->options['desktop_link_class'] ?? 'nav-link');
            $link_class             = $has_children ? $link_class_children : $link_class_no_children;
            $this->mc_parent_id = $has_children ? (int) ($item->ID ?? 0) : null;
            $output .= '<a href="' . $url . '" class="' . $link_class . '"><span>' . esc_html($title) . '</span>';
            if ($has_children) {
                $arrow_cls = esc_attr($this->options['dropdown_arrow_class'] ?? 'dropdown-arrow fas fa-chevron-down');
                $output   .= '<i class="' . $arrow_cls . '" aria-hidden="true"></i>';
            }
            $output .= '</a>';
            return;
        }
            if ($depth === 1) {
                $this->mc_buffer[$this->mc_parent_id ?? 0][] = [
                    'title'      => $title,
                    'url'        => $url,
                    'target'     => $item->target ?? '',
                    'rel'        => $item->xfn ?? '',
                    'attr_title' => $item->attr_title ?? '',
                    'classes'    => $item->classes ?? [],
                ];
                return;
            }
            return;
        }
        if ($this->menu_type === 'mobile') {
            $this->current_mobile_item_id = $item->ID;
        }
        if ($this->menu_type === 'simple') {
            $this->render_simple_menu_item($output, $item, $depth, $args, $id);
            return;
        }
        if ($this->menu_type === 'dropdown') {
            $this->current_item_id = $item->ID;
            $this->render_dropdown_menu_item($output, $item, $depth, $args, $item->ID);
            return;
        }
        if ($this->menu_type === 'mobile' && $depth > 3) {
            return;
        }
        if ($this->menu_type === 'desktop' && $depth >= 1) {
            $this->collect_mega_menu_items($item, $depth);
            return;
        }
        $this->render_menu_item($output, $item, $depth, $args, $id);
    }
    private function render_dropdown_menu_item(&$output, $item, $depth, $args, $id): void
    {
        $indent      = ($depth) ? str_repeat("\t", $depth) : '';
        $classes     = empty($item->classes) ? [] : (array) $item->classes;
        $classes[]   = 'menu-item-' . $item->ID;
        $has_children = in_array('menu-item-has-children', $classes);
        $class_names = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth));
        $li_attributes = '';
        if ($has_children) {
            // Alpine.js state for open/close submenu (on hover)
            $li_attributes = ' x-data="{ open: false }" @mouseenter="open = true" @mouseleave="open = false"';
        }
        $final_classes = ' class="relative ' . esc_attr($class_names) . '"';
        $id_attr = apply_filters('nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args, $depth);
        $id_attr = $id_attr ? ' id="' . esc_attr($id_attr) . '"' : '';
        $output .= $indent . '<li' . $id_attr . $final_classes . $li_attributes . '>';
        $atts = [
            'href'   => !empty($item->url) ? $item->url : '#',
            'target' => !empty($item->target) ? $item->target : '',
            'rel'    => !empty($item->xfn) ? $item->xfn : '',
            'title'  => !empty($item->attr_title) ? $item->attr_title : '',
        ];
        if ($depth === 0) {
            $link_class = $this->options['dropdown_root_link_class'];
        } elseif ($depth === 1) {
            $link_class = $this->options['dropdown_child_link_class'];
        } else {
            $link_class = $this->options['dropdown_subchild_link_class'];
        }
        $atts['class'] = $link_class;
        $attributes = '';
        foreach ($atts as $attr => $value) {
            if (!empty($value)) {
                $value = ($attr === 'href') ? esc_url($value) : esc_attr($value);
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }
        $item_output = ($args->before ?? '') . '<a' . $attributes . '>';
        $item_output .= ($args->link_before ?? '') . apply_filters('the_title', $item->title, $item->ID) . ($args->link_after ?? '');
        // Add indicator icon for items with children
        if ($has_children) {
            if ($depth === 0) {
                $item_output .= " <span class=\"flex flex-col justify-center align-middle ml-1 text-[12px] transition-all duration-200 ease-out\" :class=\"open ? '-rotate-90 text-secondary-hover' : 'text-dark'\" aria-hidden=\"true\"><svg class=\"w-4 h-4\" viewBox=\"0 0 20 20\" xmlns=\"http:
            } else {
                $item_output .= ' <span :class="open ? \'text-secondary-hover\' : \'text-dark\'" class="flex flex-col justify-center left-5 top-1/2 text-[16px] font-bold"><svg width="12px" height="12px" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17 9H5.414l3.293-3.293a.999.999 0 10-1.414-1.414l-5 5a.999.999 0 000 1.414l5 5a.997.997 0 001.414 0 .999.999 0 000-1.414L5.414 11H17a1 1 0 100-2z\" fill=\"currentColor\"/></svg></span>';
            }
        }
        $item_output .= '</a>' . ($args->after ?? '');
        $output .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
    }
    private function render_simple_menu_item(&$output, $item, $depth, $args, $id): void
    {
        $indent      = ($depth) ? str_repeat("\t", $depth) : '';
        $classes     = empty($item->classes) ? [] : (array) $item->classes;
        $classes[]   = 'menu-item-' . $item->ID;
        $class_names = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth));
        $class_names = $class_names ? ' class="' . esc_attr($class_names) . '"' : '';
        $id_attr     = apply_filters('nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args, $depth);
        $id_attr     = $id_attr ? ' id="' . esc_attr($id_attr) . '"' : '';
        $output     .= $indent . '<li' . $id_attr . $class_names . '>';
        $atts         = [
            'title'  => !empty($item->attr_title) ? $item->attr_title : '',
            'target' => !empty($item->target) ? $item->target : '',
            'rel'    => !empty($item->xfn) ? $item->xfn : '',
            'href'   => !empty($item->url) ? $item->url : '',
        ];
        if ($item->current || $item->current_item_ancestor || $item->current_item_parent) {
            $atts['aria-current'] = 'page';
        }
        $atts        = apply_filters('nav_menu_link_attributes', $atts, $item, $args, $depth);
        $attributes  = '';
        foreach ($atts as $attr => $value) {
            if (!empty($value)) {
                $value      = ($attr === 'href') ? esc_url($value) : esc_attr($value);
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }
        $item_output = $args->before ?? '';
        $item_output .= '<a ' . $attributes . ' class="' . esc_attr($this->options['simple_link_class']) . '">';
        $item_output .= ($args->link_before ?? '') . apply_filters('the_title', $item->title, $item->ID) . ($args->link_after ?? '');
        $item_output .= '</a>';
        $item_output .= $args->after ?? '';
        $output      .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
    }
    private function collect_mega_menu_items($item, $depth): void
    {
        if ($depth === 1) {
            $this->mega_menu_items[] = [
                'title'      => apply_filters('the_title', $item->title, $item->ID),
                'url'        => $item->url,
                'ID'         => $item->ID,
                'target'     => $item->target,
                'attr_title' => $item->attr_title,
                'xfn'        => $item->xfn,
                'children'   => [],
            ];
            $this->current_parent    = &$this->mega_menu_items[count($this->mega_menu_items) - 1];
        } elseif ($depth === 2 && $this->current_parent !== null) {
            $this->current_parent['children'][] = [
                'title'      => apply_filters('the_title', $item->title, $item->ID),
                'url'        => $item->url,
                'ID'         => $item->ID,
                'target'     => $item->target,
                'attr_title' => $item->attr_title,
                'xfn'        => $item->xfn,
            ];
        }
    }
    private function render_menu_item(&$output, $item, $depth, $args, $id): void
    {
        $indent       = ($depth) ? str_repeat("\t", $depth) : '';
        $classes      = empty($item->classes) ? [] : (array) $item->classes;
        $classes[]    = 'menu-item-' . $item->ID;
        $has_children = in_array('menu-item-has-children', $classes);
        $class_names  = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth));
        $class_names  = $class_names ? ' class="' . esc_attr($class_names) . '"' : '';
        $id_attr      = apply_filters('nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args, $depth);
        $id_attr      = $id_attr ? ' id="' . esc_attr($id_attr) . '"' : '';
        // Hybrid State Logic: Apply Alpine.js state only to appropriate menu types and depths.
        if ($this->menu_type === 'mobile' && $has_children && $depth > 0 && $depth < 3) {
            $output .= $indent . '<li' . $id_attr . $class_names . ' x-data="{ open: false }">';
        } elseif ($depth === 0 && $this->menu_type === 'desktop') {
            $output .= $indent . '<li' . $id_attr . $class_names . ' x-data="{ open0: false, isHovered: false }" x-on:mouseenter="open0 = true; isHovered = true" x-on:mouseleave="open0 = false; isHovered = false" class="menu-item-flex">';
        } else {
            $output .= $indent . '<li' . $id_attr . $class_names . '>';
        }
        $atts = [
            'title'  => !empty($item->attr_title) ? $item->attr_title : '',
            'target' => !empty($item->target) ? $item->target : '',
            'rel'    => !empty($item->xfn) ? $item->xfn : '',
            'href'   => !empty($item->url) ? $item->url : '',
        ];
        if ($item->current || $item->current_item_ancestor || $item->current_item_parent) {
            $atts['aria-current'] = 'page';
        }
        $atts = apply_filters('nav_menu_link_attributes', $atts, $item, $args, $depth);
        $attributes = '';
        foreach ($atts as $attr => $value) {
            if (!empty($value)) {
                $value      = ($attr === 'href') ? esc_url($value) : esc_attr($value);
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }
        $item_output = $args->before ?? '';
        if ($this->menu_type === 'mobile') {
            if ($has_children && $depth < 3) {
                $item_output .= '<div class="flex items-center justify-between w-full">';
                $item_output .= '<a ' . $attributes . ' class="' . esc_attr($this->options['mobile_link_class']) . '">' . apply_filters('the_title', $item->title, $item->ID) . '</a>';
                if ($depth === 0) {
                    $click_action = sprintf("activeMenu = (activeMenu === %d ? null : %d)", $item->ID, $item->ID);
                    $aria_binding = sprintf('x-bind:aria-expanded="(activeMenu === %d).toString()"', $item->ID);
                    $svg_icon     = $this->generateDropdownIcon($item->ID);
                } else {
                    $click_action = "open = !open";
                    $aria_binding = 'x-bind:aria-expanded="open.toString()"';
                    $svg_icon     = $this->generateDropdownIcon();
                }
                $item_output .= '<button @click="' . $click_action . '" class="' . esc_attr($this->options['mobile_button_class']) . '" aria-label="' . esc_attr__('باز و بسته کردن زیرمنو', 'your-theme-textdomain') . '" ' . $aria_binding . '>' . $svg_icon . '</button>';
                $item_output .= '</div>';
            } else {
                $item_output .= '<a ' . $attributes . ' class="' . esc_attr($this->options['mobile_link_no_children_class']) . '">' . apply_filters('the_title', $item->title, $item->ID) . '</a>';
            }
        } else {
            $svg_icon = $has_children ? $this->generateDropdownIcon() : '';
            $item_output .= '<a x-bind:style="{ color: isHovered ? \'' . esc_attr($this->options['desktop_link_hover_color']) . '\' : \'\' }" ' . $attributes . ' class="' . esc_attr($this->options['desktop_link_class']) . '">';
            $item_output .= ($args->link_before ?? '') . apply_filters('the_title', $item->title, $item->ID) . ($args->link_after ?? '');
            if ($svg_icon) {
                $item_output .= $svg_icon;
            }
            $item_output .= '</a>';
        }
        $item_output .= $args->after ?? '';
        $output      .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
    }
    public function start_lvl(&$output, $depth = 0, $args = []): void
    {
        if ($this->menu_type === 'desktop' && $this->is_multi_column && $depth === 0) {
            $indent  = str_repeat("\t", $depth + 1);
            $output .= "\n$indent<div class=\"dropdown-menu\" >\n";
            $output .= "$indent\t<div class=\"dropdown-content\">\n";
            $output .= "$indent\t\t<div class=\"dropdown-columns\">\n";
            return;
        }
        if ($this->menu_type === 'simple') {
            return;
        }
        $indent = str_repeat("\t", $depth + 1);
        if ($this->menu_type === 'mobile' && $depth < 3) {
            $padding_class = 'pr-' . (2 * ($depth + 1));
            if ($depth === 0) {
                $show_condition = sprintf("activeMenu === %d", $this->current_mobile_item_id);
            } else {
                $show_condition = "open";
            }
            $output .= "\n$indent<ul class=\"submenu list-none p-0 m-0 {$padding_class} bg-gray-50 mt-2 rounded overflow-hidden\" x-show=\"{$show_condition}\" x-cloak x-transition:enter=\"transition-all duration-300 ease-in-out\" x-transition:enter-start=\"opacity-0 max-h-0\" x-transition:enter-end=\"opacity-100 max-h-[100vh]\" x-transition:leave=\"transition-all duration-300 ease-in-out\" x-transition:leave-start=\"opacity-100 max-h-[100vh]\" x-transition:leave-end=\"opacity-0 max-h-0\">\n";
        } elseif ($this->menu_type === 'desktop' && $depth === 0) {
            $output .= "\n$indent<div class=\"mega-menu absolute min-w-[60vw] bg-white shadow-xl border-t border-gray-200 z-[112]\" style=\"margin-left: calc(-50vw + 50%);\" x-show=\"open0\" x-cloak x-transition:enter=\"transition ease-out duration-300\" x-transition:enter-start=\"opacity-0 transform translate-y-[-10px]\" x-transition:enter-end=\"opacity-100 transform translate-y-0\" x-transition:leave=\"transition ease-in duration-200\" x-transition:leave-start=\"opacity-100 transform translate-y-0\" x-transition:leave-end=\"opacity-0 transform translate-y-[-10px]\" @click.outside=\"open0 = false\">\n";
            $output .= "$indent\t<div class=\"mega-menu-container max-w-7xl mx-auto px-6 py-8\">\n";
            $output .= "$indent\t\t<div class=\"flex flex-row-reverse gap-8\">\n";
            if (!empty($this->current_menu_images)) {
                $output .= "$indent\t\t\t<div class=\"mega-menu-images flex flex-col gap-4 w-1/3\">\n";
                foreach ($this->current_menu_images as $image_data) {
                    if (!empty($image_data['image'])) {
                        $image_url = esc_url($image_data['image']);
                        $image_alt = !empty($image_data['alt']) ? esc_attr($image_data['alt']) : esc_attr(basename($image_url));
                        $output .= "$indent\t\t\t\t<div class=\"image-container flex-1\">\n";
                        $output .= "$indent\t\t\t\t\t<img src=\"$image_url\" alt=\"$image_alt\" class=\"w-full h-[300px] rounded-lg shadow-md object-cover hover:shadow-lg transition-shadow duration-300\" loading=\"lazy\" />\n";
                        $output .= "$indent\t\t\t\t</div>\n";
                    }
                }
                $output .= "$indent\t\t\t</div>\n";
            }
            $output .= "$indent\t\t\t<div class=\"mega-menu-content flex-1\">\n";
            $output .= "$indent\t\t\t\t<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n";
        } elseif ($this->menu_type === 'dropdown') {
            $ul_classes = "absolute top-full right-0 min-w-[250px] bg-white shadow-[0_0_3px_rgba(0,0,0,0.15)] rounded-b-xl z-50 py-2 mt-1 list-none";
            if ($depth > 0) {
                $ul_classes = "absolute top-0 right-full min-w-[250px] bg-white shadow-[3px_0_3px_rgba(0,0,0,0.15)] rounded-xl shadow-lg z-50 py-2 list-none";
            }
            $output .= "\n$indent<ul class=\"$ul_classes\" x-show=\"open\" x-cloak " . 'x-transition:enter="transition ease-out duration-200" ' . 'x-transition:enter-start="opacity-0 translate-y-2" ' . 'x-transition:enter-end="opacity-100 translate-y-0" ' . 'x-transition:leave="transition ease-in duration-150" ' . 'x-transition:leave-start="opacity-100 translate-y-0" ' . 'x-transition:leave-end="opacity-0 translate-y-2" ' . "style=\"display:none;\">\n";
        }
    }
    public function end_lvl(&$output, $depth = 0, $args = []): void
    {
        $indent = str_repeat("\t", $depth + 1);
        if ($this->menu_type === 'desktop' && $this->is_multi_column && $depth === 0) {
            $indent   = str_repeat("\t", $depth + 1);
            $children = $this->mc_buffer[$this->mc_parent_id ?? 0] ?? [];
            $count    = count($children);
            $cols     = max(1, $this->multi_columns);
            $perCol   = $count > 0 ? (int) ceil($count / $cols) : 0;
            for ($col = 0; $col < $cols; $col++) {
                $start = $col * $perCol;
                $slice = ($perCol > 0) ? array_slice($children, $start, $perCol) : [];
                $output .= "$indent\t\t\t<div class=\"dropdown-column\">\n";
                foreach ($slice as $link) {
                    $iconClass = null;
                    if (!empty($this->options['enable_icons'])) {
                        $iconClass = $this->mcResolveIconClass($link['attr_title'] ?? null, $link['classes'] ?? []);
                    }
                    $linkClass = esc_attr($this->options['dropdown_link_class'] ?? 'dropdown-link');
                    $output .= "$indent\t\t\t\t<a href=\"" . esc_url($link['url']) . "\" class=\"$linkClass\">";
                    if ($iconClass) {
                        $output .= '<i class="' . esc_attr($iconClass) . '" aria-hidden="true"></i>';
                    }
                    $output .= '<span>' . esc_html($link['title']) . "</span></a>\n";
                }
                $output .= "$indent\t\t\t</div>\n";
            }
            $output .= "$indent\t\t</div>\n";
            $output .= "$indent\t</div>\n";
            $output .= "$indent</div>\n";
            if ($this->mc_parent_id !== null) {
                unset($this->mc_buffer[$this->mc_parent_id]);
            }
            $this->mc_parent_id = null;
            return;
        }
        if ($this->menu_type === 'dropdown') {
            $output .= "$indent</ul>\n";
            return;
        }
        if ($depth === 0 && $this->menu_type === 'desktop') {
            foreach ($this->mega_menu_items as $mega_item) {
                $output .= "$indent\t\t\t\t\t<div class=\"mega-menu-section\">\n";
                $parent_atts = [];
                $parent_atts['href'] = !empty($mega_item['url']) ? esc_url($mega_item['url']) : '#';
                if (!empty($mega_item['target'])) $parent_atts['target'] = esc_attr($mega_item['target']);
                if (!empty($mega_item['attr_title'])) $parent_atts['title'] = esc_attr($mega_item['attr_title']);
                if (!empty($mega_item['xfn'])) $parent_atts['rel'] = esc_attr($mega_item['xfn']);
                $parent_attributes_str = '';
                foreach ($parent_atts as $attr => $val) {
                    $parent_attributes_str .= " {$attr}=\"{$val}\"";
                }
                $output .= "$indent\t\t\t\t\t\t<h3 class=\"mega-menu-title text-xl font-bold text-secondary mb-4 pb-2 border-b border-gray-200\">\n";
                $output .= "$indent\t\t\t\t\t\t\t<a" . $parent_attributes_str . " class=\"" . esc_attr($this->options['mega_menu_parent_title_class']) . "\">" . esc_html($mega_item['title']) . "</a>\n";
                $output .= "$indent\t\t\t\t\t\t</h3>\n";
                if (!empty($mega_item['children'])) {
                    $output .= "$indent\t\t\t\t\t\t<ul class=\"mega-menu-items list-none p-0 m-0 space-y-2\">\n";
                    foreach ($mega_item['children'] as $child) {
                        $child_atts = [];
                        $child_atts['href'] = !empty($child['url']) ? esc_url($child['url']) : '#';
                        if (!empty($child['target'])) $child_atts['target'] = esc_attr($child['target']);
                        if (!empty($child['attr_title'])) $child_atts['title'] = esc_attr($child['attr_title']);
                        if (!empty($child['xfn'])) $child_atts['rel'] = esc_attr($child['xfn']);
                        $child_attributes_str = '';
                        foreach ($child_atts as $attr => $val) {
                            $child_attributes_str .= " {$attr}=\"{$val}\"";
                        }
                        $output .= "$indent\t\t\t\t\t\t\t<li>\n";
                        $output .= "$indent\t\t\t\t\t\t\t\t<a" . $child_attributes_str . " class=\"" . esc_attr($this->options['mega_menu_child_link_class']) . "\">" . esc_html($child['title']) . "</a>\n";
                        $output .= "$indent\t\t\t\t\t\t\t</li>\n";
                    }
                    $output .= "$indent\t\t\t\t\t\t</ul>\n";
                }
                $output .= "$indent\t\t\t\t\t</div>\n";
            }
            $output .= "$indent\t\t\t\t</div>\n";
            $output .= "$indent\t\t\t</div>\n";
            $output .= "$indent\t\t</div>\n";
            $output .= "$indent\t</div>\n";
            $output .= "$indent</div>\n";
            $this->mega_menu_items     = [];
            $this->current_parent      = null;
            $this->current_menu_images = [];
        } elseif ($this->menu_type === 'mobile' && $depth < 3) {
            $output .= "$indent</ul>\n";
        }
    }
    public function end_el(&$output, $item, $depth = 0, $args = []): void
    {
        if ($this->menu_type === 'desktop' && $this->is_multi_column) {
            if ($depth === 0) {
                $output .= "</li>\n";
            }
            return;
        }
        if ($this->menu_type === 'simple' || $this->menu_type === 'dropdown') {
            $output .= "</li>\n";
            return;
        }
        if ($this->menu_type === 'mobile') {
            if ($depth <= 3) {
                $output .= "</li>\n";
            }
            return;
        }
        if ($this->menu_type === 'desktop') {
            if ($depth === 0) {
                $output .= "</li>\n";
            }
        }
    }
    private function generateDropdownIcon(int $item_id = null): string
    {
        $transform_attr = '';
        $fill_attr      = '';
        if ($this->menu_type === 'desktop') {
            $transform_attr = "x-bind:style=\"{ transform: isHovered ? 'rotate(180deg)' : 'rotate(0deg)' }\"";
            $fill_attr      = "x-bind:fill=\"isHovered ? '" . esc_attr($this->options['desktop_svg_hover_fill']) . "' : '" . esc_attr($this->options['desktop_svg_default_fill']) . "'\"";
        } elseif ($this->menu_type === 'mobile') {
            if ($item_id !== null) {
                $transform_attr = sprintf("x-bind:style=\"{ transform: activeMenu === %d ? 'rotate(180deg)' : 'rotate(0deg)' }\"", $item_id);
            } else {
                $transform_attr = "x-bind:style=\"{ transform: open ? 'rotate(180deg)' : 'rotate(0deg)' }\"";
            }
            $fill_attr = 'fill="' . esc_attr($this->options['mobile_svg_default_fill']) . '"';
        }
        return '<svg width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="h-6 transition-transform duration-300 ease-in-out" ' . $transform_attr . ' style="margin-top: 0 !important; margin-bottom: 0 !important;" aria-hidden="true">
        <g data-name="24x24/On Light/Arrow-Bottom">
        <path fill="none" d="M0 24V0h24v24z"/>
        <path id="svgPath" d="M7.53 9.47a.75.75 0 0 0-1.06 1.06l5 5a.75.75 0 0 0 1.061 0l5-5a.75.75 0 0 0-1.061-1.06L12 13.94Z" ' . $fill_attr . ' />
        </g></svg>';
    }
}




================================================================
End of Codebase
================================================================
